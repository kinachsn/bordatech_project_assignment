/*
 * bmp280.c
 *
 *  Created on: Mar 31, 2025
 *      Author: hasan
 */

#include "stm32f407xx.h"

void BMP280_Init(I2C_Handle_t *pI2CHandle) {
    uint8_t config[2];

    // Kontrol Register'ını ayarla (0xF4) -> Normal mod, 16x örnekleme
    config[0] = CTRL_MEAS;
    config[1] = 0x57;

    I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(pI2CHandle, config, 2, BMP280_ADDR, I2C_DISABLE_SR);

    // Konfigürasyon Register'ı (0xF5) -> Standart filtreleme ve standby süresi
    config[0] = CONFIG;
    config[1] = 0xAC;
    I2C_MasterSendData(pI2CHandle, config, 2, BMP280_ADDR, I2C_DISABLE_SR);
}

void BMP280_ReadCalibrationData(I2C_Handle_t *pI2CHandle) {
    uint8_t calib_data[24];
    uint8_t reg_addr = CALIB_DATA_ADDR;

    I2C_PeripheralControl(I2C1, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(pI2CHandle, &reg_addr, 1, BMP280_ADDR, I2C_DISABLE_SR);

    I2C_MasterReceiveData(pI2CHandle, calib_data, 24, BMP280_ADDR, I2C_DISABLE_SR);

    dig_T1 = (calib_data[0]  << 8) | calib_data[1];
    dig_T2 = (calib_data[2]  << 8) | calib_data[3];
    dig_T3 = (calib_data[4]  << 8) | calib_data[5];

    dig_P1 = (calib_data[6]  << 8) | calib_data[7];
    dig_P2 = (calib_data[8]  << 8) | calib_data[9];
    dig_P3 = (calib_data[10] << 8) | calib_data[11];
    dig_P4 = (calib_data[12] << 8) | calib_data[13];
    dig_P5 = (calib_data[14] << 8) | calib_data[15];
    dig_P6 = (calib_data[16] << 8) | calib_data[17];
    dig_P7 = (calib_data[18] << 8) | calib_data[19];
    dig_P8 = (calib_data[20] << 8) | calib_data[21];
    dig_P9 = (calib_data[22] << 8) | calib_data[23];
}

uint32_t BMP280_ReadPressureRaw(I2C_Handle_t *pI2CHandle) {
    uint8_t pressure_raw[3];
    uint8_t reg_addr = Press_register;

    I2C_PeripheralControl(I2C1, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(&I2C1Handle, &reg_addr, 1, BMP280_ADDR, I2C_DISABLE_SR);

    I2C_MasterReceiveData(&I2C1Handle, pressure_raw, 3, BMP280_ADDR, I2C_DISABLE_SR);

    uint32_t adc_P = ((uint32_t)pressure_raw[0] << 12) | ((uint32_t)pressure_raw[1] << 4) | (pressure_raw[2] >> 4);

    return adc_P;
}
