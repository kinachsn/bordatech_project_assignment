/*
 * deneme.c
 *
 *  Created on: Mar 29, 2025
 *      Author: hasan
 */


#include <stdio.h>
#include <string.h>
#include "stm32f407xx.h"

#define LM75A_ADDR  0x48
#define TEMP_REG    0x00
#define GY302_ADDR  0x23
#define PRESS_REG    0xF7
#define WINDOW_SIZE 5  // Median filter pencere boyutu

uint16_t dig_T1, dig_P1;
int16_t dig_T2, dig_T3, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
BMP280_S32_t t_fine;

I2C_Handle_t I2C1Handle;

float press_buffer[WINDOW_SIZE] = {0};
float temp_buffer[WINDOW_SIZE] = {0};  // Sıcaklık ölçüm dizisi
float light_buffer[WINDOW_SIZE] = {0}; // Işık ölçüm dizisi

uint8_t temp_index = 0, light_index = 0, press_index = 0;;

float calculate_median(float arr[], uint8_t size) {
    float sorted[size];
    memcpy(sorted, arr, sizeof(float) * size);

    // Bubble Sort (Diziyi küçükten büyüğe sırala)
    for (uint8_t i = 0; i < size - 1; i++) {
        for (uint8_t j = 0; j < size - i - 1; j++) {
            if (sorted[j] > sorted[j + 1]) {
                float temp = sorted[j];
                sorted[j] = sorted[j + 1];
                sorted[j + 1] = temp;
            }
        }
    }
    return sorted[size / 2];
}

void I2C1_GPIOInits(void) {
    GPIO_Handle_t I2CPins;

    I2CPins.pGPIOx = GPIOB;
    I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
    I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
    I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
    I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
    I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;

    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6; // SCL
    GPIO_Init(&I2CPins);

    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9; // SDA
    GPIO_Init(&I2CPins);
}

void I2C1_Inits(void) {
    I2C1Handle.pI2Cx = I2C1;
    I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
    I2C1Handle.I2C_Config.I2C_DeviceAddress = 0x61;
    I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
    I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
    I2C_Init(&I2C1Handle);
}

void LM75A_ReadTemp(void) {
    uint8_t temp_data[2];
    uint8_t reg_addr = TEMP_REG;

    I2C_PeripheralControl(I2C1, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(&I2C1Handle, &reg_addr, 1, LM75A_ADDR, I2C_ENABLE_SR);
    I2C_MasterReceiveData(&I2C1Handle, temp_data, 2, LM75A_ADDR, I2C_DISABLE_SR);

    int16_t temp = (temp_data[0] << 8) | temp_data[1];
    temp >>= 5;
    float temperature = temp * 0.125;

    // Diziye yeni sıcaklık değerini ekle
    temp_buffer[temp_index] = temperature;
    temp_index = (temp_index + 1) % WINDOW_SIZE;
}

void GY302_ReadLightLevel(void) {
	I2C_PeripheralControl(I2C1, ENABLE);
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

	uint8_t light_data[2];
	uint8_t cmd = 0x10; // Sürekli yüksek çözünürlüklü ölçüm modu

	I2C_MasterSendData(&I2C1Handle, &cmd, 1, GY302_ADDR, I2C_DISABLE_SR);
	I2C_MasterReceiveData(&I2C1Handle, light_data, 2, GY302_ADDR, I2C_DISABLE_SR);

    uint16_t raw_light = (light_data[0] << 8) | light_data[1];
    float lux = raw_light / 1.2; // BH1750 hesaplama yöntemi

    // Diziye yeni ışık değeri ekle
    light_buffer[light_index] = lux;
    light_index = (light_index + 1) % WINDOW_SIZE;
}

void BMP280_ReadPressure() {
    uint32_t adc_P = BMP280_ReadPressureRaw();
    uint32_t adc_T = BMP280_ReadPressureRaw();
    bmp280_compensate_T_int32(adc_T);
    float Pressure = bmp280_compensate_T_int32(adc_P)/100;

    press_buffer[press_index] = Pressure;
    press_index = (press_index + 1) % WINDOW_SIZE;
}


void TIM2_IRQHandler() {
    if (TIM2->SR & 0x01) {
    	LM75A_ReadTemp();
    	GY302_ReadLightLevel();
    	BMP280_ReadPressure();

        float filtered_temp = calculate_median(temp_buffer, WINDOW_SIZE);
        float filtered_lux = calculate_median(light_buffer, WINDOW_SIZE);
        float filtered_pascal = calculate_median(press_buffer, WINDOW_SIZE);

        printf("Temperature: %.1f C | Light: %.1f lux | Pressure: %.1f hPa %%\n",filtered_temp, filtered_lux, filtered_pascal);

        TIM2->SR &= ~(1 << 0);
    }
}


void TIM2_Init() {
    TIM2_PCLK_EN();
    TIM2->PSC = 16000 - 1;
    TIM2->ARR = 1000 - 1;
    TIM2->DIER |= (1 << 0);
    TIM2->CR1 |= (1 << 0);
    TIM2_IRQInterrupt_Config(ENABLE);
}


void BMP280_Init() {
    uint8_t config[2];

    // Kontrol Register'ını ayarla (0xF4) -> Normal mod, 16x örnekleme
    config[0] = CTRL_MEAS;
    config[1] = 0x57;

    I2C_PeripheralControl(I2C1, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(&I2C1Handle, config, 2, BMP280_ADDR, I2C_DISABLE_SR);

    // Konfigürasyon Register'ı (0xF5) -> Standart filtreleme ve standby süresi
    config[0] = CONFIG;
    config[1] = 0xAC;
    I2C_MasterSendData(&I2C1Handle, config, 2, BMP280_ADDR, I2C_DISABLE_SR);
}

void BMP280_ReadCalibrationData() {
    uint8_t calib_data[24];
    uint8_t reg_addr = CALIB_DATA_ADDR;

    I2C_PeripheralControl(I2C1, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(&I2C1Handle, &reg_addr, 1, BMP280_ADDR, I2C_DISABLE_SR);

    I2C_MasterReceiveData(&I2C1Handle, calib_data, 24, BMP280_ADDR, I2C_DISABLE_SR);

    dig_T1 = (calib_data[0]  << 8) | calib_data[1];
    dig_T2 = (calib_data[2]  << 8) | calib_data[3];
    dig_T3 = (calib_data[4]  << 8) | calib_data[5];

    dig_P1 = (calib_data[6]  << 8) | calib_data[7];
    dig_P2 = (calib_data[8]  << 8) | calib_data[9];
    dig_P3 = (calib_data[10] << 8) | calib_data[11];
    dig_P4 = (calib_data[12] << 8) | calib_data[13];
    dig_P5 = (calib_data[14] << 8) | calib_data[15];
    dig_P6 = (calib_data[16] << 8) | calib_data[17];
    dig_P7 = (calib_data[18] << 8) | calib_data[19];
    dig_P8 = (calib_data[20] << 8) | calib_data[21];
    dig_P9 = (calib_data[22] << 8) | calib_data[23];
}

uint32_t BMP280_ReadPressureRaw() {
    uint8_t pressure_raw[3];
    uint8_t reg_addr = Press_register;

    I2C_PeripheralControl(I2C1, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(&I2C1Handle, &reg_addr, 1, BMP280_ADDR, I2C_DISABLE_SR);

    I2C_MasterReceiveData(&I2C1Handle, pressure_raw, 3, BMP280_ADDR, I2C_DISABLE_SR);

    uint32_t adc_P = ((uint32_t)pressure_raw[0] << 12) | ((uint32_t)pressure_raw[1] << 4) | (pressure_raw[2] >> 4);

    return adc_P;
}

uint32_t BMP280_ReadTemperatureRaw() {
    uint8_t temp_raw[3];
    uint8_t reg_addr = Temperature_register;

    I2C_PeripheralControl(I2C1, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(&I2C1Handle, &reg_addr, 1, BMP280_ADDR, I2C_DISABLE_SR);

    I2C_MasterReceiveData(&I2C1Handle, temp_raw, 3, BMP280_ADDR, I2C_DISABLE_SR);

    uint32_t adc_T = ((uint32_t)temp_raw[0] << 12) | ((uint32_t)temp_raw[1] << 4) | (temp_raw[2] >> 4);

    return adc_T;
}

//-----------------------------------------

/*
 * Compensation formula from the provider (Bosch Sensortec)
 */

//-----------------------------------------

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value

BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T) {
	BMP280_S32_t var1, var2, T;
	var1  = ((((adc_T>>3) - ((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
	var2  = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) *  ((BMP280_S32_t)dig_T3)) >> 14;
	t_fine = var1 + var2;
	T  = (t_fine * 5 + 128) >> 8;
	return T;
	}

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa

BMP280_U32_t bmp280_compensate_P_int64(BMP280_S32_t adc_P) {
	BMP280_S64_t var1, var2, p;
	var1 = ((BMP280_S64_t)t_fine) - 128000;
	var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
	var2 = var2 + ((var1*(BMP280_S64_t)dig_P5)<<17);
	var2 = var2 + (((BMP280_S64_t)dig_P4)<<35);
	var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3)>>8) + ((var1 * (BMP280_S64_t)dig_P2)<<12);
	var1 = (((((BMP280_S64_t)1)<<47)+var1))*((BMP280_S64_t)dig_P1)>>33;
	if (var1 == 0) {
		return 0; // avoid exception caused by division by zero
	}
	p = 1048576-adc_P;
	p = (((p<<31)-var2)*3125)/var1;
	var1 = (((BMP280_S64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
	var2 = (((BMP280_S64_t)dig_P8) * p) >> 19;
	p = ((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7)<<4);
	return (BMP280_U32_t)p;
}

int main() {
    I2C1_GPIOInits();
    I2C1_Inits();
    BMP280_Init();
    BMP280_ReadCalibrationData();
    TIM2_Init();

    while(1);
}
