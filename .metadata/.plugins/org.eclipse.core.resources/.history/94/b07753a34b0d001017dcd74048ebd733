#include <stdint.h>
#include <stdio.h>

#define BMP280_ADDR  0x76  // BMP280'in I2C adresi (0x76 veya 0x77 olabilir)

// Kalibrasyon verileri
uint16_t dig_T1;
int16_t dig_T2, dig_T3;
uint16_t dig_P1;
int16_t dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

void BMP280_ReadCalibrationData(void) {
    uint8_t calib_data[24];
    uint8_t reg_addr = 0x88;

    I2C_MasterSendData(&I2C1Handle, &reg_addr, 1, BMP280_ADDR, I2C_DISABLE_SR);
    I2C_MasterReceiveData(&I2C1Handle, calib_data, 24, BMP280_ADDR, I2C_DISABLE_SR);

    dig_T1 = (calib_data[1] << 8) | calib_data[0];
    dig_T2 = (calib_data[3] << 8) | calib_data[2];
    dig_T3 = (calib_data[5] << 8) | calib_data[4];

    dig_P1 = (calib_data[7] << 8) | calib_data[6];
    dig_P2 = (calib_data[9] << 8) | calib_data[8];
    dig_P3 = (calib_data[11] << 8) | calib_data[10];
    dig_P4 = (calib_data[13] << 8) | calib_data[12];
    dig_P5 = (calib_data[15] << 8) | calib_data[14];
    dig_P6 = (calib_data[17] << 8) | calib_data[16];
    dig_P7 = (calib_data[19] << 8) | calib_data[18];
    dig_P8 = (calib_data[21] << 8) | calib_data[20];
    dig_P9 = (calib_data[23] << 8) | calib_data[22];
}

float BMP280_CompensateTemperature(int32_t adc_T, int32_t *t_fine) {
    int32_t var1, var2;
    float T;

    var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) >> 11;
    var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) * ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
    *t_fine = var1 + var2;
    T = (*t_fine * 5 + 128) >> 8;
    return T / 100.0;
}

float BMP280_CompensatePressure(int32_t adc_P, int32_t t_fine) {
    int64_t var1, var2, p;
    float P;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)dig_P6;
    var2 = var2 + ((var1 * (int64_t)dig_P5) << 17);
    var2 = var2 + (((int64_t)dig_P4) << 35);
    var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) + ((var1 * (int64_t)dig_P2) << 12);
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dig_P1) >> 33;

    if (var1 == 0) {
        return 0; // 0'a bölme hatasını önler
    }
    p = 1048576 - adc_P;
    p = (((p << 31) - var2) * 3125) / var1;
    var1 = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
    var2 = (((int64_t)dig_P8) * p) >> 19;

    P = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7) << 4);
    return P / 256.0; // Pascal cinsine çevrildi
}

void BMP280_ReadTemperaturePressure(void) {
    uint8_t temp_press_data[6];
    uint8_t reg_addr = 0xF7;
    int32_t raw_temp, raw_press, t_fine;
    float temperature, pressure;

    I2C_MasterSendData(&I2C1Handle, &reg_addr, 1, BMP280_ADDR, I2C_DISABLE_SR);
    I2C_MasterReceiveData(&I2C1Handle, temp_press_data, 6, BMP280_ADDR, I2C_DISABLE_SR);

    raw_press = (temp_press_data[0] << 12) | (temp_press_data[1] << 4) | (temp_press_data[2] >> 4);
    raw_temp = (temp_press_data[3] << 12) | (temp_press_data[4] << 4) | (temp_press_data[5] >> 4);

    temperature = BMP280_CompensateTemperature(raw_temp, &t_fine);
    pressure = BMP280_CompensatePressure(raw_press, t_fine);

    printf("Temperature: %.2f °C\n", temperature);
    printf("Pressure: %.2f Pa\n", pressure);
}

void I2C1_GPIOInits(void) {
    GPIO_Handle_t I2CPins;

    I2CPins.pGPIOx = GPIOB;
    I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
    I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
    I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
    I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
    I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;

    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6; // SCL
    GPIO_Init(&I2CPins);

    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9; // SDA
    GPIO_Init(&I2CPins);
}

void I2C1_Inits(void) {
    I2C1Handle.pI2Cx = I2C1;
    I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
    I2C1Handle.I2C_Config.I2C_DeviceAddress = 0x61;
    I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
    I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
    I2C_Init(&I2C1Handle);
}

void TIM2_IRQHandler() {
    if (TIM2->SR & 0x01) {

        /*
    	LM75A_ReadTemp();

        //BME280_ReadHumidity();

        float filtered_temp = calculate_median(temp_buffer, WINDOW_SIZE);
        float filtered_lux = calculate_median(light_buffer, WINDOW_SIZE);
        //float filtered_hum = calculate_median(hum_buffer, WINDOW_SIZE);

        printf("Sıcaklık: %.2f °C | Işık: %.2f lux %%\n",
               filtered_temp, filtered_lux);
		*/
        TIM2->SR &= ~(1 << 0);
    }
}

void TIM2_Init() {
    TIM2_PCLK_EN();
    TIM2->PSC = 16000 - 1;
    TIM2->ARR = 1000 - 1;
    TIM2->DIER |= (1 << 0);
    TIM2->CR1 |= (1 << 0);
    TIM2_IRQInterrupt_Config(ENABLE);
}

int main() {
    I2C1_GPIOInits();
    I2C1_Inits();
    TIM2_Init();
    BMP280_ReadCalibrationData();
    BMP280_ReadTemperaturePressure();
    while(1);
}
