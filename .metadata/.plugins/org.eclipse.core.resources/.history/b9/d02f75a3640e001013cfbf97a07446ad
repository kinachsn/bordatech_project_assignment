/*
 * bmp280.c
 *
 *  Created on: Mar 31, 2025
 *      Author: hasan
 */

#include "stm32f407xx.h"

void BMP280_Init(I2C_Handle_t *pI2CHandle) {
    uint8_t config[2];

    // Kontrol Register'ını ayarla (0xF4) -> Normal mod, 16x örnekleme
    config[0] = CTRL_MEAS;
    config[1] = 0x57;

    I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(pI2CHandle, config, 2, BMP280_ADDR, I2C_DISABLE_SR);

    // Konfigürasyon Register'ı (0xF5) -> Standart filtreleme ve standby süresi
    config[0] = CONFIG;
    config[1] = 0xAC;
    I2C_MasterSendData(pI2CHandle, config, 2, BMP280_ADDR, I2C_DISABLE_SR);
}

void BMP280_ReadCalibrationData(I2C_Handle_t *pI2CHandle) {
    uint8_t calib_data[24];
    uint8_t reg_addr = CALIB_DATA_ADDR;

    I2C_PeripheralControl(I2C1, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(pI2CHandle, &reg_addr, 1, BMP280_ADDR, I2C_DISABLE_SR);

    I2C_MasterReceiveData(pI2CHandle, calib_data, 24, BMP280_ADDR, I2C_DISABLE_SR);

    dig_T1 = (calib_data[0]  << 8) | calib_data[1];
    dig_T2 = (calib_data[2]  << 8) | calib_data[3];
    dig_T3 = (calib_data[4]  << 8) | calib_data[5];

    dig_P1 = (calib_data[6]  << 8) | calib_data[7];
    dig_P2 = (calib_data[8]  << 8) | calib_data[9];
    dig_P3 = (calib_data[10] << 8) | calib_data[11];
    dig_P4 = (calib_data[12] << 8) | calib_data[13];
    dig_P5 = (calib_data[14] << 8) | calib_data[15];
    dig_P6 = (calib_data[16] << 8) | calib_data[17];
    dig_P7 = (calib_data[18] << 8) | calib_data[19];
    dig_P8 = (calib_data[20] << 8) | calib_data[21];
    dig_P9 = (calib_data[22] << 8) | calib_data[23];
}

uint32_t BMP280_ReadPressureRaw(I2C_Handle_t *pI2CHandle) {
    uint8_t pressure_raw[3];
    uint8_t reg_addr = Press_register;

    I2C_PeripheralControl(I2C1, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(pI2CHandle, &reg_addr, 1, BMP280_ADDR, I2C_DISABLE_SR);

    I2C_MasterReceiveData(pI2CHandle, pressure_raw, 3, BMP280_ADDR, I2C_DISABLE_SR);

    uint32_t adc_P = ((uint32_t)pressure_raw[0] << 12) | ((uint32_t)pressure_raw[1] << 4) | (pressure_raw[2] >> 4);

    return adc_P;
}

uint32_t BMP280_ReadTemperatureRaw(I2C_Handle_t *pI2CHandle) {
    uint8_t temp_raw[3];
    uint8_t reg_addr = Temperature_register;

    I2C_PeripheralControl(I2C1, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(pI2CHandle, &reg_addr, 1, BMP280_ADDR, I2C_DISABLE_SR);

    I2C_MasterReceiveData(pI2CHandle, temp_raw, 3, BMP280_ADDR, I2C_DISABLE_SR);

    uint32_t adc_T = ((uint32_t)temp_raw[0] << 12) | ((uint32_t)temp_raw[1] << 4) | (temp_raw[2] >> 4);

    return adc_T;
}

//-----------------------------------------

/*
 * Compensation formula from the provider (Bosch Sensortec)
 */

//-----------------------------------------

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value

BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T)
{
	int32_t var1, var2;
	var1 =
			((((uncomp_temp / 8)
					- ((int32_t) compensationParameters.dig_t1 << 1)))
					* ((int32_t) compensationParameters.dig_t2)) / 2048;
	var2 = (((((uncomp_temp / 16) - ((int32_t) compensationParameters.dig_t1))
			* ((uncomp_temp / 16) - ((int32_t) compensationParameters.dig_t1)))
			/ 4096) * ((int32_t) compensationParameters.dig_t3)) / 16384;
	t_fine = var1 + var2;
	return (t_fine * 5 + 128) / 256;
}

// Returns pressure in Pa as unsigned 32 bit integer. Output value of “96386” equals 96386 Pa = 963.86 hPa
BMP280_U32_t bmp280_compensate_P_int32(BMP280_S32_t uncomp_pres)
{
	int64_t var1, var2, p;

		var1 = ((int64_t) (t_fine)) - 128000;
		var2 = var1 * var1 * (int64_t) compensationParameters.dig_p6;
		var2 = var2 + ((var1 * (int64_t) compensationParameters.dig_p5) * 131072);
		var2 = var2 + (((int64_t) compensationParameters.dig_p4) * 34359738368);
		var1 = ((var1 * var1 * (int64_t) compensationParameters.dig_p3) / 256)
				+ ((var1 * (int64_t) compensationParameters.dig_p2) * 4096);
		var1 = ((INT64_C(0x800000000000) + var1)
				* ((int64_t) compensationParameters.dig_p1)) / 8589934592;
		if (var1 == 0)
		{
			return 0;
		}
		p = 1048576 - uncomp_pres;
		p = (((((p * 2147483648U)) - var2) * 3125) / var1);
		var1 = (((int64_t) compensationParameters.dig_p9) * (p / 8192) * (p / 8192))
				/ 33554432;
		var2 = (((int64_t) compensationParameters.dig_p8) * p) / 524288;
		p = ((p + var1 + var2) / 256)
				+ (((int64_t) compensationParameters.dig_p7) * 16);
		return (uint32_t) p;
}
