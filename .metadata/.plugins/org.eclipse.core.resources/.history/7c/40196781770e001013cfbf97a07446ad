/*
 * deneme.c
 *
 *  Created on: Mar 29, 2025
 *      Author: hasan
 */


#include <stdio.h>
#include <string.h>
#include "stm32f407xx.h"
#include "stm32f407xx_bmp280.h"

#define LM75A_ADDR  0x48
#define TEMP_REG    0x00
#define GY302_ADDR  0x23
#define PRESS_REG    0xF7
#define WINDOW_SIZE 5  // Median filter pencere boyutu

I2C_Handle_t I2C1Handle;

float press_buffer[WINDOW_SIZE] = {0};
float temp_buffer[WINDOW_SIZE] = {0};  // Sıcaklık ölçüm dizisi
float light_buffer[WINDOW_SIZE] = {0}; // Işık ölçüm dizisi

uint8_t temp_index = 0, light_index = 0, press_index = 0;;







void LM75A_ReadTemp(void);
void GY302_ReadLightLevel(void);
void BMP280_ReadPressure();

void TIM2_Init();
void I2C1_Inits(void);
void I2C1_GPIOInits(void);
void I2C1_GPIOInits(void);

float calculate_median(float arr[], uint8_t size);

int main() {
    I2C1_GPIOInits();
    I2C1_Inits();
    BMP280_Init(&I2C1Handle);
    TIM2_Init();

    while(1);
}

void BMP280_ReadPressure() {
    uint32_t adc_P = BMP280_ReadPressureRaw(&I2C1Handle);
    uint32_t adc_T = BMP280_ReadTemperatureRaw(&I2C1Handle);
    // BMP280_ReadCalibrationData(&I2C1Handle);
    bmp280_compensate_T_double(adc_T);
    float Pressure = (float)bmp280_compensate_P_double(adc_P)/100;

    press_buffer[press_index] = Pressure;
    press_index = (press_index + 1) % WINDOW_SIZE;
}

void GY302_ReadLightLevel(void) {
	I2C_PeripheralControl(I2C1, ENABLE);
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

	uint8_t light_data[2];
	uint8_t cmd = 0x10; // Sürekli yüksek çözünürlüklü ölçüm modu

	I2C_MasterSendData(&I2C1Handle, &cmd, 1, GY302_ADDR, I2C_DISABLE_SR);
	I2C_MasterReceiveData(&I2C1Handle, light_data, 2, GY302_ADDR, I2C_DISABLE_SR);

    uint16_t raw_light = (light_data[0] << 8) | light_data[1];
    float lux = raw_light / 1.2; // BH1750 hesaplama yöntemi

    // Diziye yeni ışık değeri ekle
    light_buffer[light_index] = lux;
    light_index = (light_index + 1) % WINDOW_SIZE;
}

void LM75A_ReadTemp(void) {
    uint8_t temp_data[2];
    uint8_t reg_addr = TEMP_REG;

    I2C_PeripheralControl(I2C1, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(&I2C1Handle, &reg_addr, 1, LM75A_ADDR, I2C_ENABLE_SR);
    I2C_MasterReceiveData(&I2C1Handle, temp_data, 2, LM75A_ADDR, I2C_DISABLE_SR);

    int16_t temp = (temp_data[0] << 8) | temp_data[1];
    temp >>= 5;
    float temperature = temp * 0.125;

    // Diziye yeni sıcaklık değerini ekle
    temp_buffer[temp_index] = temperature;
    temp_index = (temp_index + 1) % WINDOW_SIZE;
}

void TIM2_IRQHandler() {
    if (TIM2->SR & 0x01) {
    	LM75A_ReadTemp();
    	GY302_ReadLightLevel();
    	BMP280_ReadPressure();

        float filtered_temp = calculate_median(temp_buffer, WINDOW_SIZE);
        float filtered_lux = calculate_median(light_buffer, WINDOW_SIZE);
        float filtered_pascal = calculate_median(press_buffer, WINDOW_SIZE);

        printf("Temperature: %.1f C | Light: %.1f lux | Pressure: %.1f hPa %%\n",filtered_temp, filtered_lux, filtered_pascal);

        TIM2->SR &= ~(1 << 0);
    }
}

void TIM2_Init() {
    TIM2_PCLK_EN();
    TIM2->PSC = 16000 - 1;
    TIM2->ARR = 1000 - 1;
    TIM2->DIER |= (1 << 0);
    TIM2->CR1 |= (1 << 0);
    TIM2_IRQInterrupt_Config(ENABLE);
}

void I2C1_Inits(void) {
    I2C1Handle.pI2Cx = I2C1;
    I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
    I2C1Handle.I2C_Config.I2C_DeviceAddress = 0x61;
    I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
    I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
    I2C_Init(&I2C1Handle);
}

void I2C1_GPIOInits(void) {
    GPIO_Handle_t I2CPins;

    I2CPins.pGPIOx = GPIOB;
    I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
    I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
    I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
    I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
    I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;

    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6; // SCL
    GPIO_Init(&I2CPins);

    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9; // SDA
    GPIO_Init(&I2CPins);
}

float calculate_median(float arr[], uint8_t size) {
    float sorted[size];
    memcpy(sorted, arr, sizeof(float) * size);

    // Bubble Sort (Diziyi küçükten büyüğe sırala)
    for (uint8_t i = 0; i < size - 1; i++) {
        for (uint8_t j = 0; j < size - i - 1; j++) {
            if (sorted[j] > sorted[j + 1]) {
                float temp = sorted[j];
                sorted[j] = sorted[j + 1];
                sorted[j + 1] = temp;
            }
        }
    }
    return sorted[size / 2];
}
