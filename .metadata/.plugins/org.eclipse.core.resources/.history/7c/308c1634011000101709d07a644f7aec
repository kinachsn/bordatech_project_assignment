/*
 * deneme.c
 *
 *  Created on: Mar 29, 2025
 *      Author: hasan
 */

#include "stm32f407xx.h"
#include "stm32f407xx_bmp280.h"
#include "project_stats.h"

#define LM75A_ADDR  0x48   // LM75A I2C Address
#define TEMP_REG    0x00   // Temperature register
#define GY302_ADDR  0x23   // GY-302 (BH1750) I2C Address
#define PRESS_REG   0xF7   // BMP280 Pressure register
#define WINDOW_SIZE 5      // Median filter window size
#define MAX_JSON_SIZE 512

I2C_Handle_t I2C1Handle;
USART_Handle_t usart2_handle;

/*
 * ------------------------------------------------------------------------------------------
 */

char json_data[MAX_JSON_SIZE];

// Buffers for storing sensor data
float press_buffer[WINDOW_SIZE] = {0};
float temp_buffer[WINDOW_SIZE] = {0};
float light_buffer[WINDOW_SIZE] = {0};

// Buffer index trackers
uint8_t temp_index = 0, light_index = 0, press_index = 0;

/*
 * ------------------------------------------------------------------------------------------
 */

// New buffers for filtered data
float filtered_press_buffer[WINDOW_SIZE] = {0};
float filtered_temp_buffer[WINDOW_SIZE] = {0};
float filtered_light_buffer[WINDOW_SIZE] = {0};

// Filtered buffer index trackers
uint8_t f_temp_index = 0, f_light_index = 0, f_press_index = 0;

/*
 * ------------------------------------------------------------------------------------------
 */

/*
 * Functions for reading data from sensors (Temperature, Light, Pressure)
 */
void LM75A_ReadTemp(void);
void GY302_ReadLightLevel(void);
void BMP280_ReadPressure(void);

/*
 * Configure STM32 GPIO, I2C, and Timer2 for sensor communication
 */
void TIM2_Init(void);
void TIM5_Init(void);
void I2C1_Inits(void);
void I2C1_GPIOInits(void);
void USART2_GPIOInit(void);
void USART2_Init(void);

/*
 * ------------------------------------------------------------------------------------------
 */

int main() {
    I2C1_GPIOInits();
    I2C1_Inits();
    BMP280_Init(&I2C1Handle);
    USART2_GPIOInit();
    USART2_Init();
    USART_PeripheralControl(USART2,ENABLE);
    TIM2_Init();
    TIM5_Init();

    while(1);
}

/*
 * ------------------------------------------------------------------------------------------
 */

// Read pressure from BMP280 sensor
void BMP280_ReadPressure(void) {
    uint32_t adc_P = BMP280_ReadPressureRaw(&I2C1Handle);
    uint32_t adc_T = BMP280_ReadTemperatureRaw(&I2C1Handle);
    bmp280_compensate_T_double(adc_T);
    float Pressure = (float)bmp280_compensate_P_double(adc_P)/100;

    press_buffer[press_index] = Pressure;
    press_index = (press_index + 1) % WINDOW_SIZE;
}

// Read light level from GY-302 sensor
void GY302_ReadLightLevel(void) {
    I2C_PeripheralControl(I2C1, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    uint8_t light_data[2];
    uint8_t cmd = 0x10; // Continuous high-resolution mode

    I2C_MasterSendData(&I2C1Handle, &cmd, 1, GY302_ADDR, I2C_DISABLE_SR);
    I2C_MasterReceiveData(&I2C1Handle, light_data, 2, GY302_ADDR, I2C_DISABLE_SR);

    uint16_t raw_light = (light_data[0] << 8) | light_data[1];
    float lux = raw_light / 1.2; // Convert raw data to lux

    light_buffer[light_index] = lux;
    light_index = (light_index + 1) % WINDOW_SIZE;
}

// Read temperature from LM75A sensor
void LM75A_ReadTemp(void) {
    uint8_t temp_data[2];
    uint8_t reg_addr = TEMP_REG;
    uint16_t temperature;

    I2C_PeripheralControl(I2C1, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(&I2C1Handle, &reg_addr, 1, LM75A_ADDR, I2C_ENABLE_SR);
    I2C_MasterReceiveData(&I2C1Handle, temp_data, 2, LM75A_ADDR, I2C_DISABLE_SR);

    int16_t temp = (temp_data[0] << 8) | temp_data[1];
    temp >>= 5;

     // Check the MSB (Most Significant Bit) to determine if the temperature is positive or negative
     if (temp & (1 << 10)) {  // If MSB bit D10 is 1, temperature is negative

    	 temp = ~temp + 1;  // Convert to 2's complement (negative value)
    	 temperature = -(temp * 0.125);  // Convert the value to temperature in Celsius

     }else // If MSB bit D10 is 0, temperature is positive
     {
    	 temperature = temp * 0.125;  // Convert the value to temperature in Celsius
     }

    temp_buffer[temp_index] = temperature;
    temp_index = (temp_index + 1) % WINDOW_SIZE;
}

// Timer 2 interrupt handler (Sampling 1s)
void TIM2_IRQHandler() {
    if (TIM2->SR & 0x01) {
        LM75A_ReadTemp();
        GY302_ReadLightLevel();
        BMP280_ReadPressure();

        // Apply median filter to sensor data
        float filtered_temp = calculate_median(temp_buffer, WINDOW_SIZE);
        float filtered_lux = calculate_median(light_buffer, WINDOW_SIZE);
        float filtered_pascal = calculate_median(press_buffer, WINDOW_SIZE);


        // Store filtered data in new buffers
        filtered_temp_buffer[f_temp_index] = filtered_temp;
        filtered_light_buffer[f_light_index] = filtered_lux;
        filtered_press_buffer[f_press_index] = filtered_pascal;

        // Update circular buffer indexes
        f_temp_index = (f_temp_index + 1) % WINDOW_SIZE;
        f_light_index = (f_light_index + 1) % WINDOW_SIZE;
        f_press_index = (f_press_index + 1) % WINDOW_SIZE;

        TIM2->SR &= ~(1 << 0); // Clear interrupt flag
    }
}

void TIM5_IRQHandler() {
    if (TIM5->SR & 0x01) {  // If update interrupt occurs
    	float ble_package_temp[4], ble_package_light[4], ble_package_press[4];
    	calculate_statistics(filtered_temp_buffer, WINDOW_SIZE, ble_package_temp);
    	calculate_statistics(filtered_light_buffer, WINDOW_SIZE, ble_package_light);
    	calculate_statistics(filtered_press_buffer, WINDOW_SIZE, ble_package_press);

    	snprintf(json_data, MAX_JSON_SIZE,
    	             "{\n"
    	             "  \"temperature\": {\n"
    	             "    \"median\": %.2f,\n"
    	             "    \"min\": %.2f,\n"
    	             "    \"max\": %.2f,\n"
    	             "    \"std_dev\": %.2f\n"
    	             "  },\n"
    	             "  \"light\": {\n"
    	             "    \"median\": %.2f,\n"
    	             "    \"min\": %.2f,\n"
    	             "    \"max\": %.2f,\n"
    	             "    \"std_dev\": %.2f\n"
    	             "  },\n"
    	             "  \"pressure\": {\n"
    	             "    \"median\": %.2f,\n"
    	             "    \"min\": %.2f,\n"
    	             "    \"max\": %.2f,\n"
    	             "    \"std_dev\": %.2f\n"
    	             "  }\n"
    	             "}",
    	             ble_package_temp[0], ble_package_temp[1], ble_package_temp[2], ble_package_temp[3],
					 ble_package_light[0], ble_package_light[1], ble_package_light[2], ble_package_light[3],
					 ble_package_press[0], ble_package_press[1], ble_package_press[2], ble_package_press[3]);

        // Send the data to ESP32 via USART
        USART_SendData(&usart2_handle, (uint8_t *)json_data, strlen(json_data));

        // Clear interrupt flag
        TIM5->SR &= ~(1 << 0); // Clear interrupt flag
    }
}


void TIM2_Init() {

    TIM2_PCLK_EN();

    // Set prescaler and auto-reload value to generate 1-second interval (Sampling Period)
    TIM2->PSC = 16000 - 1; // Prescaler
    TIM2->ARR = 1000 - 1; // Auto-reload value
    TIM2->DIER |= (1 << 0); // Enable update interrupt
    TIM2->CR1 |= (1 << 0); // Enable timer
    TIM2_IRQInterrupt_Config(ENABLE);	 // Enable TIM2 interrupt in NVIC
}

void TIM5_Init() {

	TIM5_PCLK_EN();

    // Set prescaler and auto-reload value to generate 30-second interval (BLE Package Period)
    TIM5->PSC = 16000 - 1;
    TIM5->ARR = 5300 - 1;
    TIM5->DIER |= (1 << 0);
    TIM5->CR1 |= (1 << 0);
    TIM5_IRQInterrupt_Config(ENABLE);	// Enable TIM5 interrupt in NVIC
}

// Initialize I2C1 peripheral
void I2C1_Inits(void) {
    I2C1Handle.pI2Cx = I2C1;
    I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
    I2C1Handle.I2C_Config.I2C_DeviceAddress = 0x61;
    I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
    I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
    I2C_Init(&I2C1Handle);
}

// Initialize I2C1 GPIO pins
void I2C1_GPIOInits(void) {
    GPIO_Handle_t I2CPins;

    I2CPins.pGPIOx = GPIOB;
    I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
    I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
    I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
    I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
    I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;

    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6; // SCL
    GPIO_Init(&I2CPins);

    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9; // SDA
    GPIO_Init(&I2CPins);
}

void USART2_Init(void)
{
	usart2_handle.pUSARTx = USART2;
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
	USART_Init(&usart2_handle);
}

void USART2_GPIOInit(void)
{
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
	GPIO_Init(&usart_gpios);

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
	GPIO_Init(&usart_gpios);

}

