/*
 * bmp280.c
 *
 *  Created on: Mar 30, 2025
 *      Author: hasan
 */

#include "bmp280.h"
#include "stm32f407xx.h"

void BMP280_Init() {
    uint8_t config[2];

    // Kontrol Register'ını ayarla (0xF4) -> Normal mod, 16x örnekleme
    config[0] = CTRL_MEAS;
    config[1] = 0x57;

    I2C_PeripheralControl(I2C1, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(I2C1Handle, config, 2, BMP280_ADDR, I2C_DISABLE_SR);

    // Konfigürasyon Register'ı (0xF5) -> Standart filtreleme ve standby süresi
    config[0] = CONFIG;
    config[1] = 0xAC;
    I2C_MasterSendData(I2C1Handle, config, 2, BMP280_ADDR, I2C_DISABLE_SR);
}

void BMP280_ReadCalibrationData() {
    uint8_t calib_data[24];
    uint8_t reg_addr = CALIB_DATA_ADDR;

    I2C_PeripheralControl(I2C1, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(I2C1Handle, &reg_addr, 1, BMP280_ADDR, I2C_DISABLE_SR);

    I2C_MasterReceiveData(I2C1Handle, calib_data, 24, BMP280_ADDR, I2C_DISABLE_SR);

    dig_T1 = (calib_data[0]  << 8) | calib_data[1];
    dig_T2 = (calib_data[2]  << 8) | calib_data[3];
    dig_T3 = (calib_data[4]  << 8) | calib_data[5];

    dig_P1 = (calib_data[6]  << 8) | calib_data[7];
    dig_P2 = (calib_data[8]  << 8) | calib_data[9];
    dig_P3 = (calib_data[10] << 8) | calib_data[11];
    dig_P4 = (calib_data[12] << 8) | calib_data[13];
    dig_P5 = (calib_data[14] << 8) | calib_data[15];
    dig_P6 = (calib_data[16] << 8) | calib_data[17];
    dig_P7 = (calib_data[18] << 8) | calib_data[19];
    dig_P8 = (calib_data[20] << 8) | calib_data[21];
    dig_P9 = (calib_data[22] << 8) | calib_data[23];
}

uint32_t BMP280_ReadPressureRaw() {
    uint8_t pressure_raw[3];
    uint8_t reg_addr = Press_register;

    I2C_PeripheralControl(I2C1, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(I2C1Handle, &reg_addr, 1, BMP280_ADDR, I2C_DISABLE_SR);

    I2C_MasterReceiveData(I2C1Handle, pressure_raw, 3, BMP280_ADDR, I2C_DISABLE_SR);

    uint32_t adc_P = ((uint32_t)pressure_raw[0] << 12) | ((uint32_t)pressure_raw[1] << 4) | (pressure_raw[2] >> 4);

    return adc_P;
}

uint32_t BMP280_ReadTemperatureRaw() {
    uint8_t temp_raw[3];
    uint8_t reg_addr = Temperature_register;

    I2C_PeripheralControl(I2C1, ENABLE);
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);

    I2C_MasterSendData(I2C1Handle, &reg_addr, 1, BMP280_ADDR, I2C_DISABLE_SR);

    I2C_MasterReceiveData(I2C1Handle, temp_raw, 3, BMP280_ADDR, I2C_DISABLE_SR);

    uint32_t adc_T = ((uint32_t)temp_raw[0] << 12) | ((uint32_t)temp_raw[1] << 4) | (temp_raw[2] >> 4);

    return adc_T;
}

//-----------------------------------------

/*
 * Compensation formula from the provider (Bosch Sensortec)
 */

//-----------------------------------------

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value

BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T)
{
	BMP280_S32_t var1, var2, T;

	var1  = ((((adc_T>>3) - ((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
	var2  = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) *  ((BMP280_S32_t)dig_T3)) >> 14;
	t_fine = var1 + var2;
	T  = (t_fine * 5 + 128) >> 8;
	return T;
}

// Returns pressure in Pa as unsigned 32 bit integer. Output value of “96386” equals 96386 Pa = 963.86 hPa
BMP280_U32_t bmp280_compensate_P_int32(BMP280_S32_t adc_P)
{
	BMP280_S32_t var1, var2;
	BMP280_U32_t p;

	var1 = (((BMP280_S32_t)t_fine)>>1) - (BMP280_S32_t)64000;

	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((BMP280_S32_t)dig_P6);
	var2 = var2 + ((var1*((BMP280_S32_t)dig_P5))<<1);
	var2 = (var2>>2)+(((BMP280_S32_t)dig_P4)<<16);

	var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((BMP280_S32_t)dig_P2) * var1)>>1))>>18;
	var1 =((((32768+var1))*((BMP280_S32_t)dig_P1))>>15);

	if (var1 == 0) {
		return 0; // avoid exception caused by division by zero
	}

	p = (((BMP280_U32_t)(((BMP280_S32_t)1048576)-adc_P)-(var2>>12)))*3125;

	if (p < 0x80000000)  {
		p = (p << 1) / ((BMP280_U32_t)var1);
	}
	else  {
		p = (p / (BMP280_U32_t)var1) * 2;
	}

	var1 = (((BMP280_S32_t)dig_P9) * ((BMP280_S32_t)(((p>>3) * (p>>3))>>13)))>>12;
	var2 = (((BMP280_S32_t)(p>>2)) * ((BMP280_S32_t)dig_P8))>>13;

	p = (BMP280_U32_t)((BMP280_S32_t)p + ((var1 + var2 + dig_P7) >> 4));

	return p;
}











