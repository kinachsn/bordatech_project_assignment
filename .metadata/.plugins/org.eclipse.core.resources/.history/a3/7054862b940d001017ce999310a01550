/*
 * bmp280.c
 *
 *  Created on: Mar 30, 2025
 *      Author: hasan
 */

#include "bmp280.h"

void BMP280_Init() {
    uint8_t config[2];

    // Kontrol Register'ını ayarla (0xF4) -> Normal mod, 16x örnekleme
    config[0] = CTRL_MEAS;
    config[1] = 0x57;

    I2C_MasterSendData(I2C1Handle, config, 2, BMP280_ADDR, I2C_DISABLE_SR);

    // Konfigürasyon Register'ı (0xF5) -> Standart filtreleme ve standby süresi
    config[0] = CONFIG;
    config[1] = 0xAC;
    I2C_MasterSendData(I2C1Handle, config, 2, BMP280_ADDR, I2C_DISABLE_SR);
}

void BMP280_ReadCalibrationData() {
    uint8_t calib_data[18];
    uint8_t reg_addr = CALIB_DATA_P_ADDR;

    I2C_MasterSendData(I2C1Handle, &reg_addr, 1, BMP280_ADDR, I2C_DISABLE_SR);

    I2C_MasterReceiveData(I2C1Handle, calib_data, 18, BMP280_ADDR, I2C_DISABLE_SR);

    dig_P1 = (calib_data[0]  << 8) | calib_data[1];
    dig_P2 = (calib_data[2]  << 8) | calib_data[3];
    dig_P3 = (calib_data[4] << 8)  | calib_data[5];
    dig_P4 = (calib_data[6] << 8)  | calib_data[7];
    dig_P5 = (calib_data[8] << 8)  | calib_data[9];
    dig_P6 = (calib_data[10] << 8) | calib_data[11];
    dig_P7 = (calib_data[12] << 8) | calib_data[13];
    dig_P8 = (calib_data[14] << 8) | calib_data[15];
    dig_P9 = (calib_data[16] << 8) | calib_data[17];
}

uint32_t BMP280_ReadPressureRaw() {
    uint8_t pressure_raw[3];
    uint8_t reg_addr = Press_register;

    I2C_MasterSendData(I2C1Handle, &reg_addr, 1, BMP280_ADDR, I2C_DISABLE_SR);

    I2C_MasterReceiveData(I2C1Handle, pressure_raw, 3, BMP280_ADDR, I2C_DISABLE_SR);

    uint32_t raw_pressure = ((uint32_t)pressure_raw[0] << 12) | ((uint32_t)pressure_raw[1] << 4) | (pressure_raw[2] >> 4);

    return raw_pressure;
}

double BMP280_CompensatePressure(uint32_t adc_P) {
    int64_t var1, var2, p;
    var1 = ((int64_t)adc_P) - 128000;
    var2 = var1 * var1 * (int64_t)dig_P6;
    var2 = var2 + ((var1 * (int64_t)dig_P5) << 17);
    var2 = var2 + (((int64_t)dig_P4) << 35);
    var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) + ((var1 * (int64_t)dig_P2) << 12);
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dig_P1) >> 33;

    if (var1 == 0) {
        return 0;  // Bölme hatasını önle
    }
    p = 1048576 - adc_P;
    p = (((p << 31) - var2) * 3125) / var1;
    var1 = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
    var2 = (((int64_t)dig_P8) * p) >> 19;
    p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7) << 4);

    return (double)p / 256.0;
}











