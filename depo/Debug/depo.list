
depo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08006df0  08006df0  00007df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c8  080072c8  000091f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080072c8  080072c8  000082c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072d0  080072d0  000091f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072d0  080072d0  000082d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072d4  080072d4  000082d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  080072d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091f4  2**0
                  CONTENTS
 10 .bss          0000043c  200001f4  200001f4  000091f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000630  20000630  000091f4  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000091f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003d83  00000000  00000000  0000921e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f45  00000000  00000000  0000cfa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000438  00000000  00000000  0000dee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000313  00000000  00000000  0000e320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004538  00000000  00000000  0000e633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000056f1  00000000  00000000  00012b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000e059  00000000  00000000  0001825c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000262b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002574  00000000  00000000  000262f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0002886c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006dd4 	.word	0x08006dd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	08006dd4 	.word	0x08006dd4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	@ 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_fmul>:
 8000ea4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ea8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eac:	bf1e      	ittt	ne
 8000eae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb2:	ea92 0f0c 	teqne	r2, ip
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d06f      	beq.n	8000f9c <__aeabi_fmul+0xf8>
 8000ebc:	441a      	add	r2, r3
 8000ebe:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec2:	0240      	lsls	r0, r0, #9
 8000ec4:	bf18      	it	ne
 8000ec6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000eca:	d01e      	beq.n	8000f0a <__aeabi_fmul+0x66>
 8000ecc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ed0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ed4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ed8:	fba0 3101 	umull	r3, r1, r0, r1
 8000edc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ee4:	bf3e      	ittt	cc
 8000ee6:	0049      	lslcc	r1, r1, #1
 8000ee8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000eec:	005b      	lslcc	r3, r3, #1
 8000eee:	ea40 0001 	orr.w	r0, r0, r1
 8000ef2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000ef6:	2afd      	cmp	r2, #253	@ 0xfd
 8000ef8:	d81d      	bhi.n	8000f36 <__aeabi_fmul+0x92>
 8000efa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000efe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f02:	bf08      	it	eq
 8000f04:	f020 0001 	biceq.w	r0, r0, #1
 8000f08:	4770      	bx	lr
 8000f0a:	f090 0f00 	teq	r0, #0
 8000f0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f12:	bf08      	it	eq
 8000f14:	0249      	lsleq	r1, r1, #9
 8000f16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000f1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000f20:	bfc2      	ittt	gt
 8000f22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f2a:	4770      	bxgt	lr
 8000f2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f30:	f04f 0300 	mov.w	r3, #0
 8000f34:	3a01      	subs	r2, #1
 8000f36:	dc5d      	bgt.n	8000ff4 <__aeabi_fmul+0x150>
 8000f38:	f112 0f19 	cmn.w	r2, #25
 8000f3c:	bfdc      	itt	le
 8000f3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000f42:	4770      	bxle	lr
 8000f44:	f1c2 0200 	rsb	r2, r2, #0
 8000f48:	0041      	lsls	r1, r0, #1
 8000f4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f4e:	f1c2 0220 	rsb	r2, r2, #32
 8000f52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f5a:	f140 0000 	adc.w	r0, r0, #0
 8000f5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f62:	bf08      	it	eq
 8000f64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f68:	4770      	bx	lr
 8000f6a:	f092 0f00 	teq	r2, #0
 8000f6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0040      	lsleq	r0, r0, #1
 8000f76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f7a:	3a01      	subeq	r2, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fmul+0xce>
 8000f7e:	ea40 000c 	orr.w	r0, r0, ip
 8000f82:	f093 0f00 	teq	r3, #0
 8000f86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f8a:	bf02      	ittt	eq
 8000f8c:	0049      	lsleq	r1, r1, #1
 8000f8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f92:	3b01      	subeq	r3, #1
 8000f94:	d0f9      	beq.n	8000f8a <__aeabi_fmul+0xe6>
 8000f96:	ea41 010c 	orr.w	r1, r1, ip
 8000f9a:	e78f      	b.n	8000ebc <__aeabi_fmul+0x18>
 8000f9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa0:	ea92 0f0c 	teq	r2, ip
 8000fa4:	bf18      	it	ne
 8000fa6:	ea93 0f0c 	teqne	r3, ip
 8000faa:	d00a      	beq.n	8000fc2 <__aeabi_fmul+0x11e>
 8000fac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb0:	bf18      	it	ne
 8000fb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	d1d8      	bne.n	8000f6a <__aeabi_fmul+0xc6>
 8000fb8:	ea80 0001 	eor.w	r0, r0, r1
 8000fbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fc0:	4770      	bx	lr
 8000fc2:	f090 0f00 	teq	r0, #0
 8000fc6:	bf17      	itett	ne
 8000fc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000fcc:	4608      	moveq	r0, r1
 8000fce:	f091 0f00 	teqne	r1, #0
 8000fd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000fd6:	d014      	beq.n	8001002 <__aeabi_fmul+0x15e>
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d101      	bne.n	8000fe2 <__aeabi_fmul+0x13e>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	d10f      	bne.n	8001002 <__aeabi_fmul+0x15e>
 8000fe2:	ea93 0f0c 	teq	r3, ip
 8000fe6:	d103      	bne.n	8000ff0 <__aeabi_fmul+0x14c>
 8000fe8:	024b      	lsls	r3, r1, #9
 8000fea:	bf18      	it	ne
 8000fec:	4608      	movne	r0, r1
 8000fee:	d108      	bne.n	8001002 <__aeabi_fmul+0x15e>
 8000ff0:	ea80 0001 	eor.w	r0, r0, r1
 8000ff4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ff8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ffc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001000:	4770      	bx	lr
 8001002:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8001006:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800100a:	4770      	bx	lr

0800100c <__aeabi_fdiv>:
 800100c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8001010:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001014:	bf1e      	ittt	ne
 8001016:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800101a:	ea92 0f0c 	teqne	r2, ip
 800101e:	ea93 0f0c 	teqne	r3, ip
 8001022:	d069      	beq.n	80010f8 <__aeabi_fdiv+0xec>
 8001024:	eba2 0203 	sub.w	r2, r2, r3
 8001028:	ea80 0c01 	eor.w	ip, r0, r1
 800102c:	0249      	lsls	r1, r1, #9
 800102e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001032:	d037      	beq.n	80010a4 <__aeabi_fdiv+0x98>
 8001034:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001038:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800103c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001040:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8001044:	428b      	cmp	r3, r1
 8001046:	bf38      	it	cc
 8001048:	005b      	lslcc	r3, r3, #1
 800104a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800104e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001052:	428b      	cmp	r3, r1
 8001054:	bf24      	itt	cs
 8001056:	1a5b      	subcs	r3, r3, r1
 8001058:	ea40 000c 	orrcs.w	r0, r0, ip
 800105c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001060:	bf24      	itt	cs
 8001062:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001066:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800106a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800106e:	bf24      	itt	cs
 8001070:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001074:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001078:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800107c:	bf24      	itt	cs
 800107e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001082:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	bf18      	it	ne
 800108a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800108e:	d1e0      	bne.n	8001052 <__aeabi_fdiv+0x46>
 8001090:	2afd      	cmp	r2, #253	@ 0xfd
 8001092:	f63f af50 	bhi.w	8000f36 <__aeabi_fmul+0x92>
 8001096:	428b      	cmp	r3, r1
 8001098:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800109c:	bf08      	it	eq
 800109e:	f020 0001 	biceq.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80010a8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80010ac:	327f      	adds	r2, #127	@ 0x7f
 80010ae:	bfc2      	ittt	gt
 80010b0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80010b4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80010b8:	4770      	bxgt	lr
 80010ba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	3a01      	subs	r2, #1
 80010c4:	e737      	b.n	8000f36 <__aeabi_fmul+0x92>
 80010c6:	f092 0f00 	teq	r2, #0
 80010ca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80010ce:	bf02      	ittt	eq
 80010d0:	0040      	lsleq	r0, r0, #1
 80010d2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80010d6:	3a01      	subeq	r2, #1
 80010d8:	d0f9      	beq.n	80010ce <__aeabi_fdiv+0xc2>
 80010da:	ea40 000c 	orr.w	r0, r0, ip
 80010de:	f093 0f00 	teq	r3, #0
 80010e2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80010e6:	bf02      	ittt	eq
 80010e8:	0049      	lsleq	r1, r1, #1
 80010ea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010ee:	3b01      	subeq	r3, #1
 80010f0:	d0f9      	beq.n	80010e6 <__aeabi_fdiv+0xda>
 80010f2:	ea41 010c 	orr.w	r1, r1, ip
 80010f6:	e795      	b.n	8001024 <__aeabi_fdiv+0x18>
 80010f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010fc:	ea92 0f0c 	teq	r2, ip
 8001100:	d108      	bne.n	8001114 <__aeabi_fdiv+0x108>
 8001102:	0242      	lsls	r2, r0, #9
 8001104:	f47f af7d 	bne.w	8001002 <__aeabi_fmul+0x15e>
 8001108:	ea93 0f0c 	teq	r3, ip
 800110c:	f47f af70 	bne.w	8000ff0 <__aeabi_fmul+0x14c>
 8001110:	4608      	mov	r0, r1
 8001112:	e776      	b.n	8001002 <__aeabi_fmul+0x15e>
 8001114:	ea93 0f0c 	teq	r3, ip
 8001118:	d104      	bne.n	8001124 <__aeabi_fdiv+0x118>
 800111a:	024b      	lsls	r3, r1, #9
 800111c:	f43f af4c 	beq.w	8000fb8 <__aeabi_fmul+0x114>
 8001120:	4608      	mov	r0, r1
 8001122:	e76e      	b.n	8001002 <__aeabi_fmul+0x15e>
 8001124:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001128:	bf18      	it	ne
 800112a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800112e:	d1ca      	bne.n	80010c6 <__aeabi_fdiv+0xba>
 8001130:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001134:	f47f af5c 	bne.w	8000ff0 <__aeabi_fmul+0x14c>
 8001138:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800113c:	f47f af3c 	bne.w	8000fb8 <__aeabi_fmul+0x114>
 8001140:	e75f      	b.n	8001002 <__aeabi_fmul+0x15e>
 8001142:	bf00      	nop

08001144 <__gesf2>:
 8001144:	f04f 3cff 	mov.w	ip, #4294967295
 8001148:	e006      	b.n	8001158 <__cmpsf2+0x4>
 800114a:	bf00      	nop

0800114c <__lesf2>:
 800114c:	f04f 0c01 	mov.w	ip, #1
 8001150:	e002      	b.n	8001158 <__cmpsf2+0x4>
 8001152:	bf00      	nop

08001154 <__cmpsf2>:
 8001154:	f04f 0c01 	mov.w	ip, #1
 8001158:	f84d cd04 	str.w	ip, [sp, #-4]!
 800115c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001160:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001164:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001168:	bf18      	it	ne
 800116a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800116e:	d011      	beq.n	8001194 <__cmpsf2+0x40>
 8001170:	b001      	add	sp, #4
 8001172:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001176:	bf18      	it	ne
 8001178:	ea90 0f01 	teqne	r0, r1
 800117c:	bf58      	it	pl
 800117e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001182:	bf88      	it	hi
 8001184:	17c8      	asrhi	r0, r1, #31
 8001186:	bf38      	it	cc
 8001188:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800118c:	bf18      	it	ne
 800118e:	f040 0001 	orrne.w	r0, r0, #1
 8001192:	4770      	bx	lr
 8001194:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001198:	d102      	bne.n	80011a0 <__cmpsf2+0x4c>
 800119a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800119e:	d105      	bne.n	80011ac <__cmpsf2+0x58>
 80011a0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011a4:	d1e4      	bne.n	8001170 <__cmpsf2+0x1c>
 80011a6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011aa:	d0e1      	beq.n	8001170 <__cmpsf2+0x1c>
 80011ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop

080011b4 <__aeabi_cfrcmple>:
 80011b4:	4684      	mov	ip, r0
 80011b6:	4608      	mov	r0, r1
 80011b8:	4661      	mov	r1, ip
 80011ba:	e7ff      	b.n	80011bc <__aeabi_cfcmpeq>

080011bc <__aeabi_cfcmpeq>:
 80011bc:	b50f      	push	{r0, r1, r2, r3, lr}
 80011be:	f7ff ffc9 	bl	8001154 <__cmpsf2>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	bf48      	it	mi
 80011c6:	f110 0f00 	cmnmi.w	r0, #0
 80011ca:	bd0f      	pop	{r0, r1, r2, r3, pc}

080011cc <__aeabi_fcmpeq>:
 80011cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d0:	f7ff fff4 	bl	80011bc <__aeabi_cfcmpeq>
 80011d4:	bf0c      	ite	eq
 80011d6:	2001      	moveq	r0, #1
 80011d8:	2000      	movne	r0, #0
 80011da:	f85d fb08 	ldr.w	pc, [sp], #8
 80011de:	bf00      	nop

080011e0 <__aeabi_fcmplt>:
 80011e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011e4:	f7ff ffea 	bl	80011bc <__aeabi_cfcmpeq>
 80011e8:	bf34      	ite	cc
 80011ea:	2001      	movcc	r0, #1
 80011ec:	2000      	movcs	r0, #0
 80011ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80011f2:	bf00      	nop

080011f4 <__aeabi_fcmple>:
 80011f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011f8:	f7ff ffe0 	bl	80011bc <__aeabi_cfcmpeq>
 80011fc:	bf94      	ite	ls
 80011fe:	2001      	movls	r0, #1
 8001200:	2000      	movhi	r0, #0
 8001202:	f85d fb08 	ldr.w	pc, [sp], #8
 8001206:	bf00      	nop

08001208 <__aeabi_fcmpge>:
 8001208:	f84d ed08 	str.w	lr, [sp, #-8]!
 800120c:	f7ff ffd2 	bl	80011b4 <__aeabi_cfrcmple>
 8001210:	bf94      	ite	ls
 8001212:	2001      	movls	r0, #1
 8001214:	2000      	movhi	r0, #0
 8001216:	f85d fb08 	ldr.w	pc, [sp], #8
 800121a:	bf00      	nop

0800121c <__aeabi_fcmpgt>:
 800121c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001220:	f7ff ffc8 	bl	80011b4 <__aeabi_cfrcmple>
 8001224:	bf34      	ite	cc
 8001226:	2001      	movcc	r0, #1
 8001228:	2000      	movcs	r0, #0
 800122a:	f85d fb08 	ldr.w	pc, [sp], #8
 800122e:	bf00      	nop

08001230 <main>:

/*
 * ------------------------------------------------------------------------------------------
 */

int main() {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
    I2C1_GPIOInits();
 8001234:	f000 faea 	bl	800180c <I2C1_GPIOInits>
    I2C1_Inits();
 8001238:	f000 facc 	bl	80017d4 <I2C1_Inits>
    BMP280_Init(&I2C1Handle);
 800123c:	4808      	ldr	r0, [pc, #32]	@ (8001260 <main+0x30>)
 800123e:	f000 ffcd 	bl	80021dc <BMP280_Init>
    USART2_GPIOInit();
 8001242:	f000 fb27 	bl	8001894 <USART2_GPIOInit>
    USART2_Init();
 8001246:	f000 fb03 	bl	8001850 <USART2_Init>
    USART_PeripheralControl(USART2,ENABLE);
 800124a:	2101      	movs	r1, #1
 800124c:	4805      	ldr	r0, [pc, #20]	@ (8001264 <main+0x34>)
 800124e:	f000 ff04 	bl	800205a <USART_PeripheralControl>
    TIM2_Init();
 8001252:	f000 fa6f 	bl	8001734 <TIM2_Init>
    TIM5_Init();
 8001256:	f000 fa97 	bl	8001788 <TIM5_Init>

    while(1);
 800125a:	bf00      	nop
 800125c:	e7fd      	b.n	800125a <main+0x2a>
 800125e:	bf00      	nop
 8001260:	20000210 	.word	0x20000210
 8001264:	40004400 	.word	0x40004400

08001268 <BMP280_ReadPressure>:
/*
 * ------------------------------------------------------------------------------------------
 */

// Read pressure from BMP280 sensor
void BMP280_ReadPressure(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
    uint32_t adc_P = BMP280_ReadPressureRaw(&I2C1Handle);
 800126e:	481c      	ldr	r0, [pc, #112]	@ (80012e0 <BMP280_ReadPressure+0x78>)
 8001270:	f000 ffe2 	bl	8002238 <BMP280_ReadPressureRaw>
 8001274:	60f8      	str	r0, [r7, #12]
    uint32_t adc_T = BMP280_ReadTemperatureRaw(&I2C1Handle);
 8001276:	481a      	ldr	r0, [pc, #104]	@ (80012e0 <BMP280_ReadPressure+0x78>)
 8001278:	f001 f80e 	bl	8002298 <BMP280_ReadTemperatureRaw>
 800127c:	60b8      	str	r0, [r7, #8]
    bmp280_compensate_T_double(adc_T);
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	4618      	mov	r0, r3
 8001282:	f001 f839 	bl	80022f8 <bmp280_compensate_T_double>
    float Pressure = (float)bmp280_compensate_P_double(adc_P)/100;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4618      	mov	r0, r3
 800128a:	f001 f8fd 	bl	8002488 <bmp280_compensate_P_double>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fca7 	bl	8000be8 <__aeabi_d2f>
 800129a:	4603      	mov	r3, r0
 800129c:	4911      	ldr	r1, [pc, #68]	@ (80012e4 <BMP280_ReadPressure+0x7c>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff feb4 	bl	800100c <__aeabi_fdiv>
 80012a4:	4603      	mov	r3, r0
 80012a6:	607b      	str	r3, [r7, #4]

    press_buffer[press_index] = Pressure;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <BMP280_ReadPressure+0x80>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	4a0f      	ldr	r2, [pc, #60]	@ (80012ec <BMP280_ReadPressure+0x84>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    press_index = (press_index + 1) % WINDOW_SIZE;
 80012b6:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <BMP280_ReadPressure+0x80>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <BMP280_ReadPressure+0x88>)
 80012be:	fb83 1302 	smull	r1, r3, r3, r2
 80012c2:	1059      	asrs	r1, r3, #1
 80012c4:	17d3      	asrs	r3, r2, #31
 80012c6:	1ac9      	subs	r1, r1, r3
 80012c8:	460b      	mov	r3, r1
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	1ad1      	subs	r1, r2, r3
 80012d0:	b2ca      	uxtb	r2, r1
 80012d2:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <BMP280_ReadPressure+0x80>)
 80012d4:	701a      	strb	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000210 	.word	0x20000210
 80012e4:	42c80000 	.word	0x42c80000
 80012e8:	2000049a 	.word	0x2000049a
 80012ec:	2000045c 	.word	0x2000045c
 80012f0:	66666667 	.word	0x66666667

080012f4 <GY302_ReadLightLevel>:

// Read light level from GY-302 sensor
void GY302_ReadLightLevel(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af02      	add	r7, sp, #8
    I2C_PeripheralControl(I2C1, ENABLE);
 80012fa:	2101      	movs	r1, #1
 80012fc:	4826      	ldr	r0, [pc, #152]	@ (8001398 <GY302_ReadLightLevel+0xa4>)
 80012fe:	f001 fd0e 	bl	8002d1e <I2C_PeripheralControl>
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 8001302:	2101      	movs	r1, #1
 8001304:	4824      	ldr	r0, [pc, #144]	@ (8001398 <GY302_ReadLightLevel+0xa4>)
 8001306:	f001 ff13 	bl	8003130 <I2C_ManageAcking>

    uint8_t light_data[2];
    uint8_t cmd = 0x10; // Continuous high-resolution mode
 800130a:	2310      	movs	r3, #16
 800130c:	70fb      	strb	r3, [r7, #3]

    I2C_MasterSendData(&I2C1Handle, &cmd, 1, GY302_ADDR, I2C_DISABLE_SR);
 800130e:	1cf9      	adds	r1, r7, #3
 8001310:	2300      	movs	r3, #0
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2323      	movs	r3, #35	@ 0x23
 8001316:	2201      	movs	r2, #1
 8001318:	4820      	ldr	r0, [pc, #128]	@ (800139c <GY302_ReadLightLevel+0xa8>)
 800131a:	f001 fe14 	bl	8002f46 <I2C_MasterSendData>
    I2C_MasterReceiveData(&I2C1Handle, light_data, 2, GY302_ADDR, I2C_DISABLE_SR);
 800131e:	1d39      	adds	r1, r7, #4
 8001320:	2300      	movs	r3, #0
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2323      	movs	r3, #35	@ 0x23
 8001326:	2202      	movs	r2, #2
 8001328:	481c      	ldr	r0, [pc, #112]	@ (800139c <GY302_ReadLightLevel+0xa8>)
 800132a:	f001 fe6f 	bl	800300c <I2C_MasterReceiveData>

    uint16_t raw_light = (light_data[0] << 8) | light_data[1];
 800132e:	793b      	ldrb	r3, [r7, #4]
 8001330:	b21b      	sxth	r3, r3
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	797b      	ldrb	r3, [r7, #5]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	81fb      	strh	r3, [r7, #14]
    float lux = raw_light / 1.2; // Convert raw data to lux
 8001340:	89fb      	ldrh	r3, [r7, #14]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f8ee 	bl	8000524 <__aeabi_i2d>
 8001348:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <GY302_ReadLightLevel+0xac>)
 800134e:	f7ff fa7d 	bl	800084c <__aeabi_ddiv>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fc45 	bl	8000be8 <__aeabi_d2f>
 800135e:	4603      	mov	r3, r0
 8001360:	60bb      	str	r3, [r7, #8]

    light_buffer[light_index] = lux;
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <GY302_ReadLightLevel+0xb0>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	4619      	mov	r1, r3
 8001368:	4a0f      	ldr	r2, [pc, #60]	@ (80013a8 <GY302_ReadLightLevel+0xb4>)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    light_index = (light_index + 1) % WINDOW_SIZE;
 8001370:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <GY302_ReadLightLevel+0xb0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <GY302_ReadLightLevel+0xb8>)
 8001378:	fb83 1302 	smull	r1, r3, r3, r2
 800137c:	1059      	asrs	r1, r3, #1
 800137e:	17d3      	asrs	r3, r2, #31
 8001380:	1ac9      	subs	r1, r1, r3
 8001382:	460b      	mov	r3, r1
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	1ad1      	subs	r1, r2, r3
 800138a:	b2ca      	uxtb	r2, r1
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <GY302_ReadLightLevel+0xb0>)
 800138e:	701a      	strb	r2, [r3, #0]
}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40005400 	.word	0x40005400
 800139c:	20000210 	.word	0x20000210
 80013a0:	3ff33333 	.word	0x3ff33333
 80013a4:	20000499 	.word	0x20000499
 80013a8:	20000484 	.word	0x20000484
 80013ac:	66666667 	.word	0x66666667

080013b0 <LM75A_ReadTemp>:

// Read temperature from LM75A sensor
void LM75A_ReadTemp(void) {
 80013b0:	b5b0      	push	{r4, r5, r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af02      	add	r7, sp, #8
    uint8_t temp_data[2];
    uint8_t reg_addr = TEMP_REG;
 80013b6:	2300      	movs	r3, #0
 80013b8:	71fb      	strb	r3, [r7, #7]
    uint16_t temperature;

    I2C_PeripheralControl(I2C1, ENABLE);
 80013ba:	2101      	movs	r1, #1
 80013bc:	483a      	ldr	r0, [pc, #232]	@ (80014a8 <LM75A_ReadTemp+0xf8>)
 80013be:	f001 fcae 	bl	8002d1e <I2C_PeripheralControl>
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80013c2:	2101      	movs	r1, #1
 80013c4:	4838      	ldr	r0, [pc, #224]	@ (80014a8 <LM75A_ReadTemp+0xf8>)
 80013c6:	f001 feb3 	bl	8003130 <I2C_ManageAcking>

    I2C_MasterSendData(&I2C1Handle, &reg_addr, 1, LM75A_ADDR, I2C_ENABLE_SR);
 80013ca:	1df9      	adds	r1, r7, #7
 80013cc:	2301      	movs	r3, #1
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2348      	movs	r3, #72	@ 0x48
 80013d2:	2201      	movs	r2, #1
 80013d4:	4835      	ldr	r0, [pc, #212]	@ (80014ac <LM75A_ReadTemp+0xfc>)
 80013d6:	f001 fdb6 	bl	8002f46 <I2C_MasterSendData>
    I2C_MasterReceiveData(&I2C1Handle, temp_data, 2, LM75A_ADDR, I2C_DISABLE_SR);
 80013da:	f107 0108 	add.w	r1, r7, #8
 80013de:	2300      	movs	r3, #0
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2348      	movs	r3, #72	@ 0x48
 80013e4:	2202      	movs	r2, #2
 80013e6:	4831      	ldr	r0, [pc, #196]	@ (80014ac <LM75A_ReadTemp+0xfc>)
 80013e8:	f001 fe10 	bl	800300c <I2C_MasterReceiveData>

    int16_t temp = (temp_data[0] << 8) | temp_data[1];
 80013ec:	7a3b      	ldrb	r3, [r7, #8]
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	7a7b      	ldrb	r3, [r7, #9]
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	81bb      	strh	r3, [r7, #12]
    temp >>= 5;
 80013fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001400:	115b      	asrs	r3, r3, #5
 8001402:	81bb      	strh	r3, [r7, #12]

     // Check the MSB (Most Significant Bit) to determine if the temperature is positive or negative
     if (temp & (1 << 10)) {  // If MSB bit D10 is 1, temperature is negative
 8001404:	89bb      	ldrh	r3, [r7, #12]
 8001406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800140a:	2b00      	cmp	r3, #0
 800140c:	d01a      	beq.n	8001444 <LM75A_ReadTemp+0x94>

    	 temp = ~temp + 1;  // Convert to 2's complement (negative value)
 800140e:	89bb      	ldrh	r3, [r7, #12]
 8001410:	425b      	negs	r3, r3
 8001412:	b29b      	uxth	r3, r3
 8001414:	81bb      	strh	r3, [r7, #12]
    	 temperature = -(temp * 0.125);  // Convert the value to temperature in Celsius
 8001416:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f882 	bl	8000524 <__aeabi_i2d>
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8001428:	f7ff f8e6 	bl	80005f8 <__aeabi_dmul>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4614      	mov	r4, r2
 8001432:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f7ff fbb5 	bl	8000ba8 <__aeabi_d2uiz>
 800143e:	4603      	mov	r3, r0
 8001440:	81fb      	strh	r3, [r7, #14]
 8001442:	e012      	b.n	800146a <LM75A_ReadTemp+0xba>

     }else // If MSB bit D10 is 0, temperature is positive
     {
    	 temperature = temp * 0.125;  // Convert the value to temperature in Celsius
 8001444:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f86b 	bl	8000524 <__aeabi_i2d>
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8001456:	f7ff f8cf 	bl	80005f8 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff fba1 	bl	8000ba8 <__aeabi_d2uiz>
 8001466:	4603      	mov	r3, r0
 8001468:	81fb      	strh	r3, [r7, #14]
     }

    temp_buffer[temp_index] = temperature;
 800146a:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <LM75A_ReadTemp+0x100>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461c      	mov	r4, r3
 8001470:	89fb      	ldrh	r3, [r7, #14]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fcbe 	bl	8000df4 <__aeabi_ui2f>
 8001478:	4603      	mov	r3, r0
 800147a:	4a0e      	ldr	r2, [pc, #56]	@ (80014b4 <LM75A_ReadTemp+0x104>)
 800147c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    temp_index = (temp_index + 1) % WINDOW_SIZE;
 8001480:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <LM75A_ReadTemp+0x100>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <LM75A_ReadTemp+0x108>)
 8001488:	fb83 1302 	smull	r1, r3, r3, r2
 800148c:	1059      	asrs	r1, r3, #1
 800148e:	17d3      	asrs	r3, r2, #31
 8001490:	1ac9      	subs	r1, r1, r3
 8001492:	460b      	mov	r3, r1
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	1ad1      	subs	r1, r2, r3
 800149a:	b2ca      	uxtb	r2, r1
 800149c:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <LM75A_ReadTemp+0x100>)
 800149e:	701a      	strb	r2, [r3, #0]
}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bdb0      	pop	{r4, r5, r7, pc}
 80014a8:	40005400 	.word	0x40005400
 80014ac:	20000210 	.word	0x20000210
 80014b0:	20000498 	.word	0x20000498
 80014b4:	20000470 	.word	0x20000470
 80014b8:	66666667 	.word	0x66666667

080014bc <TIM2_IRQHandler>:

// Timer 2 interrupt handler (Sampling 1s)
void TIM2_IRQHandler() {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
    if (TIM2->SR & 0x01) {
 80014c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d061      	beq.n	8001594 <TIM2_IRQHandler+0xd8>
        LM75A_ReadTemp();
 80014d0:	f7ff ff6e 	bl	80013b0 <LM75A_ReadTemp>
        GY302_ReadLightLevel();
 80014d4:	f7ff ff0e 	bl	80012f4 <GY302_ReadLightLevel>
        BMP280_ReadPressure();
 80014d8:	f7ff fec6 	bl	8001268 <BMP280_ReadPressure>

        // Apply median filter to sensor data
        float filtered_temp = calculate_median(temp_buffer, WINDOW_SIZE);
 80014dc:	2105      	movs	r1, #5
 80014de:	482f      	ldr	r0, [pc, #188]	@ (800159c <TIM2_IRQHandler+0xe0>)
 80014e0:	f000 fb0b 	bl	8001afa <calculate_median>
 80014e4:	60f8      	str	r0, [r7, #12]
        float filtered_lux = calculate_median(light_buffer, WINDOW_SIZE);
 80014e6:	2105      	movs	r1, #5
 80014e8:	482d      	ldr	r0, [pc, #180]	@ (80015a0 <TIM2_IRQHandler+0xe4>)
 80014ea:	f000 fb06 	bl	8001afa <calculate_median>
 80014ee:	60b8      	str	r0, [r7, #8]
        float filtered_pascal = calculate_median(press_buffer, WINDOW_SIZE);
 80014f0:	2105      	movs	r1, #5
 80014f2:	482c      	ldr	r0, [pc, #176]	@ (80015a4 <TIM2_IRQHandler+0xe8>)
 80014f4:	f000 fb01 	bl	8001afa <calculate_median>
 80014f8:	6078      	str	r0, [r7, #4]


        // Store filtered data in new buffers
        filtered_temp_buffer[f_temp_index] = filtered_temp;
 80014fa:	4b2b      	ldr	r3, [pc, #172]	@ (80015a8 <TIM2_IRQHandler+0xec>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4619      	mov	r1, r3
 8001500:	4a2a      	ldr	r2, [pc, #168]	@ (80015ac <TIM2_IRQHandler+0xf0>)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        filtered_light_buffer[f_light_index] = filtered_lux;
 8001508:	4b29      	ldr	r3, [pc, #164]	@ (80015b0 <TIM2_IRQHandler+0xf4>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	4a29      	ldr	r2, [pc, #164]	@ (80015b4 <TIM2_IRQHandler+0xf8>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        filtered_press_buffer[f_press_index] = filtered_pascal;
 8001516:	4b28      	ldr	r3, [pc, #160]	@ (80015b8 <TIM2_IRQHandler+0xfc>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4619      	mov	r1, r3
 800151c:	4a27      	ldr	r2, [pc, #156]	@ (80015bc <TIM2_IRQHandler+0x100>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

        // Update circular buffer indexes
        f_temp_index = (f_temp_index + 1) % WINDOW_SIZE;
 8001524:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <TIM2_IRQHandler+0xec>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	4b25      	ldr	r3, [pc, #148]	@ (80015c0 <TIM2_IRQHandler+0x104>)
 800152c:	fb83 1302 	smull	r1, r3, r3, r2
 8001530:	1059      	asrs	r1, r3, #1
 8001532:	17d3      	asrs	r3, r2, #31
 8001534:	1ac9      	subs	r1, r1, r3
 8001536:	460b      	mov	r3, r1
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	1ad1      	subs	r1, r2, r3
 800153e:	b2ca      	uxtb	r2, r1
 8001540:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <TIM2_IRQHandler+0xec>)
 8001542:	701a      	strb	r2, [r3, #0]
        f_light_index = (f_light_index + 1) % WINDOW_SIZE;
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <TIM2_IRQHandler+0xf4>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	4b1d      	ldr	r3, [pc, #116]	@ (80015c0 <TIM2_IRQHandler+0x104>)
 800154c:	fb83 1302 	smull	r1, r3, r3, r2
 8001550:	1059      	asrs	r1, r3, #1
 8001552:	17d3      	asrs	r3, r2, #31
 8001554:	1ac9      	subs	r1, r1, r3
 8001556:	460b      	mov	r3, r1
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	1ad1      	subs	r1, r2, r3
 800155e:	b2ca      	uxtb	r2, r1
 8001560:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <TIM2_IRQHandler+0xf4>)
 8001562:	701a      	strb	r2, [r3, #0]
        f_press_index = (f_press_index + 1) % WINDOW_SIZE;
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <TIM2_IRQHandler+0xfc>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <TIM2_IRQHandler+0x104>)
 800156c:	fb83 1302 	smull	r1, r3, r3, r2
 8001570:	1059      	asrs	r1, r3, #1
 8001572:	17d3      	asrs	r3, r2, #31
 8001574:	1ac9      	subs	r1, r1, r3
 8001576:	460b      	mov	r3, r1
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	1ad1      	subs	r1, r2, r3
 800157e:	b2ca      	uxtb	r2, r1
 8001580:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <TIM2_IRQHandler+0xfc>)
 8001582:	701a      	strb	r2, [r3, #0]

        TIM2->SR &= ~(1 << 0); // Clear interrupt flag
 8001584:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	6113      	str	r3, [r2, #16]
    }
}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000470 	.word	0x20000470
 80015a0:	20000484 	.word	0x20000484
 80015a4:	2000045c 	.word	0x2000045c
 80015a8:	200004d8 	.word	0x200004d8
 80015ac:	200004b0 	.word	0x200004b0
 80015b0:	200004d9 	.word	0x200004d9
 80015b4:	200004c4 	.word	0x200004c4
 80015b8:	200004da 	.word	0x200004da
 80015bc:	2000049c 	.word	0x2000049c
 80015c0:	66666667 	.word	0x66666667

080015c4 <TIM5_IRQHandler>:

void TIM5_IRQHandler() {
 80015c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015c8:	b0b4      	sub	sp, #208	@ 0xd0
 80015ca:	af18      	add	r7, sp, #96	@ 0x60
    if (TIM5->SR & 0x01) {  // If update interrupt occurs
 80015cc:	4b52      	ldr	r3, [pc, #328]	@ (8001718 <TIM5_IRQHandler+0x154>)
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 809a 	beq.w	800170e <TIM5_IRQHandler+0x14a>
    	float ble_package_temp[4], ble_package_light[4], ble_package_press[4];
    	calculate_statistics(filtered_temp_buffer, WINDOW_SIZE, ble_package_temp);
 80015da:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80015de:	461a      	mov	r2, r3
 80015e0:	2105      	movs	r1, #5
 80015e2:	484e      	ldr	r0, [pc, #312]	@ (800171c <TIM5_IRQHandler+0x158>)
 80015e4:	f000 fbda 	bl	8001d9c <calculate_statistics>
    	calculate_statistics(filtered_light_buffer, WINDOW_SIZE, ble_package_light);
 80015e8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80015ec:	461a      	mov	r2, r3
 80015ee:	2105      	movs	r1, #5
 80015f0:	484b      	ldr	r0, [pc, #300]	@ (8001720 <TIM5_IRQHandler+0x15c>)
 80015f2:	f000 fbd3 	bl	8001d9c <calculate_statistics>
    	calculate_statistics(filtered_press_buffer, WINDOW_SIZE, ble_package_press);
 80015f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015fa:	461a      	mov	r2, r3
 80015fc:	2105      	movs	r1, #5
 80015fe:	4849      	ldr	r0, [pc, #292]	@ (8001724 <TIM5_IRQHandler+0x160>)
 8001600:	f000 fbcc 	bl	8001d9c <calculate_statistics>
    	             "    \"min\": %.2f,\n"
    	             "    \"max\": %.2f,\n"
    	             "    \"std_dev\": %.2f\n"
    	             "  }\n"
    	             "}",
    	             ble_package_temp[0], ble_package_temp[1], ble_package_temp[2], ble_package_temp[3],
 8001604:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
    	snprintf(json_data, MAX_JSON_SIZE,
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff9e 	bl	8000548 <__aeabi_f2d>
 800160c:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
    	             ble_package_temp[0], ble_package_temp[1], ble_package_temp[2], ble_package_temp[3],
 8001610:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
    	snprintf(json_data, MAX_JSON_SIZE,
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff98 	bl	8000548 <__aeabi_f2d>
 8001618:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
    	             ble_package_temp[0], ble_package_temp[1], ble_package_temp[2], ble_package_temp[3],
 800161c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    	snprintf(json_data, MAX_JSON_SIZE,
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff92 	bl	8000548 <__aeabi_f2d>
 8001624:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
    	             ble_package_temp[0], ble_package_temp[1], ble_package_temp[2], ble_package_temp[3],
 8001628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    	snprintf(json_data, MAX_JSON_SIZE,
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff8c 	bl	8000548 <__aeabi_f2d>
 8001630:	e9c7 0108 	strd	r0, r1, [r7, #32]
					 ble_package_light[0], ble_package_light[1], ble_package_light[2], ble_package_light[3],
 8001634:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    	snprintf(json_data, MAX_JSON_SIZE,
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff86 	bl	8000548 <__aeabi_f2d>
 800163c:	e9c7 0106 	strd	r0, r1, [r7, #24]
					 ble_package_light[0], ble_package_light[1], ble_package_light[2], ble_package_light[3],
 8001640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
    	snprintf(json_data, MAX_JSON_SIZE,
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff80 	bl	8000548 <__aeabi_f2d>
 8001648:	e9c7 0104 	strd	r0, r1, [r7, #16]
					 ble_package_light[0], ble_package_light[1], ble_package_light[2], ble_package_light[3],
 800164c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
    	snprintf(json_data, MAX_JSON_SIZE,
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff7a 	bl	8000548 <__aeabi_f2d>
 8001654:	e9c7 0102 	strd	r0, r1, [r7, #8]
					 ble_package_light[0], ble_package_light[1], ble_package_light[2], ble_package_light[3],
 8001658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    	snprintf(json_data, MAX_JSON_SIZE,
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff74 	bl	8000548 <__aeabi_f2d>
 8001660:	e9c7 0100 	strd	r0, r1, [r7]
					 ble_package_press[0], ble_package_press[1], ble_package_press[2], ble_package_press[3]);
 8001664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    	snprintf(json_data, MAX_JSON_SIZE,
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff6e 	bl	8000548 <__aeabi_f2d>
 800166c:	4682      	mov	sl, r0
 800166e:	468b      	mov	fp, r1
					 ble_package_press[0], ble_package_press[1], ble_package_press[2], ble_package_press[3]);
 8001670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    	snprintf(json_data, MAX_JSON_SIZE,
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff68 	bl	8000548 <__aeabi_f2d>
 8001678:	4680      	mov	r8, r0
 800167a:	4689      	mov	r9, r1
					 ble_package_press[0], ble_package_press[1], ble_package_press[2], ble_package_press[3]);
 800167c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    	snprintf(json_data, MAX_JSON_SIZE,
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff62 	bl	8000548 <__aeabi_f2d>
 8001684:	4604      	mov	r4, r0
 8001686:	460d      	mov	r5, r1
					 ble_package_press[0], ble_package_press[1], ble_package_press[2], ble_package_press[3]);
 8001688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    	snprintf(json_data, MAX_JSON_SIZE,
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ff5c 	bl	8000548 <__aeabi_f2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8001698:	e9cd 4514 	strd	r4, r5, [sp, #80]	@ 0x50
 800169c:	e9cd 8912 	strd	r8, r9, [sp, #72]	@ 0x48
 80016a0:	e9cd ab10 	strd	sl, fp, [sp, #64]	@ 0x40
 80016a4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80016a8:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
 80016ac:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80016b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30
 80016b4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80016b8:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
 80016bc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80016c0:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80016c4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80016c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80016cc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80016d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80016d4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80016d8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80016dc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80016e0:	e9cd 3400 	strd	r3, r4, [sp]
 80016e4:	4a10      	ldr	r2, [pc, #64]	@ (8001728 <TIM5_IRQHandler+0x164>)
 80016e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016ea:	4810      	ldr	r0, [pc, #64]	@ (800172c <TIM5_IRQHandler+0x168>)
 80016ec:	f002 fb04 	bl	8003cf8 <sniprintf>

        // Send the data to ESP32 via USART
        USART_SendData(&usart2_handle, (uint8_t *)json_data, strlen(json_data));
 80016f0:	480e      	ldr	r0, [pc, #56]	@ (800172c <TIM5_IRQHandler+0x168>)
 80016f2:	f7fe fdbd 	bl	8000270 <strlen>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	490c      	ldr	r1, [pc, #48]	@ (800172c <TIM5_IRQHandler+0x168>)
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <TIM5_IRQHandler+0x16c>)
 80016fe:	f000 fd1f 	bl	8002140 <USART_SendData>

        // Clear interrupt flag
        TIM5->SR &= ~(1 << 0); // Clear interrupt flag
 8001702:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <TIM5_IRQHandler+0x154>)
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	4a04      	ldr	r2, [pc, #16]	@ (8001718 <TIM5_IRQHandler+0x154>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6113      	str	r3, [r2, #16]
    }
}
 800170e:	bf00      	nop
 8001710:	3770      	adds	r7, #112	@ 0x70
 8001712:	46bd      	mov	sp, r7
 8001714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001718:	40000c00 	.word	0x40000c00
 800171c:	200004b0 	.word	0x200004b0
 8001720:	200004c4 	.word	0x200004c4
 8001724:	2000049c 	.word	0x2000049c
 8001728:	08006df0 	.word	0x08006df0
 800172c:	2000025c 	.word	0x2000025c
 8001730:	20000238 	.word	0x20000238

08001734 <TIM2_Init>:


void TIM2_Init() {
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0

    TIM2_PCLK_EN();
 8001738:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <TIM2_Init+0x50>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173c:	4a11      	ldr	r2, [pc, #68]	@ (8001784 <TIM2_Init+0x50>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set prescaler and auto-reload value to generate 1-second interval (Sampling Period)
    TIM2->PSC = 16000 - 1; // Prescaler
 8001744:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001748:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800174c:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1000 - 1; // Auto-reload value
 800174e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001752:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001756:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->DIER |= (1 << 0); // Enable update interrupt
 8001758:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	60d3      	str	r3, [r2, #12]
    TIM2->CR1 |= (1 << 0); // Enable timer
 8001768:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6013      	str	r3, [r2, #0]
    TIM2_IRQInterrupt_Config(ENABLE);	 // Enable TIM2 interrupt in NVIC
 8001778:	2001      	movs	r0, #1
 800177a:	f000 fb3f 	bl	8001dfc <TIM2_IRQInterrupt_Config>
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800

08001788 <TIM5_Init>:

void TIM5_Init() {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

	TIM5_PCLK_EN();
 800178c:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <TIM5_Init+0x44>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001790:	4a0e      	ldr	r2, [pc, #56]	@ (80017cc <TIM5_Init+0x44>)
 8001792:	f043 0308 	orr.w	r3, r3, #8
 8001796:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set prescaler and auto-reload value to generate 30-second interval (BLE Package Period)
    TIM5->PSC = 16000 - 1;
 8001798:	4b0d      	ldr	r3, [pc, #52]	@ (80017d0 <TIM5_Init+0x48>)
 800179a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800179e:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM5->ARR = 30000 - 1;
 80017a0:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <TIM5_Init+0x48>)
 80017a2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80017a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM5->DIER |= (1 << 0);
 80017a8:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <TIM5_Init+0x48>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4a08      	ldr	r2, [pc, #32]	@ (80017d0 <TIM5_Init+0x48>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	60d3      	str	r3, [r2, #12]
    TIM5->CR1 |= (1 << 0);
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <TIM5_Init+0x48>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a05      	ldr	r2, [pc, #20]	@ (80017d0 <TIM5_Init+0x48>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6013      	str	r3, [r2, #0]
    TIM5_IRQInterrupt_Config(ENABLE);	// Enable TIM5 interrupt in NVIC
 80017c0:	2001      	movs	r0, #1
 80017c2:	f000 fb39 	bl	8001e38 <TIM5_IRQInterrupt_Config>
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40000c00 	.word	0x40000c00

080017d4 <I2C1_Inits>:

// Initialize I2C1 peripheral
void I2C1_Inits(void) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
    I2C1Handle.pI2Cx = I2C1;
 80017d8:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <I2C1_Inits+0x2c>)
 80017da:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <I2C1_Inits+0x30>)
 80017dc:	601a      	str	r2, [r3, #0]
    I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80017de:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <I2C1_Inits+0x2c>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	725a      	strb	r2, [r3, #9]
    I2C1Handle.I2C_Config.I2C_DeviceAddress = 0x61;
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <I2C1_Inits+0x2c>)
 80017e6:	2261      	movs	r2, #97	@ 0x61
 80017e8:	721a      	strb	r2, [r3, #8]
    I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80017ea:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <I2C1_Inits+0x2c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	729a      	strb	r2, [r3, #10]
    I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80017f0:	4b03      	ldr	r3, [pc, #12]	@ (8001800 <I2C1_Inits+0x2c>)
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <I2C1_Inits+0x34>)
 80017f4:	605a      	str	r2, [r3, #4]
    I2C_Init(&I2C1Handle);
 80017f6:	4802      	ldr	r0, [pc, #8]	@ (8001800 <I2C1_Inits+0x2c>)
 80017f8:	f001 fae2 	bl	8002dc0 <I2C_Init>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000210 	.word	0x20000210
 8001804:	40005400 	.word	0x40005400
 8001808:	000186a0 	.word	0x000186a0

0800180c <I2C1_GPIOInits>:

// Initialize I2C1 GPIO pins
void I2C1_GPIOInits(void) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
    GPIO_Handle_t I2CPins;

    I2CPins.pGPIOx = GPIOB;
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <I2C1_GPIOInits+0x40>)
 8001814:	607b      	str	r3, [r7, #4]
    I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001816:	2302      	movs	r3, #2
 8001818:	727b      	strb	r3, [r7, #9]
    I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800181a:	2301      	movs	r3, #1
 800181c:	733b      	strb	r3, [r7, #12]
    I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800181e:	2301      	movs	r3, #1
 8001820:	72fb      	strb	r3, [r7, #11]
    I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8001822:	2304      	movs	r3, #4
 8001824:	737b      	strb	r3, [r7, #13]
    I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001826:	2302      	movs	r3, #2
 8001828:	72bb      	strb	r3, [r7, #10]

    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6; // SCL
 800182a:	2306      	movs	r3, #6
 800182c:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2CPins);
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	4618      	mov	r0, r3
 8001832:	f001 f859 	bl	80028e8 <GPIO_Init>

    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9; // SDA
 8001836:	2309      	movs	r3, #9
 8001838:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2CPins);
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	4618      	mov	r0, r3
 800183e:	f001 f853 	bl	80028e8 <GPIO_Init>
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40020400 	.word	0x40020400

08001850 <USART2_Init>:

void USART2_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8001854:	4b0d      	ldr	r3, [pc, #52]	@ (800188c <USART2_Init+0x3c>)
 8001856:	4a0e      	ldr	r2, [pc, #56]	@ (8001890 <USART2_Init+0x40>)
 8001858:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 800185a:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <USART2_Init+0x3c>)
 800185c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001860:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8001862:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <USART2_Init+0x3c>)
 8001864:	2200      	movs	r2, #0
 8001866:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <USART2_Init+0x3c>)
 800186a:	2200      	movs	r2, #0
 800186c:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 800186e:	4b07      	ldr	r3, [pc, #28]	@ (800188c <USART2_Init+0x3c>)
 8001870:	2200      	movs	r2, #0
 8001872:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8001874:	4b05      	ldr	r3, [pc, #20]	@ (800188c <USART2_Init+0x3c>)
 8001876:	2200      	movs	r2, #0
 8001878:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800187a:	4b04      	ldr	r3, [pc, #16]	@ (800188c <USART2_Init+0x3c>)
 800187c:	2200      	movs	r2, #0
 800187e:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <USART2_Init+0x3c>)
 8001882:	f000 fb69 	bl	8001f58 <USART_Init>
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000238 	.word	0x20000238
 8001890:	40004400 	.word	0x40004400

08001894 <USART2_GPIOInit>:

void USART2_GPIOInit(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 800189a:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <USART2_GPIOInit+0x40>)
 800189c:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800189e:	2302      	movs	r3, #2
 80018a0:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80018a2:	2300      	movs	r3, #0
 80018a4:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80018a6:	2301      	movs	r3, #1
 80018a8:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80018aa:	2302      	movs	r3, #2
 80018ac:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 80018ae:	2307      	movs	r3, #7
 80018b0:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 f815 	bl	80028e8 <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80018be:	2303      	movs	r3, #3
 80018c0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	4618      	mov	r0, r3
 80018c6:	f001 f80f 	bl	80028e8 <GPIO_Init>

}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40020000 	.word	0x40020000

080018d8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80018e2:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <ITM_SendChar+0x44>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a0d      	ldr	r2, [pc, #52]	@ (800191c <ITM_SendChar+0x44>)
 80018e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ec:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80018ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <ITM_SendChar+0x48>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001920 <ITM_SendChar+0x48>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80018fa:	bf00      	nop
 80018fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f8      	beq.n	80018fc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800190a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	6013      	str	r3, [r2, #0]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	e000edfc 	.word	0xe000edfc
 8001920:	e0000e00 	.word	0xe0000e00

08001924 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return 1;
 8001928:	2301      	movs	r3, #1
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <_kill>:

int _kill(int pid, int sig)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800193c:	f002 faa8 	bl	8003e90 <__errno>
 8001940:	4603      	mov	r3, r0
 8001942:	2216      	movs	r2, #22
 8001944:	601a      	str	r2, [r3, #0]
  return -1;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <_exit>:

void _exit (int status)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800195a:	f04f 31ff 	mov.w	r1, #4294967295
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffe7 	bl	8001932 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <_exit+0x12>

08001968 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e00a      	b.n	8001990 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800197a:	f3af 8000 	nop.w
 800197e:	4601      	mov	r1, r0
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	60ba      	str	r2, [r7, #8]
 8001986:	b2ca      	uxtb	r2, r1
 8001988:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	dbf0      	blt.n	800197a <_read+0x12>
  }

  return len;
 8001998:	687b      	ldr	r3, [r7, #4]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e009      	b.n	80019c8 <_write+0x26>
  {
    // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	60ba      	str	r2, [r7, #8]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff8b 	bl	80018d8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3301      	adds	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	dbf1      	blt.n	80019b4 <_write+0x12>
  }
  return len;
 80019d0:	687b      	ldr	r3, [r7, #4]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <_close>:

int _close(int file)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a00:	605a      	str	r2, [r3, #4]
  return 0;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <_isatty>:

int _isatty(int file)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
	...

08001a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a44:	4a14      	ldr	r2, [pc, #80]	@ (8001a98 <_sbrk+0x5c>)
 8001a46:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <_sbrk+0x60>)
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a50:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a58:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <_sbrk+0x64>)
 8001a5a:	4a12      	ldr	r2, [pc, #72]	@ (8001aa4 <_sbrk+0x68>)
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5e:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d207      	bcs.n	8001a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a6c:	f002 fa10 	bl	8003e90 <__errno>
 8001a70:	4603      	mov	r3, r0
 8001a72:	220c      	movs	r2, #12
 8001a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7a:	e009      	b.n	8001a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a7c:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a82:	4b07      	ldr	r3, [pc, #28]	@ (8001aa0 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <_sbrk+0x64>)
 8001a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20020000 	.word	0x20020000
 8001a9c:	00000400 	.word	0x00000400
 8001aa0:	200004dc 	.word	0x200004dc
 8001aa4:	20000630 	.word	0x20000630

08001aa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001aa8:	480d      	ldr	r0, [pc, #52]	@ (8001ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aaa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab0:	480c      	ldr	r0, [pc, #48]	@ (8001ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ab2:	490d      	ldr	r1, [pc, #52]	@ (8001ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8001aec <LoopForever+0xe>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab8:	e002      	b.n	8001ac0 <LoopCopyDataInit>

08001aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001abe:	3304      	adds	r3, #4

08001ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac4:	d3f9      	bcc.n	8001aba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8001af4 <LoopForever+0x16>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001acc:	e001      	b.n	8001ad2 <LoopFillZerobss>

08001ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad0:	3204      	adds	r2, #4

08001ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad4:	d3fb      	bcc.n	8001ace <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ad6:	f002 f9e1 	bl	8003e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ada:	f7ff fba9 	bl	8001230 <main>

08001ade <LoopForever>:

LoopForever:
  b LoopForever
 8001ade:	e7fe      	b.n	8001ade <LoopForever>
  ldr   r0, =_estack
 8001ae0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001aec:	080072d8 	.word	0x080072d8
  ldr r2, =_sbss
 8001af0:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001af4:	20000630 	.word	0x20000630

08001af8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC_IRQHandler>

08001afa <calculate_median>:
 * @brief  Calculates the median value of an array of floats
 * @param  arr: Array of float values
 * @param  size: Size of the array
 * @return The median value of the array
 */
float calculate_median(float arr[], uint8_t size) {
 8001afa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	70fb      	strb	r3, [r7, #3]
 8001b08:	466b      	mov	r3, sp
 8001b0a:	461e      	mov	r6, r3
    float sorted[size];
 8001b0c:	78f9      	ldrb	r1, [r7, #3]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	3b01      	subs	r3, #1
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	b2cb      	uxtb	r3, r1
 8001b16:	2200      	movs	r2, #0
 8001b18:	4698      	mov	r8, r3
 8001b1a:	4691      	mov	r9, r2
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001b28:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001b2c:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001b30:	b2cb      	uxtb	r3, r1
 8001b32:	2200      	movs	r2, #0
 8001b34:	461c      	mov	r4, r3
 8001b36:	4615      	mov	r5, r2
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	016b      	lsls	r3, r5, #5
 8001b42:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001b46:	0162      	lsls	r2, r4, #5
 8001b48:	460b      	mov	r3, r1
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	3307      	adds	r3, #7
 8001b4e:	08db      	lsrs	r3, r3, #3
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	ebad 0d03 	sub.w	sp, sp, r3
 8001b56:	466b      	mov	r3, sp
 8001b58:	3303      	adds	r3, #3
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	60fb      	str	r3, [r7, #12]
    memcpy(sorted, arr, sizeof(float) * size);
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	461a      	mov	r2, r3
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f002 f9be 	bl	8003eea <memcpy>

    // Bubble Sort (Sort array in ascending order)
    for (uint8_t i = 0; i < size - 1; i++) {
 8001b6e:	2300      	movs	r3, #0
 8001b70:	75fb      	strb	r3, [r7, #23]
 8001b72:	e032      	b.n	8001bda <calculate_median+0xe0>
        for (uint8_t j = 0; j < size - i - 1; j++) {
 8001b74:	2300      	movs	r3, #0
 8001b76:	75bb      	strb	r3, [r7, #22]
 8001b78:	e025      	b.n	8001bc6 <calculate_median+0xcc>
            if (sorted[j] > sorted[j + 1]) {
 8001b7a:	7dba      	ldrb	r2, [r7, #22]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001b82:	7dbb      	ldrb	r3, [r7, #22]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7ff fb45 	bl	800121c <__aeabi_fcmpgt>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <calculate_median+0xc6>
                float temp = sorted[j];
 8001b98:	7dba      	ldrb	r2, [r7, #22]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba0:	60bb      	str	r3, [r7, #8]
                sorted[j] = sorted[j + 1];
 8001ba2:	7dbb      	ldrb	r3, [r7, #22]
 8001ba4:	1c59      	adds	r1, r3, #1
 8001ba6:	7dba      	ldrb	r2, [r7, #22]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                sorted[j + 1] = temp;
 8001bb4:	7dbb      	ldrb	r3, [r7, #22]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	68b9      	ldr	r1, [r7, #8]
 8001bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint8_t j = 0; j < size - i - 1; j++) {
 8001bc0:	7dbb      	ldrb	r3, [r7, #22]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	75bb      	strb	r3, [r7, #22]
 8001bc6:	7dba      	ldrb	r2, [r7, #22]
 8001bc8:	78f9      	ldrb	r1, [r7, #3]
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	1acb      	subs	r3, r1, r3
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	dbd2      	blt.n	8001b7a <calculate_median+0x80>
    for (uint8_t i = 0; i < size - 1; i++) {
 8001bd4:	7dfb      	ldrb	r3, [r7, #23]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	75fb      	strb	r3, [r7, #23]
 8001bda:	7dfa      	ldrb	r2, [r7, #23]
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbc7      	blt.n	8001b74 <calculate_median+0x7a>
            }
        }
    }
    return sorted[size / 2];
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	085b      	lsrs	r3, r3, #1
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf2:	46b5      	mov	sp, r6
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	371c      	adds	r7, #28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001bfe <find_min>:
 * @brief  Finds the minimum value in an array of floats
 * @param  arr: Array of float values
 * @param  size: Size of the array
 * @return The minimum value in the array
 */
float find_min(float arr[], uint8_t size) {
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	460b      	mov	r3, r1
 8001c08:	70fb      	strb	r3, [r7, #3]
    float min_val = arr[0];
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 1; i < size; i++) {
 8001c10:	2301      	movs	r3, #1
 8001c12:	72fb      	strb	r3, [r7, #11]
 8001c14:	e014      	b.n	8001c40 <find_min+0x42>
        if (arr[i] < min_val) {
 8001c16:	7afb      	ldrb	r3, [r7, #11]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f7ff fafa 	bl	800121c <__aeabi_fcmpgt>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <find_min+0x3c>
            min_val = arr[i];
 8001c2e:	7afb      	ldrb	r3, [r7, #11]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 1; i < size; i++) {
 8001c3a:	7afb      	ldrb	r3, [r7, #11]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	72fb      	strb	r3, [r7, #11]
 8001c40:	7afa      	ldrb	r2, [r7, #11]
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d3e6      	bcc.n	8001c16 <find_min+0x18>
        }
    }
    return min_val;
 8001c48:	68fb      	ldr	r3, [r7, #12]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <find_max>:
 * @brief  Finds the maximum value in an array of floats
 * @param  arr: Array of float values
 * @param  size: Size of the array
 * @return The maximum value in the array
 */
float find_max(float arr[], uint8_t size) {
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	70fb      	strb	r3, [r7, #3]
    float max_val = arr[0];
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 1; i < size; i++) {
 8001c64:	2301      	movs	r3, #1
 8001c66:	72fb      	strb	r3, [r7, #11]
 8001c68:	e014      	b.n	8001c94 <find_max+0x42>
        if (arr[i] > max_val) {
 8001c6a:	7afb      	ldrb	r3, [r7, #11]
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f7ff fab2 	bl	80011e0 <__aeabi_fcmplt>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <find_max+0x3c>
            max_val = arr[i];
 8001c82:	7afb      	ldrb	r3, [r7, #11]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 1; i < size; i++) {
 8001c8e:	7afb      	ldrb	r3, [r7, #11]
 8001c90:	3301      	adds	r3, #1
 8001c92:	72fb      	strb	r3, [r7, #11]
 8001c94:	7afa      	ldrb	r2, [r7, #11]
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d3e6      	bcc.n	8001c6a <find_max+0x18>
        }
    }
    return max_val;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <calculate_sample_std>:
 * @param arr An array of float values representing the data sample.
 * @param size The number of elements in the array (the sample size).
 *
 * @return The standard deviation of the sample data.
 */
float calculate_sample_std(float arr[], uint8_t size) {
 8001ca6:	b5b0      	push	{r4, r5, r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	70fb      	strb	r3, [r7, #3]
    float sum = 0, mean, std_dev = 0;
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]

    // Calculate mean
    for (uint8_t i = 0; i < size; i++) {
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73fb      	strb	r3, [r7, #15]
 8001cc2:	e00d      	b.n	8001ce0 <calculate_sample_std+0x3a>
        sum += arr[i];
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	6978      	ldr	r0, [r7, #20]
 8001cd2:	f7fe ffdf 	bl	8000c94 <__addsf3>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	617b      	str	r3, [r7, #20]
    for (uint8_t i = 0; i < size; i++) {
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d3ed      	bcc.n	8001cc4 <calculate_sample_std+0x1e>
    }
    mean = sum / size;
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff f886 	bl	8000dfc <__aeabi_i2f>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6978      	ldr	r0, [r7, #20]
 8001cf6:	f7ff f989 	bl	800100c <__aeabi_fdiv>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	60bb      	str	r3, [r7, #8]

    // Calculate sample standard deviation (n-1 denominator)
    for (uint8_t i = 0; i < size; i++) {
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73bb      	strb	r3, [r7, #14]
 8001d02:	e028      	b.n	8001d56 <calculate_sample_std+0xb0>
        std_dev += pow(arr[i] - mean, 2);
 8001d04:	7bbb      	ldrb	r3, [r7, #14]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68b9      	ldr	r1, [r7, #8]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe ffbd 	bl	8000c90 <__aeabi_fsub>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fc15 	bl	8000548 <__aeabi_f2d>
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d26:	f004 f925 	bl	8005f74 <pow>
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	460d      	mov	r5, r1
 8001d2e:	6938      	ldr	r0, [r7, #16]
 8001d30:	f7fe fc0a 	bl	8000548 <__aeabi_f2d>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4620      	mov	r0, r4
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	f7fe faa6 	bl	800028c <__adddf3>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	f7fe ff4e 	bl	8000be8 <__aeabi_d2f>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < size; i++) {
 8001d50:	7bbb      	ldrb	r3, [r7, #14]
 8001d52:	3301      	adds	r3, #1
 8001d54:	73bb      	strb	r3, [r7, #14]
 8001d56:	7bba      	ldrb	r2, [r7, #14]
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d3d2      	bcc.n	8001d04 <calculate_sample_std+0x5e>
    }
    return sqrt(std_dev / (size - 1));  // Bessel correction (n-1)
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff f84a 	bl	8000dfc <__aeabi_i2f>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6938      	ldr	r0, [r7, #16]
 8001d6e:	f7ff f94d 	bl	800100c <__aeabi_fdiv>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fbe7 	bl	8000548 <__aeabi_f2d>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	f004 f95f 	bl	8006044 <sqrt>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f7fe ff2b 	bl	8000be8 <__aeabi_d2f>
 8001d92:	4603      	mov	r3, r0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bdb0      	pop	{r4, r5, r7, pc}

08001d9c <calculate_statistics>:
 *   arr_calculated[0] -> Minimum value
 *   arr_calculated[1] -> Maximum value
 *   arr_calculated[2] -> Median value
 *   arr_calculated[3] -> Sample standard deviation
 */
void calculate_statistics(float arr[], uint8_t size, float arr_calculated[4]) {
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	460b      	mov	r3, r1
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	72fb      	strb	r3, [r7, #11]
    arr_calculated[0] = find_min(arr, size);
 8001daa:	7afb      	ldrb	r3, [r7, #11]
 8001dac:	4619      	mov	r1, r3
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f7ff ff25 	bl	8001bfe <find_min>
 8001db4:	4602      	mov	r2, r0
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	601a      	str	r2, [r3, #0]
    arr_calculated[1] = find_max(arr, size);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	1d1c      	adds	r4, r3, #4
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f7ff ff45 	bl	8001c52 <find_max>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	6023      	str	r3, [r4, #0]
    arr_calculated[2] = calculate_median(arr, size);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f103 0408 	add.w	r4, r3, #8
 8001dd2:	7afb      	ldrb	r3, [r7, #11]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f7ff fe8f 	bl	8001afa <calculate_median>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	6023      	str	r3, [r4, #0]
    arr_calculated[3] = calculate_sample_std(arr, size);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f103 040c 	add.w	r4, r3, #12
 8001de6:	7afb      	ldrb	r3, [r7, #11]
 8001de8:	4619      	mov	r1, r3
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f7ff ff5b 	bl	8001ca6 <calculate_sample_std>
 8001df0:	4603      	mov	r3, r0
 8001df2:	6023      	str	r3, [r4, #0]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd90      	pop	{r4, r7, pc}

08001dfc <TIM2_IRQInterrupt_Config>:

#include "stm32f407xx.h"
#include "project_timer2_5.h"

void TIM2_IRQInterrupt_Config(uint8_t EnorDi)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]

	if(EnorDi == ENABLE)
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d106      	bne.n	8001e1a <TIM2_IRQInterrupt_Config+0x1e>
	{
		*NVIC_ISER0 |= ( 1 << 28 );
 8001e0c:	4b08      	ldr	r3, [pc, #32]	@ (8001e30 <TIM2_IRQInterrupt_Config+0x34>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a07      	ldr	r2, [pc, #28]	@ (8001e30 <TIM2_IRQInterrupt_Config+0x34>)
 8001e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e16:	6013      	str	r3, [r2, #0]
	}else
	{
		*NVIC_ICER0 |= ( 1 << 28 );
	}
}
 8001e18:	e005      	b.n	8001e26 <TIM2_IRQInterrupt_Config+0x2a>
		*NVIC_ICER0 |= ( 1 << 28 );
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <TIM2_IRQInterrupt_Config+0x38>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a05      	ldr	r2, [pc, #20]	@ (8001e34 <TIM2_IRQInterrupt_Config+0x38>)
 8001e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e24:	6013      	str	r3, [r2, #0]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	e000e100 	.word	0xe000e100
 8001e34:	e000e180 	.word	0xe000e180

08001e38 <TIM5_IRQInterrupt_Config>:

void TIM5_IRQInterrupt_Config(uint8_t EnorDi)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
	if(EnorDi == ENABLE)
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d106      	bne.n	8001e56 <TIM5_IRQInterrupt_Config+0x1e>
	{
		*NVIC_ISER1 |= ( 1 << (50 % 32) );
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <TIM5_IRQInterrupt_Config+0x34>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a07      	ldr	r2, [pc, #28]	@ (8001e6c <TIM5_IRQInterrupt_Config+0x34>)
 8001e4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e52:	6013      	str	r3, [r2, #0]
	}else
	{
		*NVIC_ICER1 |= ( 1 << (50 % 32) );
	}
}
 8001e54:	e005      	b.n	8001e62 <TIM5_IRQInterrupt_Config+0x2a>
		*NVIC_ICER1 |= ( 1 << (50 % 32) );
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <TIM5_IRQInterrupt_Config+0x38>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a05      	ldr	r2, [pc, #20]	@ (8001e70 <TIM5_IRQInterrupt_Config+0x38>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e60:	6013      	str	r3, [r2, #0]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e104 	.word	0xe000e104
 8001e70:	e000e184 	.word	0xe000e184

08001e74 <USART_SetBaudRate>:
 *
 * @Note              -

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a31      	ldr	r2, [pc, #196]	@ (8001f4c <USART_SetBaudRate+0xd8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d003      	beq.n	8001e92 <USART_SetBaudRate+0x1e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a30      	ldr	r2, [pc, #192]	@ (8001f50 <USART_SetBaudRate+0xdc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d103      	bne.n	8001e9a <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8001e92:	f001 f9c1 	bl	8003218 <RCC_GetPCLK2Value>
 8001e96:	61f8      	str	r0, [r7, #28]
 8001e98:	e002      	b.n	8001ea0 <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8001e9a:	f001 f965 	bl	8003168 <RCC_GetPCLK1Value>
 8001e9e:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00b      	beq.n	8001ec4 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009a      	lsls	r2, r3, #2
 8001eb6:	441a      	add	r2, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec0:	61bb      	str	r3, [r7, #24]
 8001ec2:	e00a      	b.n	8001eda <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8001ec4:	69fa      	ldr	r2, [r7, #28]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	009a      	lsls	r2, r3, #2
 8001ece:	441a      	add	r2, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed8:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f54 <USART_SetBaudRate+0xe0>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2264      	movs	r2, #100	@ 0x64
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00a      	beq.n	8001f20 <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	3332      	adds	r3, #50	@ 0x32
 8001f10:	4a10      	ldr	r2, [pc, #64]	@ (8001f54 <USART_SetBaudRate+0xe0>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	e009      	b.n	8001f34 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	3332      	adds	r3, #50	@ 0x32
 8001f26:	4a0b      	ldr	r2, [pc, #44]	@ (8001f54 <USART_SetBaudRate+0xe0>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	609a      	str	r2, [r3, #8]
}
 8001f42:	bf00      	nop
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40011000 	.word	0x40011000
 8001f50:	40011400 	.word	0x40011400
 8001f54:	51eb851f 	.word	0x51eb851f

08001f58 <USART_Init>:
 *
 * @Note              -

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f890 	bl	8002090 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	791b      	ldrb	r3, [r3, #4]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d104      	bne.n	8001f82 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	e010      	b.n	8001fa4 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	791b      	ldrb	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d104      	bne.n	8001f94 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f043 0308 	orr.w	r3, r3, #8
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	e007      	b.n	8001fa4 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	791b      	ldrb	r3, [r3, #4]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d103      	bne.n	8001fa4 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f043 030c 	orr.w	r3, r3, #12
 8001fa2:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7b5b      	ldrb	r3, [r3, #13]
 8001fa8:	031b      	lsls	r3, r3, #12
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7b9b      	ldrb	r3, [r3, #14]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d104      	bne.n	8001fc2 <USART_Init+0x6a>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	e00b      	b.n	8001fda <USART_Init+0x82>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	7b9b      	ldrb	r3, [r3, #14]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d107      	bne.n	8001fda <USART_Init+0x82>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fd0:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fd8:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7b1b      	ldrb	r3, [r3, #12]
 8001fea:	031b      	lsls	r3, r3, #12
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	7bdb      	ldrb	r3, [r3, #15]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d104      	bne.n	8002010 <USART_Init+0xb8>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	e014      	b.n	800203a <USART_Init+0xe2>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7bdb      	ldrb	r3, [r3, #15]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d104      	bne.n	8002022 <USART_Init+0xca>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	e00b      	b.n	800203a <USART_Init+0xe2>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	7bdb      	ldrb	r3, [r3, #15]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d107      	bne.n	800203a <USART_Init+0xe2>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002030:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002038:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	4619      	mov	r1, r3
 800204c:	4610      	mov	r0, r2
 800204e:	f7ff ff11 	bl	8001e74 <USART_SetBaudRate>

}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <USART_PeripheralControl>:
 *
 * @Note              -

 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t Cmd)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	70fb      	strb	r3, [r7, #3]
	if(Cmd == ENABLE)
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d106      	bne.n	800207a <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << 13);
	}

}
 8002078:	e005      	b.n	8002086 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	60da      	str	r2, [r3, #12]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <USART_PeriClockControl>:
 *
 * @Note              -

 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d12a      	bne.n	80020f8 <USART_PeriClockControl+0x68>
	{
		if(pUSARTx == USART1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a17      	ldr	r2, [pc, #92]	@ (8002104 <USART_PeriClockControl+0x74>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d106      	bne.n	80020b8 <USART_PeriClockControl+0x28>
		{
			USART1_PCCK_EN();
 80020aa:	4b17      	ldr	r3, [pc, #92]	@ (8002108 <USART_PeriClockControl+0x78>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	4a16      	ldr	r2, [pc, #88]	@ (8002108 <USART_PeriClockControl+0x78>)
 80020b0:	f043 0310 	orr.w	r3, r3, #16
 80020b4:	6453      	str	r3, [r2, #68]	@ 0x44
	else
	{
		//TODO
	}

}
 80020b6:	e01f      	b.n	80020f8 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == USART2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a14      	ldr	r2, [pc, #80]	@ (800210c <USART_PeriClockControl+0x7c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d106      	bne.n	80020ce <USART_PeriClockControl+0x3e>
			USART2_PCCK_EN();
 80020c0:	4b11      	ldr	r3, [pc, #68]	@ (8002108 <USART_PeriClockControl+0x78>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	4a10      	ldr	r2, [pc, #64]	@ (8002108 <USART_PeriClockControl+0x78>)
 80020c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020ca:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80020cc:	e014      	b.n	80020f8 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == USART3)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002110 <USART_PeriClockControl+0x80>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d106      	bne.n	80020e4 <USART_PeriClockControl+0x54>
			USART3_PCCK_EN();
 80020d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <USART_PeriClockControl+0x78>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	4a0b      	ldr	r2, [pc, #44]	@ (8002108 <USART_PeriClockControl+0x78>)
 80020dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020e0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80020e2:	e009      	b.n	80020f8 <USART_PeriClockControl+0x68>
		else if (pUSARTx == UART4)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002114 <USART_PeriClockControl+0x84>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d105      	bne.n	80020f8 <USART_PeriClockControl+0x68>
			UART4_PCCK_EN();
 80020ec:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <USART_PeriClockControl+0x78>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	4a05      	ldr	r2, [pc, #20]	@ (8002108 <USART_PeriClockControl+0x78>)
 80020f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80020f6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40011000 	.word	0x40011000
 8002108:	40023800 	.word	0x40023800
 800210c:	40004400 	.word	0x40004400
 8002110:	40004800 	.word	0x40004800
 8002114:	40004c00 	.word	0x40004c00

08002118 <USART_GetFlagStatus>:
 *
 * @Note              -

 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;

   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	e031      	b.n	80021b6 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8002152:	bf00      	nop
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2180      	movs	r1, #128	@ 0x80
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ffdc 	bl	8002118 <USART_GetFlagStatus>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f6      	beq.n	8002154 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	7b5b      	ldrb	r3, [r3, #13]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d118      	bne.n	80021a0 <USART_SendData+0x60>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002180:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	7b9b      	ldrb	r3, [r3, #14]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <USART_SendData+0x58>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3301      	adds	r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	3301      	adds	r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	e00b      	b.n	80021b0 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	3301      	adds	r3, #1
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	e007      	b.n	80021b0 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	3301      	adds	r3, #1
 80021ae:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	3301      	adds	r3, #1
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d3c9      	bcc.n	8002152 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 80021be:	bf00      	nop
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2140      	movs	r1, #64	@ 0x40
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ffa6 	bl	8002118 <USART_GetFlagStatus>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f6      	beq.n	80021c0 <USART_SendData+0x80>
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <BMP280_Init>:
/**
 * @brief  Initializes the BMP280 sensor by configuring control and configuration registers.
 * @param  pI2CHandle: Pointer to the I2C handle structure.
 * @retval None
 */
void BMP280_Init(I2C_Handle_t *pI2CHandle) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	6078      	str	r0, [r7, #4]
    uint8_t config[2];

    // Set control register (0xF4) -> Normal mode, 16x oversampling
    config[0] = CTRL_MEAS;
 80021e4:	23f4      	movs	r3, #244	@ 0xf4
 80021e6:	733b      	strb	r3, [r7, #12]
    config[1] = 0x5F;
 80021e8:	235f      	movs	r3, #95	@ 0x5f
 80021ea:	737b      	strb	r3, [r7, #13]

    I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fd93 	bl	8002d1e <I2C_PeripheralControl>
    I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2101      	movs	r1, #1
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 ff96 	bl	8003130 <I2C_ManageAcking>
    I2C_MasterSendData(pI2CHandle, config, 2, BMP280_ADDR, I2C_DISABLE_SR);
 8002204:	f107 010c 	add.w	r1, r7, #12
 8002208:	2300      	movs	r3, #0
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2377      	movs	r3, #119	@ 0x77
 800220e:	2202      	movs	r2, #2
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 fe98 	bl	8002f46 <I2C_MasterSendData>

    // Set configuration register (0xF5) -> Standard filtering and standby time
    config[0] = CONFIG;
 8002216:	23f5      	movs	r3, #245	@ 0xf5
 8002218:	733b      	strb	r3, [r7, #12]
    config[1] = 0x90;
 800221a:	2390      	movs	r3, #144	@ 0x90
 800221c:	737b      	strb	r3, [r7, #13]
    I2C_MasterSendData(pI2CHandle, config, 2, BMP280_ADDR, I2C_DISABLE_SR);
 800221e:	f107 010c 	add.w	r1, r7, #12
 8002222:	2300      	movs	r3, #0
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	2377      	movs	r3, #119	@ 0x77
 8002228:	2202      	movs	r2, #2
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 fe8b 	bl	8002f46 <I2C_MasterSendData>
}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <BMP280_ReadPressureRaw>:
/**
 * @brief  Reads raw pressure data from BMP280.
 * @param  pI2CHandle: Pointer to the I2C handle structure.
 * @retval Raw pressure value (20-bit ADC reading)
 */
uint32_t BMP280_ReadPressureRaw(I2C_Handle_t *pI2CHandle) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af02      	add	r7, sp, #8
 800223e:	6078      	str	r0, [r7, #4]
    uint8_t pressure_raw[3];
    uint8_t reg_addr = Press_register;
 8002240:	23f7      	movs	r3, #247	@ 0xf7
 8002242:	72fb      	strb	r3, [r7, #11]

    I2C_PeripheralControl(I2C1, ENABLE);
 8002244:	2101      	movs	r1, #1
 8002246:	4813      	ldr	r0, [pc, #76]	@ (8002294 <BMP280_ReadPressureRaw+0x5c>)
 8002248:	f000 fd69 	bl	8002d1e <I2C_PeripheralControl>
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 800224c:	2101      	movs	r1, #1
 800224e:	4811      	ldr	r0, [pc, #68]	@ (8002294 <BMP280_ReadPressureRaw+0x5c>)
 8002250:	f000 ff6e 	bl	8003130 <I2C_ManageAcking>
    I2C_MasterSendData(pI2CHandle, &reg_addr, 1, BMP280_ADDR, I2C_DISABLE_SR);
 8002254:	f107 010b 	add.w	r1, r7, #11
 8002258:	2300      	movs	r3, #0
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	2377      	movs	r3, #119	@ 0x77
 800225e:	2201      	movs	r2, #1
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 fe70 	bl	8002f46 <I2C_MasterSendData>
    I2C_MasterReceiveData(pI2CHandle, pressure_raw, 3, BMP280_ADDR, I2C_DISABLE_SR);
 8002266:	f107 010c 	add.w	r1, r7, #12
 800226a:	2300      	movs	r3, #0
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2377      	movs	r3, #119	@ 0x77
 8002270:	2203      	movs	r2, #3
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 feca 	bl	800300c <I2C_MasterReceiveData>

    // Combine bytes into a 20-bit ADC value
    return ((uint32_t)pressure_raw[0] << 12) | ((uint32_t)pressure_raw[1] << 4) | (pressure_raw[2] >> 4);
 8002278:	7b3b      	ldrb	r3, [r7, #12]
 800227a:	031a      	lsls	r2, r3, #12
 800227c:	7b7b      	ldrb	r3, [r7, #13]
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	4313      	orrs	r3, r2
 8002282:	7bba      	ldrb	r2, [r7, #14]
 8002284:	0912      	lsrs	r2, r2, #4
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	4313      	orrs	r3, r2
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40005400 	.word	0x40005400

08002298 <BMP280_ReadTemperatureRaw>:
/**
 * @brief  Reads raw temperature data from BMP280.
 * @param  pI2CHandle: Pointer to the I2C handle structure.
 * @retval Raw temperature value (20-bit ADC reading)
 */
uint32_t BMP280_ReadTemperatureRaw(I2C_Handle_t *pI2CHandle) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af02      	add	r7, sp, #8
 800229e:	6078      	str	r0, [r7, #4]
    uint8_t temp_raw[3];
    uint8_t reg_addr = Temperature_register;
 80022a0:	23fa      	movs	r3, #250	@ 0xfa
 80022a2:	72fb      	strb	r3, [r7, #11]

    I2C_PeripheralControl(I2C1, ENABLE);
 80022a4:	2101      	movs	r1, #1
 80022a6:	4813      	ldr	r0, [pc, #76]	@ (80022f4 <BMP280_ReadTemperatureRaw+0x5c>)
 80022a8:	f000 fd39 	bl	8002d1e <I2C_PeripheralControl>
    I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80022ac:	2101      	movs	r1, #1
 80022ae:	4811      	ldr	r0, [pc, #68]	@ (80022f4 <BMP280_ReadTemperatureRaw+0x5c>)
 80022b0:	f000 ff3e 	bl	8003130 <I2C_ManageAcking>
    I2C_MasterSendData(pI2CHandle, &reg_addr, 1, BMP280_ADDR, I2C_DISABLE_SR);
 80022b4:	f107 010b 	add.w	r1, r7, #11
 80022b8:	2300      	movs	r3, #0
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2377      	movs	r3, #119	@ 0x77
 80022be:	2201      	movs	r2, #1
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 fe40 	bl	8002f46 <I2C_MasterSendData>
    I2C_MasterReceiveData(pI2CHandle, temp_raw, 3, BMP280_ADDR, I2C_DISABLE_SR);
 80022c6:	f107 010c 	add.w	r1, r7, #12
 80022ca:	2300      	movs	r3, #0
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2377      	movs	r3, #119	@ 0x77
 80022d0:	2203      	movs	r2, #3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fe9a 	bl	800300c <I2C_MasterReceiveData>

    // Combine bytes into a 20-bit ADC value
    return ((uint32_t)temp_raw[0] << 12) | ((uint32_t)temp_raw[1] << 4) | (temp_raw[2] >> 4);
 80022d8:	7b3b      	ldrb	r3, [r7, #12]
 80022da:	031a      	lsls	r2, r3, #12
 80022dc:	7b7b      	ldrb	r3, [r7, #13]
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	4313      	orrs	r3, r2
 80022e2:	7bba      	ldrb	r2, [r7, #14]
 80022e4:	0912      	lsrs	r2, r2, #4
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	4313      	orrs	r3, r2
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40005400 	.word	0x40005400

080022f8 <bmp280_compensate_T_double>:
/**
 * @brief  Compensates raw temperature reading using BMP280 calibration coefficients.
 * @param  adc_T: Raw temperature ADC value
 * @retval Compensated temperature in degrees Celsius
 */
double bmp280_compensate_T_double(BMP280_S32_t adc_T) {
 80022f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022fc:	b088      	sub	sp, #32
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
    double var1, var2, T;
    var1  = (((double)adc_T)/16384.0 - ((double)dig_T1)/1024.0) * ((double)dig_T2);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe f90e 	bl	8000524 <__aeabi_i2d>
 8002308:	f04f 0200 	mov.w	r2, #0
 800230c:	4b56      	ldr	r3, [pc, #344]	@ (8002468 <bmp280_compensate_T_double+0x170>)
 800230e:	f7fe fa9d 	bl	800084c <__aeabi_ddiv>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4614      	mov	r4, r2
 8002318:	461d      	mov	r5, r3
 800231a:	4b54      	ldr	r3, [pc, #336]	@ (800246c <bmp280_compensate_T_double+0x174>)
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe f8f0 	bl	8000504 <__aeabi_ui2d>
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	4b51      	ldr	r3, [pc, #324]	@ (8002470 <bmp280_compensate_T_double+0x178>)
 800232a:	f7fe fa8f 	bl	800084c <__aeabi_ddiv>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4620      	mov	r0, r4
 8002334:	4629      	mov	r1, r5
 8002336:	f7fd ffa7 	bl	8000288 <__aeabi_dsub>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4614      	mov	r4, r2
 8002340:	461d      	mov	r5, r3
 8002342:	4b4c      	ldr	r3, [pc, #304]	@ (8002474 <bmp280_compensate_T_double+0x17c>)
 8002344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe f8eb 	bl	8000524 <__aeabi_i2d>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4620      	mov	r0, r4
 8002354:	4629      	mov	r1, r5
 8002356:	f7fe f94f 	bl	80005f8 <__aeabi_dmul>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2  = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0) *
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7fe f8de 	bl	8000524 <__aeabi_i2d>
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002370:	f7fe fa6c 	bl	800084c <__aeabi_ddiv>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4614      	mov	r4, r2
 800237a:	461d      	mov	r5, r3
 800237c:	4b3b      	ldr	r3, [pc, #236]	@ (800246c <bmp280_compensate_T_double+0x174>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8bf 	bl	8000504 <__aeabi_ui2d>
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	4b3b      	ldr	r3, [pc, #236]	@ (8002478 <bmp280_compensate_T_double+0x180>)
 800238c:	f7fe fa5e 	bl	800084c <__aeabi_ddiv>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4620      	mov	r0, r4
 8002396:	4629      	mov	r1, r5
 8002398:	f7fd ff76 	bl	8000288 <__aeabi_dsub>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4614      	mov	r4, r2
 80023a2:	461d      	mov	r5, r3
            (((double)adc_T)/131072.0 - ((double) dig_T1)/8192.0)) * ((double)dig_T3);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7fe f8bd 	bl	8000524 <__aeabi_i2d>
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80023b2:	f7fe fa4b 	bl	800084c <__aeabi_ddiv>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4690      	mov	r8, r2
 80023bc:	4699      	mov	r9, r3
 80023be:	4b2b      	ldr	r3, [pc, #172]	@ (800246c <bmp280_compensate_T_double+0x174>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe f89e 	bl	8000504 <__aeabi_ui2d>
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002478 <bmp280_compensate_T_double+0x180>)
 80023ce:	f7fe fa3d 	bl	800084c <__aeabi_ddiv>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4640      	mov	r0, r8
 80023d8:	4649      	mov	r1, r9
 80023da:	f7fd ff55 	bl	8000288 <__aeabi_dsub>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
    var2  = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0) *
 80023e2:	4620      	mov	r0, r4
 80023e4:	4629      	mov	r1, r5
 80023e6:	f7fe f907 	bl	80005f8 <__aeabi_dmul>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4614      	mov	r4, r2
 80023f0:	461d      	mov	r5, r3
            (((double)adc_T)/131072.0 - ((double) dig_T1)/8192.0)) * ((double)dig_T3);
 80023f2:	4b22      	ldr	r3, [pc, #136]	@ (800247c <bmp280_compensate_T_double+0x184>)
 80023f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe f893 	bl	8000524 <__aeabi_i2d>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
    var2  = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0) *
 8002402:	4620      	mov	r0, r4
 8002404:	4629      	mov	r1, r5
 8002406:	f7fe f8f7 	bl	80005f8 <__aeabi_dmul>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    t_fine = (BMP280_S32_t)(var1 + var2);
 8002412:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002416:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800241a:	f7fd ff37 	bl	800028c <__adddf3>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f7fe fb97 	bl	8000b58 <__aeabi_d2iz>
 800242a:	4603      	mov	r3, r0
 800242c:	4a14      	ldr	r2, [pc, #80]	@ (8002480 <bmp280_compensate_T_double+0x188>)
 800242e:	6013      	str	r3, [r2, #0]
    T  = (var1 + var2) / 5120.0;
 8002430:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002434:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002438:	f7fd ff28 	bl	800028c <__adddf3>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <bmp280_compensate_T_double+0x18c>)
 800244a:	f7fe f9ff 	bl	800084c <__aeabi_ddiv>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return T;
 8002456:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002466:	bf00      	nop
 8002468:	40d00000 	.word	0x40d00000
 800246c:	20000000 	.word	0x20000000
 8002470:	40900000 	.word	0x40900000
 8002474:	20000002 	.word	0x20000002
 8002478:	40c00000 	.word	0x40c00000
 800247c:	20000004 	.word	0x20000004
 8002480:	200004e0 	.word	0x200004e0
 8002484:	40b40000 	.word	0x40b40000

08002488 <bmp280_compensate_P_double>:
/**
 * @brief  Compensates raw pressure reading using BMP280 calibration coefficients.
 * @param  adc_P: Raw pressure ADC value
 * @retval Compensated pressure in Pascal (Pa)
 */
double bmp280_compensate_P_double(BMP280_S32_t adc_P) {
 8002488:	b5b0      	push	{r4, r5, r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
    double var1, var2, p;
    var1 = ((double)t_fine/2.0) - 64000.0;
 8002490:	4bbf      	ldr	r3, [pc, #764]	@ (8002790 <bmp280_compensate_P_double+0x308>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe f845 	bl	8000524 <__aeabi_i2d>
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024a2:	f7fe f9d3 	bl	800084c <__aeabi_ddiv>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	4bb8      	ldr	r3, [pc, #736]	@ (8002794 <bmp280_compensate_P_double+0x30c>)
 80024b4:	f7fd fee8 	bl	8000288 <__aeabi_dsub>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)dig_P6) / 32768.0;
 80024c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024c8:	f7fe f896 	bl	80005f8 <__aeabi_dmul>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4614      	mov	r4, r2
 80024d2:	461d      	mov	r5, r3
 80024d4:	4bb0      	ldr	r3, [pc, #704]	@ (8002798 <bmp280_compensate_P_double+0x310>)
 80024d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe f822 	bl	8000524 <__aeabi_i2d>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4620      	mov	r0, r4
 80024e6:	4629      	mov	r1, r5
 80024e8:	f7fe f886 	bl	80005f8 <__aeabi_dmul>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	4ba8      	ldr	r3, [pc, #672]	@ (800279c <bmp280_compensate_P_double+0x314>)
 80024fa:	f7fe f9a7 	bl	800084c <__aeabi_ddiv>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)dig_P5) * 2.0;
 8002506:	4ba6      	ldr	r3, [pc, #664]	@ (80027a0 <bmp280_compensate_P_double+0x318>)
 8002508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe f809 	bl	8000524 <__aeabi_i2d>
 8002512:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002516:	f7fe f86f 	bl	80005f8 <__aeabi_dmul>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	f7fd feb1 	bl	800028c <__adddf3>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002532:	f7fd feab 	bl	800028c <__adddf3>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2/4.0)+(((double)dig_P4) * 65536.0);
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	4b98      	ldr	r3, [pc, #608]	@ (80027a4 <bmp280_compensate_P_double+0x31c>)
 8002544:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002548:	f7fe f980 	bl	800084c <__aeabi_ddiv>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4614      	mov	r4, r2
 8002552:	461d      	mov	r5, r3
 8002554:	4b94      	ldr	r3, [pc, #592]	@ (80027a8 <bmp280_compensate_P_double+0x320>)
 8002556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fd ffe2 	bl	8000524 <__aeabi_i2d>
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	4b91      	ldr	r3, [pc, #580]	@ (80027ac <bmp280_compensate_P_double+0x324>)
 8002566:	f7fe f847 	bl	80005f8 <__aeabi_dmul>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4620      	mov	r0, r4
 8002570:	4629      	mov	r1, r5
 8002572:	f7fd fe8b 	bl	800028c <__adddf3>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dig_P3) * var1 * var1 / 524288.0 + ((double)dig_P2) * var1) / 524288.0;
 800257e:	4b8c      	ldr	r3, [pc, #560]	@ (80027b0 <bmp280_compensate_P_double+0x328>)
 8002580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd ffcd 	bl	8000524 <__aeabi_i2d>
 800258a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800258e:	f7fe f833 	bl	80005f8 <__aeabi_dmul>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800259e:	f7fe f82b 	bl	80005f8 <__aeabi_dmul>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	4b81      	ldr	r3, [pc, #516]	@ (80027b4 <bmp280_compensate_P_double+0x32c>)
 80025b0:	f7fe f94c 	bl	800084c <__aeabi_ddiv>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4614      	mov	r4, r2
 80025ba:	461d      	mov	r5, r3
 80025bc:	4b7e      	ldr	r3, [pc, #504]	@ (80027b8 <bmp280_compensate_P_double+0x330>)
 80025be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fd ffae 	bl	8000524 <__aeabi_i2d>
 80025c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025cc:	f7fe f814 	bl	80005f8 <__aeabi_dmul>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4620      	mov	r0, r4
 80025d6:	4629      	mov	r1, r5
 80025d8:	f7fd fe58 	bl	800028c <__adddf3>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4610      	mov	r0, r2
 80025e2:	4619      	mov	r1, r3
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	4b72      	ldr	r3, [pc, #456]	@ (80027b4 <bmp280_compensate_P_double+0x32c>)
 80025ea:	f7fe f92f 	bl	800084c <__aeabi_ddiv>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0)*((double)dig_P1);
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	4b68      	ldr	r3, [pc, #416]	@ (800279c <bmp280_compensate_P_double+0x314>)
 80025fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002600:	f7fe f924 	bl	800084c <__aeabi_ddiv>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	4b6a      	ldr	r3, [pc, #424]	@ (80027bc <bmp280_compensate_P_double+0x334>)
 8002612:	f7fd fe3b 	bl	800028c <__adddf3>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4614      	mov	r4, r2
 800261c:	461d      	mov	r5, r3
 800261e:	4b68      	ldr	r3, [pc, #416]	@ (80027c0 <bmp280_compensate_P_double+0x338>)
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd ff6e 	bl	8000504 <__aeabi_ui2d>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4620      	mov	r0, r4
 800262e:	4629      	mov	r1, r5
 8002630:	f7fd ffe2 	bl	80005f8 <__aeabi_dmul>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (var1 == 0.0) return 0;
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002648:	f7fe fa3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d004      	beq.n	800265c <bmp280_compensate_P_double+0x1d4>
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	e08e      	b.n	800277a <bmp280_compensate_P_double+0x2f2>
    p = 1048576.0 - (double)adc_P;
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7fd ff61 	bl	8000524 <__aeabi_i2d>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	f04f 0000 	mov.w	r0, #0
 800266a:	4956      	ldr	r1, [pc, #344]	@ (80027c4 <bmp280_compensate_P_double+0x33c>)
 800266c:	f7fd fe0c 	bl	8000288 <__aeabi_dsub>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	e9c7 2302 	strd	r2, r3, [r7, #8]
    p = (p - (var2 / 4096.0)) * 6250.0 / var1;
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	4b52      	ldr	r3, [pc, #328]	@ (80027c8 <bmp280_compensate_P_double+0x340>)
 800267e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002682:	f7fe f8e3 	bl	800084c <__aeabi_ddiv>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800268e:	f7fd fdfb 	bl	8000288 <__aeabi_dsub>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	a33b      	add	r3, pc, #236	@ (adr r3, 8002788 <bmp280_compensate_P_double+0x300>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fd ffaa 	bl	80005f8 <__aeabi_dmul>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026b0:	f7fe f8cc 	bl	800084c <__aeabi_ddiv>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = ((double)dig_P9) * p * p / 2147483648.0;
 80026bc:	4b43      	ldr	r3, [pc, #268]	@ (80027cc <bmp280_compensate_P_double+0x344>)
 80026be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fd ff2e 	bl	8000524 <__aeabi_i2d>
 80026c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026cc:	f7fd ff94 	bl	80005f8 <__aeabi_dmul>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026dc:	f7fd ff8c 	bl	80005f8 <__aeabi_dmul>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	4b38      	ldr	r3, [pc, #224]	@ (80027d0 <bmp280_compensate_P_double+0x348>)
 80026ee:	f7fe f8ad 	bl	800084c <__aeabi_ddiv>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = p * ((double)dig_P8) / 32768.0;
 80026fa:	4b36      	ldr	r3, [pc, #216]	@ (80027d4 <bmp280_compensate_P_double+0x34c>)
 80026fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002700:	4618      	mov	r0, r3
 8002702:	f7fd ff0f 	bl	8000524 <__aeabi_i2d>
 8002706:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800270a:	f7fd ff75 	bl	80005f8 <__aeabi_dmul>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	4b20      	ldr	r3, [pc, #128]	@ (800279c <bmp280_compensate_P_double+0x314>)
 800271c:	f7fe f896 	bl	800084c <__aeabi_ddiv>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return p + (var1 + var2 + ((double)dig_P7)) / 16.0;
 8002728:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800272c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002730:	f7fd fdac 	bl	800028c <__adddf3>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4614      	mov	r4, r2
 800273a:	461d      	mov	r5, r3
 800273c:	4b26      	ldr	r3, [pc, #152]	@ (80027d8 <bmp280_compensate_P_double+0x350>)
 800273e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fd feee 	bl	8000524 <__aeabi_i2d>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4620      	mov	r0, r4
 800274e:	4629      	mov	r1, r5
 8002750:	f7fd fd9c 	bl	800028c <__adddf3>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	4b1e      	ldr	r3, [pc, #120]	@ (80027dc <bmp280_compensate_P_double+0x354>)
 8002762:	f7fe f873 	bl	800084c <__aeabi_ddiv>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002772:	f7fd fd8b 	bl	800028c <__adddf3>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
}
 800277a:	4610      	mov	r0, r2
 800277c:	4619      	mov	r1, r3
 800277e:	3720      	adds	r7, #32
 8002780:	46bd      	mov	sp, r7
 8002782:	bdb0      	pop	{r4, r5, r7, pc}
 8002784:	f3af 8000 	nop.w
 8002788:	00000000 	.word	0x00000000
 800278c:	40b86a00 	.word	0x40b86a00
 8002790:	200004e0 	.word	0x200004e0
 8002794:	40ef4000 	.word	0x40ef4000
 8002798:	20000010 	.word	0x20000010
 800279c:	40e00000 	.word	0x40e00000
 80027a0:	2000000e 	.word	0x2000000e
 80027a4:	40100000 	.word	0x40100000
 80027a8:	2000000c 	.word	0x2000000c
 80027ac:	40f00000 	.word	0x40f00000
 80027b0:	2000000a 	.word	0x2000000a
 80027b4:	41200000 	.word	0x41200000
 80027b8:	20000008 	.word	0x20000008
 80027bc:	3ff00000 	.word	0x3ff00000
 80027c0:	20000006 	.word	0x20000006
 80027c4:	41300000 	.word	0x41300000
 80027c8:	40b00000 	.word	0x40b00000
 80027cc:	20000016 	.word	0x20000016
 80027d0:	41e00000 	.word	0x41e00000
 80027d4:	20000014 	.word	0x20000014
 80027d8:	20000012 	.word	0x20000012
 80027dc:	40300000 	.word	0x40300000

080027e0 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d161      	bne.n	80028b6 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a32      	ldr	r2, [pc, #200]	@ (80028c0 <GPIO_PeriClockControl+0xe0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d106      	bne.n	8002808 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80027fa:	4b32      	ldr	r3, [pc, #200]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	4a31      	ldr	r2, [pc, #196]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6313      	str	r3, [r2, #48]	@ 0x30
	else
	{
		//TODO
	}

}
 8002806:	e056      	b.n	80028b6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a2f      	ldr	r2, [pc, #188]	@ (80028c8 <GPIO_PeriClockControl+0xe8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d106      	bne.n	800281e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8002810:	4b2c      	ldr	r3, [pc, #176]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002814:	4a2b      	ldr	r2, [pc, #172]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 8002816:	f043 0302 	orr.w	r3, r3, #2
 800281a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800281c:	e04b      	b.n	80028b6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a2a      	ldr	r2, [pc, #168]	@ (80028cc <GPIO_PeriClockControl+0xec>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d106      	bne.n	8002834 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8002826:	4b27      	ldr	r3, [pc, #156]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	4a26      	ldr	r2, [pc, #152]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 800282c:	f043 0304 	orr.w	r3, r3, #4
 8002830:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8002832:	e040      	b.n	80028b6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a26      	ldr	r2, [pc, #152]	@ (80028d0 <GPIO_PeriClockControl+0xf0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d106      	bne.n	800284a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800283c:	4b21      	ldr	r3, [pc, #132]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002840:	4a20      	ldr	r2, [pc, #128]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 8002842:	f043 0308 	orr.w	r3, r3, #8
 8002846:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8002848:	e035      	b.n	80028b6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a21      	ldr	r2, [pc, #132]	@ (80028d4 <GPIO_PeriClockControl+0xf4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d106      	bne.n	8002860 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8002852:	4b1c      	ldr	r3, [pc, #112]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	4a1b      	ldr	r2, [pc, #108]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 8002858:	f043 0310 	orr.w	r3, r3, #16
 800285c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800285e:	e02a      	b.n	80028b6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a1d      	ldr	r2, [pc, #116]	@ (80028d8 <GPIO_PeriClockControl+0xf8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d106      	bne.n	8002876 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8002868:	4b16      	ldr	r3, [pc, #88]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286c:	4a15      	ldr	r2, [pc, #84]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 800286e:	f043 0320 	orr.w	r3, r3, #32
 8002872:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8002874:	e01f      	b.n	80028b6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a18      	ldr	r2, [pc, #96]	@ (80028dc <GPIO_PeriClockControl+0xfc>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d106      	bne.n	800288c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800287e:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	4a10      	ldr	r2, [pc, #64]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 8002884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002888:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800288a:	e014      	b.n	80028b6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a14      	ldr	r2, [pc, #80]	@ (80028e0 <GPIO_PeriClockControl+0x100>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d106      	bne.n	80028a2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8002894:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 8002896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002898:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 800289a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800289e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80028a0:	e009      	b.n	80028b6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a0f      	ldr	r2, [pc, #60]	@ (80028e4 <GPIO_PeriClockControl+0x104>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d105      	bne.n	80028b6 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80028aa:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	4a05      	ldr	r2, [pc, #20]	@ (80028c4 <GPIO_PeriClockControl+0xe4>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	40020000 	.word	0x40020000
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40020400 	.word	0x40020400
 80028cc:	40020800 	.word	0x40020800
 80028d0:	40020c00 	.word	0x40020c00
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40021400 	.word	0x40021400
 80028dc:	40021800 	.word	0x40021800
 80028e0:	40021c00 	.word	0x40021c00
 80028e4:	40022000 	.word	0x40022000

080028e8 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2101      	movs	r1, #1
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff70 	bl	80027e0 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	795b      	ldrb	r3, [r3, #5]
 8002904:	2b03      	cmp	r3, #3
 8002906:	d820      	bhi.n	800294a <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	795b      	ldrb	r3, [r3, #5]
 800290c:	461a      	mov	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	791b      	ldrb	r3, [r3, #4]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	791b      	ldrb	r3, [r3, #4]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	2103      	movs	r1, #3
 8002928:	fa01 f303 	lsl.w	r3, r1, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	4619      	mov	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	400a      	ands	r2, r1
 8002936:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6819      	ldr	r1, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	430a      	orrs	r2, r1
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	e0cb      	b.n	8002ae2 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	795b      	ldrb	r3, [r3, #5]
 800294e:	2b04      	cmp	r3, #4
 8002950:	d117      	bne.n	8002982 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8002952:	4b4b      	ldr	r3, [pc, #300]	@ (8002a80 <GPIO_Init+0x198>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	7912      	ldrb	r2, [r2, #4]
 800295a:	4611      	mov	r1, r2
 800295c:	2201      	movs	r2, #1
 800295e:	408a      	lsls	r2, r1
 8002960:	4611      	mov	r1, r2
 8002962:	4a47      	ldr	r2, [pc, #284]	@ (8002a80 <GPIO_Init+0x198>)
 8002964:	430b      	orrs	r3, r1
 8002966:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8002968:	4b45      	ldr	r3, [pc, #276]	@ (8002a80 <GPIO_Init+0x198>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	7912      	ldrb	r2, [r2, #4]
 8002970:	4611      	mov	r1, r2
 8002972:	2201      	movs	r2, #1
 8002974:	408a      	lsls	r2, r1
 8002976:	43d2      	mvns	r2, r2
 8002978:	4611      	mov	r1, r2
 800297a:	4a41      	ldr	r2, [pc, #260]	@ (8002a80 <GPIO_Init+0x198>)
 800297c:	400b      	ands	r3, r1
 800297e:	6093      	str	r3, [r2, #8]
 8002980:	e035      	b.n	80029ee <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	795b      	ldrb	r3, [r3, #5]
 8002986:	2b05      	cmp	r3, #5
 8002988:	d117      	bne.n	80029ba <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800298a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a80 <GPIO_Init+0x198>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	7912      	ldrb	r2, [r2, #4]
 8002992:	4611      	mov	r1, r2
 8002994:	2201      	movs	r2, #1
 8002996:	408a      	lsls	r2, r1
 8002998:	4611      	mov	r1, r2
 800299a:	4a39      	ldr	r2, [pc, #228]	@ (8002a80 <GPIO_Init+0x198>)
 800299c:	430b      	orrs	r3, r1
 800299e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80029a0:	4b37      	ldr	r3, [pc, #220]	@ (8002a80 <GPIO_Init+0x198>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	7912      	ldrb	r2, [r2, #4]
 80029a8:	4611      	mov	r1, r2
 80029aa:	2201      	movs	r2, #1
 80029ac:	408a      	lsls	r2, r1
 80029ae:	43d2      	mvns	r2, r2
 80029b0:	4611      	mov	r1, r2
 80029b2:	4a33      	ldr	r2, [pc, #204]	@ (8002a80 <GPIO_Init+0x198>)
 80029b4:	400b      	ands	r3, r1
 80029b6:	60d3      	str	r3, [r2, #12]
 80029b8:	e019      	b.n	80029ee <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	795b      	ldrb	r3, [r3, #5]
 80029be:	2b06      	cmp	r3, #6
 80029c0:	d115      	bne.n	80029ee <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80029c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002a80 <GPIO_Init+0x198>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	7912      	ldrb	r2, [r2, #4]
 80029ca:	4611      	mov	r1, r2
 80029cc:	2201      	movs	r2, #1
 80029ce:	408a      	lsls	r2, r1
 80029d0:	4611      	mov	r1, r2
 80029d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002a80 <GPIO_Init+0x198>)
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80029d8:	4b29      	ldr	r3, [pc, #164]	@ (8002a80 <GPIO_Init+0x198>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	7912      	ldrb	r2, [r2, #4]
 80029e0:	4611      	mov	r1, r2
 80029e2:	2201      	movs	r2, #1
 80029e4:	408a      	lsls	r2, r1
 80029e6:	4611      	mov	r1, r2
 80029e8:	4a25      	ldr	r2, [pc, #148]	@ (8002a80 <GPIO_Init+0x198>)
 80029ea:	430b      	orrs	r3, r1
 80029ec:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	791b      	ldrb	r3, [r3, #4]
 80029f2:	089b      	lsrs	r3, r3, #2
 80029f4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	791b      	ldrb	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1f      	ldr	r2, [pc, #124]	@ (8002a84 <GPIO_Init+0x19c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d04e      	beq.n	8002aa8 <GPIO_Init+0x1c0>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002a88 <GPIO_Init+0x1a0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d032      	beq.n	8002a7a <GPIO_Init+0x192>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1c      	ldr	r2, [pc, #112]	@ (8002a8c <GPIO_Init+0x1a4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d02b      	beq.n	8002a76 <GPIO_Init+0x18e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1b      	ldr	r2, [pc, #108]	@ (8002a90 <GPIO_Init+0x1a8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d024      	beq.n	8002a72 <GPIO_Init+0x18a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a19      	ldr	r2, [pc, #100]	@ (8002a94 <GPIO_Init+0x1ac>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01d      	beq.n	8002a6e <GPIO_Init+0x186>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a18      	ldr	r2, [pc, #96]	@ (8002a98 <GPIO_Init+0x1b0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d016      	beq.n	8002a6a <GPIO_Init+0x182>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a16      	ldr	r2, [pc, #88]	@ (8002a9c <GPIO_Init+0x1b4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00f      	beq.n	8002a66 <GPIO_Init+0x17e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a15      	ldr	r2, [pc, #84]	@ (8002aa0 <GPIO_Init+0x1b8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d008      	beq.n	8002a62 <GPIO_Init+0x17a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a13      	ldr	r2, [pc, #76]	@ (8002aa4 <GPIO_Init+0x1bc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d101      	bne.n	8002a5e <GPIO_Init+0x176>
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	e025      	b.n	8002aaa <GPIO_Init+0x1c2>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e023      	b.n	8002aaa <GPIO_Init+0x1c2>
 8002a62:	2307      	movs	r3, #7
 8002a64:	e021      	b.n	8002aaa <GPIO_Init+0x1c2>
 8002a66:	2306      	movs	r3, #6
 8002a68:	e01f      	b.n	8002aaa <GPIO_Init+0x1c2>
 8002a6a:	2305      	movs	r3, #5
 8002a6c:	e01d      	b.n	8002aaa <GPIO_Init+0x1c2>
 8002a6e:	2304      	movs	r3, #4
 8002a70:	e01b      	b.n	8002aaa <GPIO_Init+0x1c2>
 8002a72:	2303      	movs	r3, #3
 8002a74:	e019      	b.n	8002aaa <GPIO_Init+0x1c2>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e017      	b.n	8002aaa <GPIO_Init+0x1c2>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e015      	b.n	8002aaa <GPIO_Init+0x1c2>
 8002a7e:	bf00      	nop
 8002a80:	40013c00 	.word	0x40013c00
 8002a84:	40020000 	.word	0x40020000
 8002a88:	40020400 	.word	0x40020400
 8002a8c:	40020800 	.word	0x40020800
 8002a90:	40020c00 	.word	0x40020c00
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40021400 	.word	0x40021400
 8002a9c:	40021800 	.word	0x40021800
 8002aa0:	40021c00 	.word	0x40021c00
 8002aa4:	40022000 	.word	0x40022000
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8002aac:	4b59      	ldr	r3, [pc, #356]	@ (8002c14 <GPIO_Init+0x32c>)
 8002aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab0:	4a58      	ldr	r2, [pc, #352]	@ (8002c14 <GPIO_Init+0x32c>)
 8002ab2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ab6:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8002ab8:	7c7a      	ldrb	r2, [r7, #17]
 8002aba:	7cbb      	ldrb	r3, [r7, #18]
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	fa02 f103 	lsl.w	r1, r2, r3
 8002ac2:	4a55      	ldr	r2, [pc, #340]	@ (8002c18 <GPIO_Init+0x330>)
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8002acc:	4b53      	ldr	r3, [pc, #332]	@ (8002c1c <GPIO_Init+0x334>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	7912      	ldrb	r2, [r2, #4]
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	408a      	lsls	r2, r1
 8002ada:	4611      	mov	r1, r2
 8002adc:	4a4f      	ldr	r2, [pc, #316]	@ (8002c1c <GPIO_Init+0x334>)
 8002ade:	430b      	orrs	r3, r1
 8002ae0:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	799b      	ldrb	r3, [r3, #6]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	791b      	ldrb	r3, [r3, #4]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	791b      	ldrb	r3, [r3, #4]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	2103      	movs	r1, #3
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	4619      	mov	r1, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	400a      	ands	r2, r1
 8002b10:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6899      	ldr	r1, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	79db      	ldrb	r3, [r3, #7]
 8002b26:	461a      	mov	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	791b      	ldrb	r3, [r3, #4]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	791b      	ldrb	r3, [r3, #4]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	2103      	movs	r1, #3
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	4619      	mov	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	400a      	ands	r2, r1
 8002b50:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68d9      	ldr	r1, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7a1b      	ldrb	r3, [r3, #8]
 8002b66:	461a      	mov	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	791b      	ldrb	r3, [r3, #4]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	791b      	ldrb	r3, [r3, #4]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	2301      	movs	r3, #1
 8002b80:	408b      	lsls	r3, r1
 8002b82:	43db      	mvns	r3, r3
 8002b84:	4619      	mov	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	795b      	ldrb	r3, [r3, #5]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d131      	bne.n	8002c0a <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	791b      	ldrb	r3, [r3, #4]
 8002baa:	08db      	lsrs	r3, r3, #3
 8002bac:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	791b      	ldrb	r3, [r3, #4]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	7c3a      	ldrb	r2, [r7, #16]
 8002bbe:	3208      	adds	r2, #8
 8002bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	220f      	movs	r2, #15
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	7c3a      	ldrb	r2, [r7, #16]
 8002bd8:	4001      	ands	r1, r0
 8002bda:	3208      	adds	r2, #8
 8002bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	7c3a      	ldrb	r2, [r7, #16]
 8002be6:	3208      	adds	r2, #8
 8002be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7a5b      	ldrb	r3, [r3, #9]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	7c3a      	ldrb	r2, [r7, #16]
 8002c02:	4301      	orrs	r1, r0
 8002c04:	3208      	adds	r2, #8
 8002c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8002c0a:	bf00      	nop
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40013800 	.word	0x40013800
 8002c1c:	40013c00 	.word	0x40013c00

08002c20 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	601a      	str	r2, [r3, #0]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	611a      	str	r2, [r3, #16]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	611a      	str	r2, [r3, #16]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01f      	beq.n	8002ce8 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7f1b      	ldrb	r3, [r3, #28]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d112      	bne.n	8002cd6 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d11f      	bne.n	8002cf8 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fa36 	bl	8003130 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 8002cd4:	e010      	b.n	8002cf8 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	60fb      	str	r3, [r7, #12]
}
 8002ce6:	e007      	b.n	8002cf8 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	60fb      	str	r3, [r7, #12]
}
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	601a      	str	r2, [r3, #0]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	460b      	mov	r3, r1
 8002d28:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d106      	bne.n	8002d3e <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f043 0201 	orr.w	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8002d3c:	e005      	b.n	8002d4a <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 0201 	bic.w	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	601a      	str	r2, [r3, #0]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d11f      	bne.n	8002da6 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a11      	ldr	r2, [pc, #68]	@ (8002db0 <I2C_PeriClockControl+0x5c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d106      	bne.n	8002d7c <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8002d6e:	4b11      	ldr	r3, [pc, #68]	@ (8002db4 <I2C_PeriClockControl+0x60>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	4a10      	ldr	r2, [pc, #64]	@ (8002db4 <I2C_PeriClockControl+0x60>)
 8002d74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d78:	6413      	str	r3, [r2, #64]	@ 0x40
	else
	{
		//TODO
	}

}
 8002d7a:	e014      	b.n	8002da6 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8002db8 <I2C_PeriClockControl+0x64>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d106      	bne.n	8002d92 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8002d84:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <I2C_PeriClockControl+0x60>)
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	4a0a      	ldr	r2, [pc, #40]	@ (8002db4 <I2C_PeriClockControl+0x60>)
 8002d8a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d8e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002d90:	e009      	b.n	8002da6 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a09      	ldr	r2, [pc, #36]	@ (8002dbc <I2C_PeriClockControl+0x68>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d105      	bne.n	8002da6 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8002d9a:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <I2C_PeriClockControl+0x60>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	4a05      	ldr	r2, [pc, #20]	@ (8002db4 <I2C_PeriClockControl+0x60>)
 8002da0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002da4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	40005400 	.word	0x40005400
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40005800 	.word	0x40005800
 8002dbc:	40005c00 	.word	0x40005c00

08002dc0 <I2C_Init>:
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ffbe 	bl	8002d54 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	7a5b      	ldrb	r3, [r3, #9]
 8002ddc:	029b      	lsls	r3, r3, #10
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8002df0:	f000 f9ba 	bl	8003168 <RCC_GetPCLK1Value>
 8002df4:	4603      	mov	r3, r0
 8002df6:	4a47      	ldr	r2, [pc, #284]	@ (8002f14 <I2C_Init+0x154>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	0c9b      	lsrs	r3, r3, #18
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002e0e:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	7a1b      	ldrb	r3, [r3, #8]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e26:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4a36      	ldr	r2, [pc, #216]	@ (8002f18 <I2C_Init+0x158>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d80f      	bhi.n	8002e62 <I2C_Init+0xa2>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8002e42:	f000 f991 	bl	8003168 <RCC_GetPCLK1Value>
 8002e46:	4602      	mov	r2, r0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e52:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8002e54:	897b      	ldrh	r3, [r7, #10]
 8002e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	e02c      	b.n	8002ebc <I2C_Init+0xfc>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e68:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	7a9b      	ldrb	r3, [r3, #10]
 8002e6e:	039b      	lsls	r3, r3, #14
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	7a9b      	ldrb	r3, [r3, #10]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <I2C_Init+0xd6>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8002e7e:	f000 f973 	bl	8003168 <RCC_GetPCLK1Value>
 8002e82:	4601      	mov	r1, r0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e92:	817b      	strh	r3, [r7, #10]
 8002e94:	e00c      	b.n	8002eb0 <I2C_Init+0xf0>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8002e96:	f000 f967 	bl	8003168 <RCC_GetPCLK1Value>
 8002e9a:	4601      	mov	r1, r0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009a      	lsls	r2, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eae:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8002eb0:	897b      	ldrh	r3, [r7, #10]
 8002eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4a13      	ldr	r2, [pc, #76]	@ (8002f18 <I2C_Init+0x158>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d809      	bhi.n	8002ee2 <I2C_Init+0x122>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8002ece:	f000 f94b 	bl	8003168 <RCC_GetPCLK1Value>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4a0f      	ldr	r2, [pc, #60]	@ (8002f14 <I2C_Init+0x154>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	0c9b      	lsrs	r3, r3, #18
 8002edc:	3301      	adds	r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e00d      	b.n	8002efe <I2C_Init+0x13e>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8002ee2:	f000 f941 	bl	8003168 <RCC_GetPCLK1Value>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002eec:	fb02 f303 	mul.w	r3, r2, r3
 8002ef0:	0a5b      	lsrs	r3, r3, #9
 8002ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8002f1c <I2C_Init+0x15c>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	09db      	lsrs	r3, r3, #7
 8002efa:	3301      	adds	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002f08:	621a      	str	r2, [r3, #32]

}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	431bde83 	.word	0x431bde83
 8002f18:	000186a0 	.word	0x000186a0
 8002f1c:	00044b83 	.word	0x00044b83

08002f20 <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr

08002f46 <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fe61 	bl	8002c20 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8002f5e:	bf00      	nop
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2101      	movs	r1, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff ffda 	bl	8002f20 <I2C_GetFlagStatus>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f6      	beq.n	8002f60 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fe5f 	bl	8002c3e <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8002f80:	bf00      	nop
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2102      	movs	r1, #2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ffc9 	bl	8002f20 <I2C_GetFlagStatus>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f6      	beq.n	8002f82 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f7ff fe7c 	bl	8002c92 <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8002f9a:	e014      	b.n	8002fc6 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8002f9c:	bf00      	nop
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2180      	movs	r1, #128	@ 0x80
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ffbb 	bl	8002f20 <I2C_GetFlagStatus>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f6      	beq.n	8002f9e <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	781a      	ldrb	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	60bb      	str	r3, [r7, #8]
		Len--;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1e7      	bne.n	8002f9c <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8002fcc:	bf00      	nop
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2180      	movs	r1, #128	@ 0x80
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ffa3 	bl	8002f20 <I2C_GetFlagStatus>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0f6      	beq.n	8002fce <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 8002fe0:	bf00      	nop
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2104      	movs	r1, #4
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff ff99 	bl	8002f20 <I2C_GetFlagStatus>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f6      	beq.n	8002fe2 <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8002ff4:	7e3b      	ldrb	r3, [r7, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d104      	bne.n	8003004 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fe7e 	bl	8002d00 <I2C_GenerateStopCondition>

}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	4611      	mov	r1, r2
 8003018:	461a      	mov	r2, r3
 800301a:	460b      	mov	r3, r1
 800301c:	71fb      	strb	r3, [r7, #7]
 800301e:	4613      	mov	r3, r2
 8003020:	71bb      	strb	r3, [r7, #6]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fdfa 	bl	8002c20 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 800302c:	bf00      	nop
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2101      	movs	r1, #1
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff73 	bl	8002f20 <I2C_GetFlagStatus>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f6      	beq.n	800302e <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	79ba      	ldrb	r2, [r7, #6]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fe0d 	bl	8002c68 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 800304e:	bf00      	nop
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2102      	movs	r1, #2
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff ff62 	bl	8002f20 <I2C_GetFlagStatus>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f6      	beq.n	8003050 <I2C_MasterReceiveData+0x44>


	//procedure to read only 1 byte from slave
	if(Len == 1)
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d121      	bne.n	80030ac <I2C_MasterReceiveData+0xa0>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f85e 	bl	8003130 <I2C_ManageAcking>


		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f7ff fe0c 	bl	8002c92 <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 800307a:	bf00      	nop
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2140      	movs	r1, #64	@ 0x40
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff ff4c 	bl	8002f20 <I2C_GetFlagStatus>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f6      	beq.n	800307c <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 800308e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d104      	bne.n	80030a0 <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fe30 	bl	8002d00 <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1)
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d930      	bls.n	8003114 <I2C_MasterReceiveData+0x108>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f7ff fded 	bl	8002c92 <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	e027      	b.n	800310e <I2C_MasterReceiveData+0x102>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 80030be:	bf00      	nop
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2140      	movs	r1, #64	@ 0x40
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff ff2a 	bl	8002f20 <I2C_GetFlagStatus>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f6      	beq.n	80030c0 <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d10e      	bne.n	80030f6 <I2C_MasterReceiveData+0xea>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2100      	movs	r1, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f826 	bl	8003130 <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 80030e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d104      	bne.n	80030f6 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fe05 	bl	8002d00 <I2C_GenerateStopCondition>

			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	3301      	adds	r3, #1
 8003106:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	3b01      	subs	r3, #1
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1d4      	bne.n	80030be <I2C_MasterReceiveData+0xb2>
		}

	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	7a5b      	ldrb	r3, [r3, #9]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d105      	bne.n	8003128 <I2C_MasterReceiveData+0x11c>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2101      	movs	r1, #1
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f804 	bl	8003130 <I2C_ManageAcking>
	}

}
 8003128:	bf00      	nop
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d106      	bne.n	8003150 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 800314e:	e005      	b.n	800315c <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	601a      	str	r2, [r3, #0]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr
	...

08003168 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 800316e:	4b25      	ldr	r3, [pc, #148]	@ (8003204 <RCC_GetPCLK1Value+0x9c>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	b2db      	uxtb	r3, r3
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 800317c:	7a7b      	ldrb	r3, [r7, #9]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d102      	bne.n	8003188 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8003182:	4b21      	ldr	r3, [pc, #132]	@ (8003208 <RCC_GetPCLK1Value+0xa0>)
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	e00b      	b.n	80031a0 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8003188:	7a7b      	ldrb	r3, [r7, #9]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d102      	bne.n	8003194 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800318e:	4b1f      	ldr	r3, [pc, #124]	@ (800320c <RCC_GetPCLK1Value+0xa4>)
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	e005      	b.n	80031a0 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8003194:	7a7b      	ldrb	r3, [r7, #9]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d102      	bne.n	80031a0 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 800319a:	f000 f88d 	bl	80032b8 <RCC_GetPLLOutputClock>
 800319e:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 80031a0:	4b18      	ldr	r3, [pc, #96]	@ (8003204 <RCC_GetPCLK1Value+0x9c>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 80031ae:	7a3b      	ldrb	r3, [r7, #8]
 80031b0:	2b07      	cmp	r3, #7
 80031b2:	d802      	bhi.n	80031ba <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80031b4:	2301      	movs	r3, #1
 80031b6:	72fb      	strb	r3, [r7, #11]
 80031b8:	e005      	b.n	80031c6 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 80031ba:	7a3b      	ldrb	r3, [r7, #8]
 80031bc:	3b08      	subs	r3, #8
 80031be:	4a14      	ldr	r2, [pc, #80]	@ (8003210 <RCC_GetPCLK1Value+0xa8>)
 80031c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031c4:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 80031c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003204 <RCC_GetPCLK1Value+0x9c>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	0a9b      	lsrs	r3, r3, #10
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 80031d4:	7a3b      	ldrb	r3, [r7, #8]
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d802      	bhi.n	80031e0 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80031da:	2301      	movs	r3, #1
 80031dc:	72bb      	strb	r3, [r7, #10]
 80031de:	e004      	b.n	80031ea <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 80031e0:	7a3b      	ldrb	r3, [r7, #8]
 80031e2:	3b04      	subs	r3, #4
 80031e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003214 <RCC_GetPCLK1Value+0xac>)
 80031e6:	5cd3      	ldrb	r3, [r2, r3]
 80031e8:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 80031ea:	7afb      	ldrb	r3, [r7, #11]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f2:	7abb      	ldrb	r3, [r7, #10]
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	607b      	str	r3, [r7, #4]

	return pclk1;
 80031fa:	687b      	ldr	r3, [r7, #4]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40023800 	.word	0x40023800
 8003208:	00f42400 	.word	0x00f42400
 800320c:	007a1200 	.word	0x007a1200
 8003210:	20000018 	.word	0x20000018
 8003214:	20000028 	.word	0x20000028

08003218 <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8003222:	4b20      	ldr	r3, [pc, #128]	@ (80032a4 <RCC_GetPCLK2Value+0x8c>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	089b      	lsrs	r3, r3, #2
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8003230:	7a7b      	ldrb	r3, [r7, #9]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d102      	bne.n	800323c <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 8003236:	4b1c      	ldr	r3, [pc, #112]	@ (80032a8 <RCC_GetPCLK2Value+0x90>)
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	e001      	b.n	8003240 <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 800323c:	4b1b      	ldr	r3, [pc, #108]	@ (80032ac <RCC_GetPCLK2Value+0x94>)
 800323e:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8003240:	4b18      	ldr	r3, [pc, #96]	@ (80032a4 <RCC_GetPCLK2Value+0x8c>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b07      	cmp	r3, #7
 8003250:	d802      	bhi.n	8003258 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 8003252:	2301      	movs	r3, #1
 8003254:	72fb      	strb	r3, [r7, #11]
 8003256:	e005      	b.n	8003264 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b08      	subs	r3, #8
 800325c:	4a14      	ldr	r2, [pc, #80]	@ (80032b0 <RCC_GetPCLK2Value+0x98>)
 800325e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003262:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8003264:	4b0f      	ldr	r3, [pc, #60]	@ (80032a4 <RCC_GetPCLK2Value+0x8c>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	0b5b      	lsrs	r3, r3, #13
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b03      	cmp	r3, #3
 8003274:	d802      	bhi.n	800327c <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8003276:	2301      	movs	r3, #1
 8003278:	72bb      	strb	r3, [r7, #10]
 800327a:	e004      	b.n	8003286 <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3b04      	subs	r3, #4
 8003280:	4a0c      	ldr	r2, [pc, #48]	@ (80032b4 <RCC_GetPCLK2Value+0x9c>)
 8003282:	5cd3      	ldrb	r3, [r2, r3]
 8003284:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8003286:	7afb      	ldrb	r3, [r7, #11]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	fbb2 f2f3 	udiv	r2, r2, r3
 800328e:	7abb      	ldrb	r3, [r7, #10]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	603b      	str	r3, [r7, #0]

	return pclk2;
 8003296:	683b      	ldr	r3, [r7, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800
 80032a8:	00f42400 	.word	0x00f42400
 80032ac:	007a1200 	.word	0x007a1200
 80032b0:	20000018 	.word	0x20000018
 80032b4:	20000028 	.word	0x20000028

080032b8 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0

	return 0;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <__cvt>:
 80032c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	461d      	mov	r5, r3
 80032d0:	4614      	mov	r4, r2
 80032d2:	bfbc      	itt	lt
 80032d4:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80032d8:	4614      	movlt	r4, r2
 80032da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80032dc:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80032de:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80032e2:	bfb6      	itet	lt
 80032e4:	461d      	movlt	r5, r3
 80032e6:	2300      	movge	r3, #0
 80032e8:	232d      	movlt	r3, #45	@ 0x2d
 80032ea:	7013      	strb	r3, [r2, #0]
 80032ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80032ee:	f023 0820 	bic.w	r8, r3, #32
 80032f2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80032f6:	d005      	beq.n	8003304 <__cvt+0x3e>
 80032f8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80032fc:	d100      	bne.n	8003300 <__cvt+0x3a>
 80032fe:	3601      	adds	r6, #1
 8003300:	2302      	movs	r3, #2
 8003302:	e000      	b.n	8003306 <__cvt+0x40>
 8003304:	2303      	movs	r3, #3
 8003306:	aa07      	add	r2, sp, #28
 8003308:	9204      	str	r2, [sp, #16]
 800330a:	aa06      	add	r2, sp, #24
 800330c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003310:	e9cd 3600 	strd	r3, r6, [sp]
 8003314:	4622      	mov	r2, r4
 8003316:	462b      	mov	r3, r5
 8003318:	f000 fe7e 	bl	8004018 <_dtoa_r>
 800331c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003320:	4607      	mov	r7, r0
 8003322:	d119      	bne.n	8003358 <__cvt+0x92>
 8003324:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003326:	07db      	lsls	r3, r3, #31
 8003328:	d50e      	bpl.n	8003348 <__cvt+0x82>
 800332a:	eb00 0906 	add.w	r9, r0, r6
 800332e:	2200      	movs	r2, #0
 8003330:	2300      	movs	r3, #0
 8003332:	4620      	mov	r0, r4
 8003334:	4629      	mov	r1, r5
 8003336:	f7fd fbc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800333a:	b108      	cbz	r0, 8003340 <__cvt+0x7a>
 800333c:	f8cd 901c 	str.w	r9, [sp, #28]
 8003340:	2230      	movs	r2, #48	@ 0x30
 8003342:	9b07      	ldr	r3, [sp, #28]
 8003344:	454b      	cmp	r3, r9
 8003346:	d31e      	bcc.n	8003386 <__cvt+0xc0>
 8003348:	9b07      	ldr	r3, [sp, #28]
 800334a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800334c:	1bdb      	subs	r3, r3, r7
 800334e:	4638      	mov	r0, r7
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	b008      	add	sp, #32
 8003354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003358:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800335c:	eb00 0906 	add.w	r9, r0, r6
 8003360:	d1e5      	bne.n	800332e <__cvt+0x68>
 8003362:	7803      	ldrb	r3, [r0, #0]
 8003364:	2b30      	cmp	r3, #48	@ 0x30
 8003366:	d10a      	bne.n	800337e <__cvt+0xb8>
 8003368:	2200      	movs	r2, #0
 800336a:	2300      	movs	r3, #0
 800336c:	4620      	mov	r0, r4
 800336e:	4629      	mov	r1, r5
 8003370:	f7fd fbaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8003374:	b918      	cbnz	r0, 800337e <__cvt+0xb8>
 8003376:	f1c6 0601 	rsb	r6, r6, #1
 800337a:	f8ca 6000 	str.w	r6, [sl]
 800337e:	f8da 3000 	ldr.w	r3, [sl]
 8003382:	4499      	add	r9, r3
 8003384:	e7d3      	b.n	800332e <__cvt+0x68>
 8003386:	1c59      	adds	r1, r3, #1
 8003388:	9107      	str	r1, [sp, #28]
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	e7d9      	b.n	8003342 <__cvt+0x7c>

0800338e <__exponent>:
 800338e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003390:	2900      	cmp	r1, #0
 8003392:	bfba      	itte	lt
 8003394:	4249      	neglt	r1, r1
 8003396:	232d      	movlt	r3, #45	@ 0x2d
 8003398:	232b      	movge	r3, #43	@ 0x2b
 800339a:	2909      	cmp	r1, #9
 800339c:	7002      	strb	r2, [r0, #0]
 800339e:	7043      	strb	r3, [r0, #1]
 80033a0:	dd29      	ble.n	80033f6 <__exponent+0x68>
 80033a2:	f10d 0307 	add.w	r3, sp, #7
 80033a6:	461d      	mov	r5, r3
 80033a8:	270a      	movs	r7, #10
 80033aa:	461a      	mov	r2, r3
 80033ac:	fbb1 f6f7 	udiv	r6, r1, r7
 80033b0:	fb07 1416 	mls	r4, r7, r6, r1
 80033b4:	3430      	adds	r4, #48	@ 0x30
 80033b6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80033ba:	460c      	mov	r4, r1
 80033bc:	2c63      	cmp	r4, #99	@ 0x63
 80033be:	f103 33ff 	add.w	r3, r3, #4294967295
 80033c2:	4631      	mov	r1, r6
 80033c4:	dcf1      	bgt.n	80033aa <__exponent+0x1c>
 80033c6:	3130      	adds	r1, #48	@ 0x30
 80033c8:	1e94      	subs	r4, r2, #2
 80033ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 80033ce:	1c41      	adds	r1, r0, #1
 80033d0:	4623      	mov	r3, r4
 80033d2:	42ab      	cmp	r3, r5
 80033d4:	d30a      	bcc.n	80033ec <__exponent+0x5e>
 80033d6:	f10d 0309 	add.w	r3, sp, #9
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	42ac      	cmp	r4, r5
 80033de:	bf88      	it	hi
 80033e0:	2300      	movhi	r3, #0
 80033e2:	3302      	adds	r3, #2
 80033e4:	4403      	add	r3, r0
 80033e6:	1a18      	subs	r0, r3, r0
 80033e8:	b003      	add	sp, #12
 80033ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ec:	f813 6b01 	ldrb.w	r6, [r3], #1
 80033f0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80033f4:	e7ed      	b.n	80033d2 <__exponent+0x44>
 80033f6:	2330      	movs	r3, #48	@ 0x30
 80033f8:	3130      	adds	r1, #48	@ 0x30
 80033fa:	7083      	strb	r3, [r0, #2]
 80033fc:	70c1      	strb	r1, [r0, #3]
 80033fe:	1d03      	adds	r3, r0, #4
 8003400:	e7f1      	b.n	80033e6 <__exponent+0x58>
	...

08003404 <_printf_float>:
 8003404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003408:	b091      	sub	sp, #68	@ 0x44
 800340a:	460c      	mov	r4, r1
 800340c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003410:	4616      	mov	r6, r2
 8003412:	461f      	mov	r7, r3
 8003414:	4605      	mov	r5, r0
 8003416:	f000 fcf1 	bl	8003dfc <_localeconv_r>
 800341a:	6803      	ldr	r3, [r0, #0]
 800341c:	9308      	str	r3, [sp, #32]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fc ff26 	bl	8000270 <strlen>
 8003424:	2300      	movs	r3, #0
 8003426:	930e      	str	r3, [sp, #56]	@ 0x38
 8003428:	f8d8 3000 	ldr.w	r3, [r8]
 800342c:	9009      	str	r0, [sp, #36]	@ 0x24
 800342e:	3307      	adds	r3, #7
 8003430:	f023 0307 	bic.w	r3, r3, #7
 8003434:	f103 0208 	add.w	r2, r3, #8
 8003438:	f894 a018 	ldrb.w	sl, [r4, #24]
 800343c:	f8d4 b000 	ldr.w	fp, [r4]
 8003440:	f8c8 2000 	str.w	r2, [r8]
 8003444:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003448:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800344c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800344e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003452:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003456:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800345a:	4b9d      	ldr	r3, [pc, #628]	@ (80036d0 <_printf_float+0x2cc>)
 800345c:	f04f 32ff 	mov.w	r2, #4294967295
 8003460:	f7fd fb64 	bl	8000b2c <__aeabi_dcmpun>
 8003464:	bb70      	cbnz	r0, 80034c4 <_printf_float+0xc0>
 8003466:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800346a:	4b99      	ldr	r3, [pc, #612]	@ (80036d0 <_printf_float+0x2cc>)
 800346c:	f04f 32ff 	mov.w	r2, #4294967295
 8003470:	f7fd fb3e 	bl	8000af0 <__aeabi_dcmple>
 8003474:	bb30      	cbnz	r0, 80034c4 <_printf_float+0xc0>
 8003476:	2200      	movs	r2, #0
 8003478:	2300      	movs	r3, #0
 800347a:	4640      	mov	r0, r8
 800347c:	4649      	mov	r1, r9
 800347e:	f7fd fb2d 	bl	8000adc <__aeabi_dcmplt>
 8003482:	b110      	cbz	r0, 800348a <_printf_float+0x86>
 8003484:	232d      	movs	r3, #45	@ 0x2d
 8003486:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800348a:	4a92      	ldr	r2, [pc, #584]	@ (80036d4 <_printf_float+0x2d0>)
 800348c:	4b92      	ldr	r3, [pc, #584]	@ (80036d8 <_printf_float+0x2d4>)
 800348e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003492:	bf8c      	ite	hi
 8003494:	4690      	movhi	r8, r2
 8003496:	4698      	movls	r8, r3
 8003498:	2303      	movs	r3, #3
 800349a:	6123      	str	r3, [r4, #16]
 800349c:	f02b 0304 	bic.w	r3, fp, #4
 80034a0:	6023      	str	r3, [r4, #0]
 80034a2:	f04f 0900 	mov.w	r9, #0
 80034a6:	9700      	str	r7, [sp, #0]
 80034a8:	4633      	mov	r3, r6
 80034aa:	aa0f      	add	r2, sp, #60	@ 0x3c
 80034ac:	4621      	mov	r1, r4
 80034ae:	4628      	mov	r0, r5
 80034b0:	f000 f9d4 	bl	800385c <_printf_common>
 80034b4:	3001      	adds	r0, #1
 80034b6:	f040 808f 	bne.w	80035d8 <_printf_float+0x1d4>
 80034ba:	f04f 30ff 	mov.w	r0, #4294967295
 80034be:	b011      	add	sp, #68	@ 0x44
 80034c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034c4:	4642      	mov	r2, r8
 80034c6:	464b      	mov	r3, r9
 80034c8:	4640      	mov	r0, r8
 80034ca:	4649      	mov	r1, r9
 80034cc:	f7fd fb2e 	bl	8000b2c <__aeabi_dcmpun>
 80034d0:	b140      	cbz	r0, 80034e4 <_printf_float+0xe0>
 80034d2:	464b      	mov	r3, r9
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	bfbc      	itt	lt
 80034d8:	232d      	movlt	r3, #45	@ 0x2d
 80034da:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80034de:	4a7f      	ldr	r2, [pc, #508]	@ (80036dc <_printf_float+0x2d8>)
 80034e0:	4b7f      	ldr	r3, [pc, #508]	@ (80036e0 <_printf_float+0x2dc>)
 80034e2:	e7d4      	b.n	800348e <_printf_float+0x8a>
 80034e4:	6863      	ldr	r3, [r4, #4]
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80034ec:	d13f      	bne.n	800356e <_printf_float+0x16a>
 80034ee:	2306      	movs	r3, #6
 80034f0:	6063      	str	r3, [r4, #4]
 80034f2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80034f6:	2200      	movs	r2, #0
 80034f8:	6023      	str	r3, [r4, #0]
 80034fa:	9206      	str	r2, [sp, #24]
 80034fc:	aa0e      	add	r2, sp, #56	@ 0x38
 80034fe:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003502:	aa0d      	add	r2, sp, #52	@ 0x34
 8003504:	9203      	str	r2, [sp, #12]
 8003506:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800350a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800350e:	6863      	ldr	r3, [r4, #4]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	4642      	mov	r2, r8
 8003514:	464b      	mov	r3, r9
 8003516:	4628      	mov	r0, r5
 8003518:	910a      	str	r1, [sp, #40]	@ 0x28
 800351a:	f7ff fed4 	bl	80032c6 <__cvt>
 800351e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003520:	2947      	cmp	r1, #71	@ 0x47
 8003522:	4680      	mov	r8, r0
 8003524:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003526:	d128      	bne.n	800357a <_printf_float+0x176>
 8003528:	1cc8      	adds	r0, r1, #3
 800352a:	db02      	blt.n	8003532 <_printf_float+0x12e>
 800352c:	6863      	ldr	r3, [r4, #4]
 800352e:	4299      	cmp	r1, r3
 8003530:	dd40      	ble.n	80035b4 <_printf_float+0x1b0>
 8003532:	f1aa 0a02 	sub.w	sl, sl, #2
 8003536:	fa5f fa8a 	uxtb.w	sl, sl
 800353a:	3901      	subs	r1, #1
 800353c:	4652      	mov	r2, sl
 800353e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003542:	910d      	str	r1, [sp, #52]	@ 0x34
 8003544:	f7ff ff23 	bl	800338e <__exponent>
 8003548:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800354a:	1813      	adds	r3, r2, r0
 800354c:	2a01      	cmp	r2, #1
 800354e:	4681      	mov	r9, r0
 8003550:	6123      	str	r3, [r4, #16]
 8003552:	dc02      	bgt.n	800355a <_printf_float+0x156>
 8003554:	6822      	ldr	r2, [r4, #0]
 8003556:	07d2      	lsls	r2, r2, #31
 8003558:	d501      	bpl.n	800355e <_printf_float+0x15a>
 800355a:	3301      	adds	r3, #1
 800355c:	6123      	str	r3, [r4, #16]
 800355e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003562:	2b00      	cmp	r3, #0
 8003564:	d09f      	beq.n	80034a6 <_printf_float+0xa2>
 8003566:	232d      	movs	r3, #45	@ 0x2d
 8003568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800356c:	e79b      	b.n	80034a6 <_printf_float+0xa2>
 800356e:	2947      	cmp	r1, #71	@ 0x47
 8003570:	d1bf      	bne.n	80034f2 <_printf_float+0xee>
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1bd      	bne.n	80034f2 <_printf_float+0xee>
 8003576:	2301      	movs	r3, #1
 8003578:	e7ba      	b.n	80034f0 <_printf_float+0xec>
 800357a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800357e:	d9dc      	bls.n	800353a <_printf_float+0x136>
 8003580:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003584:	d118      	bne.n	80035b8 <_printf_float+0x1b4>
 8003586:	2900      	cmp	r1, #0
 8003588:	6863      	ldr	r3, [r4, #4]
 800358a:	dd0b      	ble.n	80035a4 <_printf_float+0x1a0>
 800358c:	6121      	str	r1, [r4, #16]
 800358e:	b913      	cbnz	r3, 8003596 <_printf_float+0x192>
 8003590:	6822      	ldr	r2, [r4, #0]
 8003592:	07d0      	lsls	r0, r2, #31
 8003594:	d502      	bpl.n	800359c <_printf_float+0x198>
 8003596:	3301      	adds	r3, #1
 8003598:	440b      	add	r3, r1
 800359a:	6123      	str	r3, [r4, #16]
 800359c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800359e:	f04f 0900 	mov.w	r9, #0
 80035a2:	e7dc      	b.n	800355e <_printf_float+0x15a>
 80035a4:	b913      	cbnz	r3, 80035ac <_printf_float+0x1a8>
 80035a6:	6822      	ldr	r2, [r4, #0]
 80035a8:	07d2      	lsls	r2, r2, #31
 80035aa:	d501      	bpl.n	80035b0 <_printf_float+0x1ac>
 80035ac:	3302      	adds	r3, #2
 80035ae:	e7f4      	b.n	800359a <_printf_float+0x196>
 80035b0:	2301      	movs	r3, #1
 80035b2:	e7f2      	b.n	800359a <_printf_float+0x196>
 80035b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80035b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80035ba:	4299      	cmp	r1, r3
 80035bc:	db05      	blt.n	80035ca <_printf_float+0x1c6>
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	6121      	str	r1, [r4, #16]
 80035c2:	07d8      	lsls	r0, r3, #31
 80035c4:	d5ea      	bpl.n	800359c <_printf_float+0x198>
 80035c6:	1c4b      	adds	r3, r1, #1
 80035c8:	e7e7      	b.n	800359a <_printf_float+0x196>
 80035ca:	2900      	cmp	r1, #0
 80035cc:	bfd4      	ite	le
 80035ce:	f1c1 0202 	rsble	r2, r1, #2
 80035d2:	2201      	movgt	r2, #1
 80035d4:	4413      	add	r3, r2
 80035d6:	e7e0      	b.n	800359a <_printf_float+0x196>
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	055a      	lsls	r2, r3, #21
 80035dc:	d407      	bmi.n	80035ee <_printf_float+0x1ea>
 80035de:	6923      	ldr	r3, [r4, #16]
 80035e0:	4642      	mov	r2, r8
 80035e2:	4631      	mov	r1, r6
 80035e4:	4628      	mov	r0, r5
 80035e6:	47b8      	blx	r7
 80035e8:	3001      	adds	r0, #1
 80035ea:	d12b      	bne.n	8003644 <_printf_float+0x240>
 80035ec:	e765      	b.n	80034ba <_printf_float+0xb6>
 80035ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80035f2:	f240 80dd 	bls.w	80037b0 <_printf_float+0x3ac>
 80035f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80035fa:	2200      	movs	r2, #0
 80035fc:	2300      	movs	r3, #0
 80035fe:	f7fd fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 8003602:	2800      	cmp	r0, #0
 8003604:	d033      	beq.n	800366e <_printf_float+0x26a>
 8003606:	4a37      	ldr	r2, [pc, #220]	@ (80036e4 <_printf_float+0x2e0>)
 8003608:	2301      	movs	r3, #1
 800360a:	4631      	mov	r1, r6
 800360c:	4628      	mov	r0, r5
 800360e:	47b8      	blx	r7
 8003610:	3001      	adds	r0, #1
 8003612:	f43f af52 	beq.w	80034ba <_printf_float+0xb6>
 8003616:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800361a:	4543      	cmp	r3, r8
 800361c:	db02      	blt.n	8003624 <_printf_float+0x220>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	07d8      	lsls	r0, r3, #31
 8003622:	d50f      	bpl.n	8003644 <_printf_float+0x240>
 8003624:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003628:	4631      	mov	r1, r6
 800362a:	4628      	mov	r0, r5
 800362c:	47b8      	blx	r7
 800362e:	3001      	adds	r0, #1
 8003630:	f43f af43 	beq.w	80034ba <_printf_float+0xb6>
 8003634:	f04f 0900 	mov.w	r9, #0
 8003638:	f108 38ff 	add.w	r8, r8, #4294967295
 800363c:	f104 0a1a 	add.w	sl, r4, #26
 8003640:	45c8      	cmp	r8, r9
 8003642:	dc09      	bgt.n	8003658 <_printf_float+0x254>
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	079b      	lsls	r3, r3, #30
 8003648:	f100 8103 	bmi.w	8003852 <_printf_float+0x44e>
 800364c:	68e0      	ldr	r0, [r4, #12]
 800364e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003650:	4298      	cmp	r0, r3
 8003652:	bfb8      	it	lt
 8003654:	4618      	movlt	r0, r3
 8003656:	e732      	b.n	80034be <_printf_float+0xba>
 8003658:	2301      	movs	r3, #1
 800365a:	4652      	mov	r2, sl
 800365c:	4631      	mov	r1, r6
 800365e:	4628      	mov	r0, r5
 8003660:	47b8      	blx	r7
 8003662:	3001      	adds	r0, #1
 8003664:	f43f af29 	beq.w	80034ba <_printf_float+0xb6>
 8003668:	f109 0901 	add.w	r9, r9, #1
 800366c:	e7e8      	b.n	8003640 <_printf_float+0x23c>
 800366e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003670:	2b00      	cmp	r3, #0
 8003672:	dc39      	bgt.n	80036e8 <_printf_float+0x2e4>
 8003674:	4a1b      	ldr	r2, [pc, #108]	@ (80036e4 <_printf_float+0x2e0>)
 8003676:	2301      	movs	r3, #1
 8003678:	4631      	mov	r1, r6
 800367a:	4628      	mov	r0, r5
 800367c:	47b8      	blx	r7
 800367e:	3001      	adds	r0, #1
 8003680:	f43f af1b 	beq.w	80034ba <_printf_float+0xb6>
 8003684:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003688:	ea59 0303 	orrs.w	r3, r9, r3
 800368c:	d102      	bne.n	8003694 <_printf_float+0x290>
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	07d9      	lsls	r1, r3, #31
 8003692:	d5d7      	bpl.n	8003644 <_printf_float+0x240>
 8003694:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003698:	4631      	mov	r1, r6
 800369a:	4628      	mov	r0, r5
 800369c:	47b8      	blx	r7
 800369e:	3001      	adds	r0, #1
 80036a0:	f43f af0b 	beq.w	80034ba <_printf_float+0xb6>
 80036a4:	f04f 0a00 	mov.w	sl, #0
 80036a8:	f104 0b1a 	add.w	fp, r4, #26
 80036ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80036ae:	425b      	negs	r3, r3
 80036b0:	4553      	cmp	r3, sl
 80036b2:	dc01      	bgt.n	80036b8 <_printf_float+0x2b4>
 80036b4:	464b      	mov	r3, r9
 80036b6:	e793      	b.n	80035e0 <_printf_float+0x1dc>
 80036b8:	2301      	movs	r3, #1
 80036ba:	465a      	mov	r2, fp
 80036bc:	4631      	mov	r1, r6
 80036be:	4628      	mov	r0, r5
 80036c0:	47b8      	blx	r7
 80036c2:	3001      	adds	r0, #1
 80036c4:	f43f aef9 	beq.w	80034ba <_printf_float+0xb6>
 80036c8:	f10a 0a01 	add.w	sl, sl, #1
 80036cc:	e7ee      	b.n	80036ac <_printf_float+0x2a8>
 80036ce:	bf00      	nop
 80036d0:	7fefffff 	.word	0x7fefffff
 80036d4:	08006f14 	.word	0x08006f14
 80036d8:	08006f10 	.word	0x08006f10
 80036dc:	08006f1c 	.word	0x08006f1c
 80036e0:	08006f18 	.word	0x08006f18
 80036e4:	08006f20 	.word	0x08006f20
 80036e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036ea:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80036ee:	4553      	cmp	r3, sl
 80036f0:	bfa8      	it	ge
 80036f2:	4653      	movge	r3, sl
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	4699      	mov	r9, r3
 80036f8:	dc36      	bgt.n	8003768 <_printf_float+0x364>
 80036fa:	f04f 0b00 	mov.w	fp, #0
 80036fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003702:	f104 021a 	add.w	r2, r4, #26
 8003706:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003708:	930a      	str	r3, [sp, #40]	@ 0x28
 800370a:	eba3 0309 	sub.w	r3, r3, r9
 800370e:	455b      	cmp	r3, fp
 8003710:	dc31      	bgt.n	8003776 <_printf_float+0x372>
 8003712:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003714:	459a      	cmp	sl, r3
 8003716:	dc3a      	bgt.n	800378e <_printf_float+0x38a>
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	07da      	lsls	r2, r3, #31
 800371c:	d437      	bmi.n	800378e <_printf_float+0x38a>
 800371e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003720:	ebaa 0903 	sub.w	r9, sl, r3
 8003724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003726:	ebaa 0303 	sub.w	r3, sl, r3
 800372a:	4599      	cmp	r9, r3
 800372c:	bfa8      	it	ge
 800372e:	4699      	movge	r9, r3
 8003730:	f1b9 0f00 	cmp.w	r9, #0
 8003734:	dc33      	bgt.n	800379e <_printf_float+0x39a>
 8003736:	f04f 0800 	mov.w	r8, #0
 800373a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800373e:	f104 0b1a 	add.w	fp, r4, #26
 8003742:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003744:	ebaa 0303 	sub.w	r3, sl, r3
 8003748:	eba3 0309 	sub.w	r3, r3, r9
 800374c:	4543      	cmp	r3, r8
 800374e:	f77f af79 	ble.w	8003644 <_printf_float+0x240>
 8003752:	2301      	movs	r3, #1
 8003754:	465a      	mov	r2, fp
 8003756:	4631      	mov	r1, r6
 8003758:	4628      	mov	r0, r5
 800375a:	47b8      	blx	r7
 800375c:	3001      	adds	r0, #1
 800375e:	f43f aeac 	beq.w	80034ba <_printf_float+0xb6>
 8003762:	f108 0801 	add.w	r8, r8, #1
 8003766:	e7ec      	b.n	8003742 <_printf_float+0x33e>
 8003768:	4642      	mov	r2, r8
 800376a:	4631      	mov	r1, r6
 800376c:	4628      	mov	r0, r5
 800376e:	47b8      	blx	r7
 8003770:	3001      	adds	r0, #1
 8003772:	d1c2      	bne.n	80036fa <_printf_float+0x2f6>
 8003774:	e6a1      	b.n	80034ba <_printf_float+0xb6>
 8003776:	2301      	movs	r3, #1
 8003778:	4631      	mov	r1, r6
 800377a:	4628      	mov	r0, r5
 800377c:	920a      	str	r2, [sp, #40]	@ 0x28
 800377e:	47b8      	blx	r7
 8003780:	3001      	adds	r0, #1
 8003782:	f43f ae9a 	beq.w	80034ba <_printf_float+0xb6>
 8003786:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003788:	f10b 0b01 	add.w	fp, fp, #1
 800378c:	e7bb      	b.n	8003706 <_printf_float+0x302>
 800378e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003792:	4631      	mov	r1, r6
 8003794:	4628      	mov	r0, r5
 8003796:	47b8      	blx	r7
 8003798:	3001      	adds	r0, #1
 800379a:	d1c0      	bne.n	800371e <_printf_float+0x31a>
 800379c:	e68d      	b.n	80034ba <_printf_float+0xb6>
 800379e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80037a0:	464b      	mov	r3, r9
 80037a2:	4442      	add	r2, r8
 80037a4:	4631      	mov	r1, r6
 80037a6:	4628      	mov	r0, r5
 80037a8:	47b8      	blx	r7
 80037aa:	3001      	adds	r0, #1
 80037ac:	d1c3      	bne.n	8003736 <_printf_float+0x332>
 80037ae:	e684      	b.n	80034ba <_printf_float+0xb6>
 80037b0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80037b4:	f1ba 0f01 	cmp.w	sl, #1
 80037b8:	dc01      	bgt.n	80037be <_printf_float+0x3ba>
 80037ba:	07db      	lsls	r3, r3, #31
 80037bc:	d536      	bpl.n	800382c <_printf_float+0x428>
 80037be:	2301      	movs	r3, #1
 80037c0:	4642      	mov	r2, r8
 80037c2:	4631      	mov	r1, r6
 80037c4:	4628      	mov	r0, r5
 80037c6:	47b8      	blx	r7
 80037c8:	3001      	adds	r0, #1
 80037ca:	f43f ae76 	beq.w	80034ba <_printf_float+0xb6>
 80037ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80037d2:	4631      	mov	r1, r6
 80037d4:	4628      	mov	r0, r5
 80037d6:	47b8      	blx	r7
 80037d8:	3001      	adds	r0, #1
 80037da:	f43f ae6e 	beq.w	80034ba <_printf_float+0xb6>
 80037de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80037e2:	2200      	movs	r2, #0
 80037e4:	2300      	movs	r3, #0
 80037e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80037ea:	f7fd f96d 	bl	8000ac8 <__aeabi_dcmpeq>
 80037ee:	b9c0      	cbnz	r0, 8003822 <_printf_float+0x41e>
 80037f0:	4653      	mov	r3, sl
 80037f2:	f108 0201 	add.w	r2, r8, #1
 80037f6:	4631      	mov	r1, r6
 80037f8:	4628      	mov	r0, r5
 80037fa:	47b8      	blx	r7
 80037fc:	3001      	adds	r0, #1
 80037fe:	d10c      	bne.n	800381a <_printf_float+0x416>
 8003800:	e65b      	b.n	80034ba <_printf_float+0xb6>
 8003802:	2301      	movs	r3, #1
 8003804:	465a      	mov	r2, fp
 8003806:	4631      	mov	r1, r6
 8003808:	4628      	mov	r0, r5
 800380a:	47b8      	blx	r7
 800380c:	3001      	adds	r0, #1
 800380e:	f43f ae54 	beq.w	80034ba <_printf_float+0xb6>
 8003812:	f108 0801 	add.w	r8, r8, #1
 8003816:	45d0      	cmp	r8, sl
 8003818:	dbf3      	blt.n	8003802 <_printf_float+0x3fe>
 800381a:	464b      	mov	r3, r9
 800381c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003820:	e6df      	b.n	80035e2 <_printf_float+0x1de>
 8003822:	f04f 0800 	mov.w	r8, #0
 8003826:	f104 0b1a 	add.w	fp, r4, #26
 800382a:	e7f4      	b.n	8003816 <_printf_float+0x412>
 800382c:	2301      	movs	r3, #1
 800382e:	4642      	mov	r2, r8
 8003830:	e7e1      	b.n	80037f6 <_printf_float+0x3f2>
 8003832:	2301      	movs	r3, #1
 8003834:	464a      	mov	r2, r9
 8003836:	4631      	mov	r1, r6
 8003838:	4628      	mov	r0, r5
 800383a:	47b8      	blx	r7
 800383c:	3001      	adds	r0, #1
 800383e:	f43f ae3c 	beq.w	80034ba <_printf_float+0xb6>
 8003842:	f108 0801 	add.w	r8, r8, #1
 8003846:	68e3      	ldr	r3, [r4, #12]
 8003848:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800384a:	1a5b      	subs	r3, r3, r1
 800384c:	4543      	cmp	r3, r8
 800384e:	dcf0      	bgt.n	8003832 <_printf_float+0x42e>
 8003850:	e6fc      	b.n	800364c <_printf_float+0x248>
 8003852:	f04f 0800 	mov.w	r8, #0
 8003856:	f104 0919 	add.w	r9, r4, #25
 800385a:	e7f4      	b.n	8003846 <_printf_float+0x442>

0800385c <_printf_common>:
 800385c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003860:	4616      	mov	r6, r2
 8003862:	4698      	mov	r8, r3
 8003864:	688a      	ldr	r2, [r1, #8]
 8003866:	690b      	ldr	r3, [r1, #16]
 8003868:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800386c:	4293      	cmp	r3, r2
 800386e:	bfb8      	it	lt
 8003870:	4613      	movlt	r3, r2
 8003872:	6033      	str	r3, [r6, #0]
 8003874:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003878:	4607      	mov	r7, r0
 800387a:	460c      	mov	r4, r1
 800387c:	b10a      	cbz	r2, 8003882 <_printf_common+0x26>
 800387e:	3301      	adds	r3, #1
 8003880:	6033      	str	r3, [r6, #0]
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	0699      	lsls	r1, r3, #26
 8003886:	bf42      	ittt	mi
 8003888:	6833      	ldrmi	r3, [r6, #0]
 800388a:	3302      	addmi	r3, #2
 800388c:	6033      	strmi	r3, [r6, #0]
 800388e:	6825      	ldr	r5, [r4, #0]
 8003890:	f015 0506 	ands.w	r5, r5, #6
 8003894:	d106      	bne.n	80038a4 <_printf_common+0x48>
 8003896:	f104 0a19 	add.w	sl, r4, #25
 800389a:	68e3      	ldr	r3, [r4, #12]
 800389c:	6832      	ldr	r2, [r6, #0]
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	42ab      	cmp	r3, r5
 80038a2:	dc26      	bgt.n	80038f2 <_printf_common+0x96>
 80038a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038a8:	6822      	ldr	r2, [r4, #0]
 80038aa:	3b00      	subs	r3, #0
 80038ac:	bf18      	it	ne
 80038ae:	2301      	movne	r3, #1
 80038b0:	0692      	lsls	r2, r2, #26
 80038b2:	d42b      	bmi.n	800390c <_printf_common+0xb0>
 80038b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038b8:	4641      	mov	r1, r8
 80038ba:	4638      	mov	r0, r7
 80038bc:	47c8      	blx	r9
 80038be:	3001      	adds	r0, #1
 80038c0:	d01e      	beq.n	8003900 <_printf_common+0xa4>
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	6922      	ldr	r2, [r4, #16]
 80038c6:	f003 0306 	and.w	r3, r3, #6
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	bf02      	ittt	eq
 80038ce:	68e5      	ldreq	r5, [r4, #12]
 80038d0:	6833      	ldreq	r3, [r6, #0]
 80038d2:	1aed      	subeq	r5, r5, r3
 80038d4:	68a3      	ldr	r3, [r4, #8]
 80038d6:	bf0c      	ite	eq
 80038d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038dc:	2500      	movne	r5, #0
 80038de:	4293      	cmp	r3, r2
 80038e0:	bfc4      	itt	gt
 80038e2:	1a9b      	subgt	r3, r3, r2
 80038e4:	18ed      	addgt	r5, r5, r3
 80038e6:	2600      	movs	r6, #0
 80038e8:	341a      	adds	r4, #26
 80038ea:	42b5      	cmp	r5, r6
 80038ec:	d11a      	bne.n	8003924 <_printf_common+0xc8>
 80038ee:	2000      	movs	r0, #0
 80038f0:	e008      	b.n	8003904 <_printf_common+0xa8>
 80038f2:	2301      	movs	r3, #1
 80038f4:	4652      	mov	r2, sl
 80038f6:	4641      	mov	r1, r8
 80038f8:	4638      	mov	r0, r7
 80038fa:	47c8      	blx	r9
 80038fc:	3001      	adds	r0, #1
 80038fe:	d103      	bne.n	8003908 <_printf_common+0xac>
 8003900:	f04f 30ff 	mov.w	r0, #4294967295
 8003904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003908:	3501      	adds	r5, #1
 800390a:	e7c6      	b.n	800389a <_printf_common+0x3e>
 800390c:	18e1      	adds	r1, r4, r3
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	2030      	movs	r0, #48	@ 0x30
 8003912:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003916:	4422      	add	r2, r4
 8003918:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800391c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003920:	3302      	adds	r3, #2
 8003922:	e7c7      	b.n	80038b4 <_printf_common+0x58>
 8003924:	2301      	movs	r3, #1
 8003926:	4622      	mov	r2, r4
 8003928:	4641      	mov	r1, r8
 800392a:	4638      	mov	r0, r7
 800392c:	47c8      	blx	r9
 800392e:	3001      	adds	r0, #1
 8003930:	d0e6      	beq.n	8003900 <_printf_common+0xa4>
 8003932:	3601      	adds	r6, #1
 8003934:	e7d9      	b.n	80038ea <_printf_common+0x8e>
	...

08003938 <_printf_i>:
 8003938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800393c:	7e0f      	ldrb	r7, [r1, #24]
 800393e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003940:	2f78      	cmp	r7, #120	@ 0x78
 8003942:	4691      	mov	r9, r2
 8003944:	4680      	mov	r8, r0
 8003946:	460c      	mov	r4, r1
 8003948:	469a      	mov	sl, r3
 800394a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800394e:	d807      	bhi.n	8003960 <_printf_i+0x28>
 8003950:	2f62      	cmp	r7, #98	@ 0x62
 8003952:	d80a      	bhi.n	800396a <_printf_i+0x32>
 8003954:	2f00      	cmp	r7, #0
 8003956:	f000 80d1 	beq.w	8003afc <_printf_i+0x1c4>
 800395a:	2f58      	cmp	r7, #88	@ 0x58
 800395c:	f000 80b8 	beq.w	8003ad0 <_printf_i+0x198>
 8003960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003964:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003968:	e03a      	b.n	80039e0 <_printf_i+0xa8>
 800396a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800396e:	2b15      	cmp	r3, #21
 8003970:	d8f6      	bhi.n	8003960 <_printf_i+0x28>
 8003972:	a101      	add	r1, pc, #4	@ (adr r1, 8003978 <_printf_i+0x40>)
 8003974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003978:	080039d1 	.word	0x080039d1
 800397c:	080039e5 	.word	0x080039e5
 8003980:	08003961 	.word	0x08003961
 8003984:	08003961 	.word	0x08003961
 8003988:	08003961 	.word	0x08003961
 800398c:	08003961 	.word	0x08003961
 8003990:	080039e5 	.word	0x080039e5
 8003994:	08003961 	.word	0x08003961
 8003998:	08003961 	.word	0x08003961
 800399c:	08003961 	.word	0x08003961
 80039a0:	08003961 	.word	0x08003961
 80039a4:	08003ae3 	.word	0x08003ae3
 80039a8:	08003a0f 	.word	0x08003a0f
 80039ac:	08003a9d 	.word	0x08003a9d
 80039b0:	08003961 	.word	0x08003961
 80039b4:	08003961 	.word	0x08003961
 80039b8:	08003b05 	.word	0x08003b05
 80039bc:	08003961 	.word	0x08003961
 80039c0:	08003a0f 	.word	0x08003a0f
 80039c4:	08003961 	.word	0x08003961
 80039c8:	08003961 	.word	0x08003961
 80039cc:	08003aa5 	.word	0x08003aa5
 80039d0:	6833      	ldr	r3, [r6, #0]
 80039d2:	1d1a      	adds	r2, r3, #4
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6032      	str	r2, [r6, #0]
 80039d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039e0:	2301      	movs	r3, #1
 80039e2:	e09c      	b.n	8003b1e <_printf_i+0x1e6>
 80039e4:	6833      	ldr	r3, [r6, #0]
 80039e6:	6820      	ldr	r0, [r4, #0]
 80039e8:	1d19      	adds	r1, r3, #4
 80039ea:	6031      	str	r1, [r6, #0]
 80039ec:	0606      	lsls	r6, r0, #24
 80039ee:	d501      	bpl.n	80039f4 <_printf_i+0xbc>
 80039f0:	681d      	ldr	r5, [r3, #0]
 80039f2:	e003      	b.n	80039fc <_printf_i+0xc4>
 80039f4:	0645      	lsls	r5, r0, #25
 80039f6:	d5fb      	bpl.n	80039f0 <_printf_i+0xb8>
 80039f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039fc:	2d00      	cmp	r5, #0
 80039fe:	da03      	bge.n	8003a08 <_printf_i+0xd0>
 8003a00:	232d      	movs	r3, #45	@ 0x2d
 8003a02:	426d      	negs	r5, r5
 8003a04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a08:	4858      	ldr	r0, [pc, #352]	@ (8003b6c <_printf_i+0x234>)
 8003a0a:	230a      	movs	r3, #10
 8003a0c:	e011      	b.n	8003a32 <_printf_i+0xfa>
 8003a0e:	6821      	ldr	r1, [r4, #0]
 8003a10:	6833      	ldr	r3, [r6, #0]
 8003a12:	0608      	lsls	r0, r1, #24
 8003a14:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a18:	d402      	bmi.n	8003a20 <_printf_i+0xe8>
 8003a1a:	0649      	lsls	r1, r1, #25
 8003a1c:	bf48      	it	mi
 8003a1e:	b2ad      	uxthmi	r5, r5
 8003a20:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a22:	4852      	ldr	r0, [pc, #328]	@ (8003b6c <_printf_i+0x234>)
 8003a24:	6033      	str	r3, [r6, #0]
 8003a26:	bf14      	ite	ne
 8003a28:	230a      	movne	r3, #10
 8003a2a:	2308      	moveq	r3, #8
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a32:	6866      	ldr	r6, [r4, #4]
 8003a34:	60a6      	str	r6, [r4, #8]
 8003a36:	2e00      	cmp	r6, #0
 8003a38:	db05      	blt.n	8003a46 <_printf_i+0x10e>
 8003a3a:	6821      	ldr	r1, [r4, #0]
 8003a3c:	432e      	orrs	r6, r5
 8003a3e:	f021 0104 	bic.w	r1, r1, #4
 8003a42:	6021      	str	r1, [r4, #0]
 8003a44:	d04b      	beq.n	8003ade <_printf_i+0x1a6>
 8003a46:	4616      	mov	r6, r2
 8003a48:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a4c:	fb03 5711 	mls	r7, r3, r1, r5
 8003a50:	5dc7      	ldrb	r7, [r0, r7]
 8003a52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a56:	462f      	mov	r7, r5
 8003a58:	42bb      	cmp	r3, r7
 8003a5a:	460d      	mov	r5, r1
 8003a5c:	d9f4      	bls.n	8003a48 <_printf_i+0x110>
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d10b      	bne.n	8003a7a <_printf_i+0x142>
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	07df      	lsls	r7, r3, #31
 8003a66:	d508      	bpl.n	8003a7a <_printf_i+0x142>
 8003a68:	6923      	ldr	r3, [r4, #16]
 8003a6a:	6861      	ldr	r1, [r4, #4]
 8003a6c:	4299      	cmp	r1, r3
 8003a6e:	bfde      	ittt	le
 8003a70:	2330      	movle	r3, #48	@ 0x30
 8003a72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a7a:	1b92      	subs	r2, r2, r6
 8003a7c:	6122      	str	r2, [r4, #16]
 8003a7e:	f8cd a000 	str.w	sl, [sp]
 8003a82:	464b      	mov	r3, r9
 8003a84:	aa03      	add	r2, sp, #12
 8003a86:	4621      	mov	r1, r4
 8003a88:	4640      	mov	r0, r8
 8003a8a:	f7ff fee7 	bl	800385c <_printf_common>
 8003a8e:	3001      	adds	r0, #1
 8003a90:	d14a      	bne.n	8003b28 <_printf_i+0x1f0>
 8003a92:	f04f 30ff 	mov.w	r0, #4294967295
 8003a96:	b004      	add	sp, #16
 8003a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	f043 0320 	orr.w	r3, r3, #32
 8003aa2:	6023      	str	r3, [r4, #0]
 8003aa4:	4832      	ldr	r0, [pc, #200]	@ (8003b70 <_printf_i+0x238>)
 8003aa6:	2778      	movs	r7, #120	@ 0x78
 8003aa8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	6831      	ldr	r1, [r6, #0]
 8003ab0:	061f      	lsls	r7, r3, #24
 8003ab2:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ab6:	d402      	bmi.n	8003abe <_printf_i+0x186>
 8003ab8:	065f      	lsls	r7, r3, #25
 8003aba:	bf48      	it	mi
 8003abc:	b2ad      	uxthmi	r5, r5
 8003abe:	6031      	str	r1, [r6, #0]
 8003ac0:	07d9      	lsls	r1, r3, #31
 8003ac2:	bf44      	itt	mi
 8003ac4:	f043 0320 	orrmi.w	r3, r3, #32
 8003ac8:	6023      	strmi	r3, [r4, #0]
 8003aca:	b11d      	cbz	r5, 8003ad4 <_printf_i+0x19c>
 8003acc:	2310      	movs	r3, #16
 8003ace:	e7ad      	b.n	8003a2c <_printf_i+0xf4>
 8003ad0:	4826      	ldr	r0, [pc, #152]	@ (8003b6c <_printf_i+0x234>)
 8003ad2:	e7e9      	b.n	8003aa8 <_printf_i+0x170>
 8003ad4:	6823      	ldr	r3, [r4, #0]
 8003ad6:	f023 0320 	bic.w	r3, r3, #32
 8003ada:	6023      	str	r3, [r4, #0]
 8003adc:	e7f6      	b.n	8003acc <_printf_i+0x194>
 8003ade:	4616      	mov	r6, r2
 8003ae0:	e7bd      	b.n	8003a5e <_printf_i+0x126>
 8003ae2:	6833      	ldr	r3, [r6, #0]
 8003ae4:	6825      	ldr	r5, [r4, #0]
 8003ae6:	6961      	ldr	r1, [r4, #20]
 8003ae8:	1d18      	adds	r0, r3, #4
 8003aea:	6030      	str	r0, [r6, #0]
 8003aec:	062e      	lsls	r6, r5, #24
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	d501      	bpl.n	8003af6 <_printf_i+0x1be>
 8003af2:	6019      	str	r1, [r3, #0]
 8003af4:	e002      	b.n	8003afc <_printf_i+0x1c4>
 8003af6:	0668      	lsls	r0, r5, #25
 8003af8:	d5fb      	bpl.n	8003af2 <_printf_i+0x1ba>
 8003afa:	8019      	strh	r1, [r3, #0]
 8003afc:	2300      	movs	r3, #0
 8003afe:	6123      	str	r3, [r4, #16]
 8003b00:	4616      	mov	r6, r2
 8003b02:	e7bc      	b.n	8003a7e <_printf_i+0x146>
 8003b04:	6833      	ldr	r3, [r6, #0]
 8003b06:	1d1a      	adds	r2, r3, #4
 8003b08:	6032      	str	r2, [r6, #0]
 8003b0a:	681e      	ldr	r6, [r3, #0]
 8003b0c:	6862      	ldr	r2, [r4, #4]
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4630      	mov	r0, r6
 8003b12:	f7fc fb5d 	bl	80001d0 <memchr>
 8003b16:	b108      	cbz	r0, 8003b1c <_printf_i+0x1e4>
 8003b18:	1b80      	subs	r0, r0, r6
 8003b1a:	6060      	str	r0, [r4, #4]
 8003b1c:	6863      	ldr	r3, [r4, #4]
 8003b1e:	6123      	str	r3, [r4, #16]
 8003b20:	2300      	movs	r3, #0
 8003b22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b26:	e7aa      	b.n	8003a7e <_printf_i+0x146>
 8003b28:	6923      	ldr	r3, [r4, #16]
 8003b2a:	4632      	mov	r2, r6
 8003b2c:	4649      	mov	r1, r9
 8003b2e:	4640      	mov	r0, r8
 8003b30:	47d0      	blx	sl
 8003b32:	3001      	adds	r0, #1
 8003b34:	d0ad      	beq.n	8003a92 <_printf_i+0x15a>
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	079b      	lsls	r3, r3, #30
 8003b3a:	d413      	bmi.n	8003b64 <_printf_i+0x22c>
 8003b3c:	68e0      	ldr	r0, [r4, #12]
 8003b3e:	9b03      	ldr	r3, [sp, #12]
 8003b40:	4298      	cmp	r0, r3
 8003b42:	bfb8      	it	lt
 8003b44:	4618      	movlt	r0, r3
 8003b46:	e7a6      	b.n	8003a96 <_printf_i+0x15e>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	4632      	mov	r2, r6
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	4640      	mov	r0, r8
 8003b50:	47d0      	blx	sl
 8003b52:	3001      	adds	r0, #1
 8003b54:	d09d      	beq.n	8003a92 <_printf_i+0x15a>
 8003b56:	3501      	adds	r5, #1
 8003b58:	68e3      	ldr	r3, [r4, #12]
 8003b5a:	9903      	ldr	r1, [sp, #12]
 8003b5c:	1a5b      	subs	r3, r3, r1
 8003b5e:	42ab      	cmp	r3, r5
 8003b60:	dcf2      	bgt.n	8003b48 <_printf_i+0x210>
 8003b62:	e7eb      	b.n	8003b3c <_printf_i+0x204>
 8003b64:	2500      	movs	r5, #0
 8003b66:	f104 0619 	add.w	r6, r4, #25
 8003b6a:	e7f5      	b.n	8003b58 <_printf_i+0x220>
 8003b6c:	08006f22 	.word	0x08006f22
 8003b70:	08006f33 	.word	0x08006f33

08003b74 <std>:
 8003b74:	2300      	movs	r3, #0
 8003b76:	b510      	push	{r4, lr}
 8003b78:	4604      	mov	r4, r0
 8003b7a:	e9c0 3300 	strd	r3, r3, [r0]
 8003b7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b82:	6083      	str	r3, [r0, #8]
 8003b84:	8181      	strh	r1, [r0, #12]
 8003b86:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b88:	81c2      	strh	r2, [r0, #14]
 8003b8a:	6183      	str	r3, [r0, #24]
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	2208      	movs	r2, #8
 8003b90:	305c      	adds	r0, #92	@ 0x5c
 8003b92:	f000 f92a 	bl	8003dea <memset>
 8003b96:	4b0d      	ldr	r3, [pc, #52]	@ (8003bcc <std+0x58>)
 8003b98:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd0 <std+0x5c>)
 8003b9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd4 <std+0x60>)
 8003ba0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd8 <std+0x64>)
 8003ba4:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bdc <std+0x68>)
 8003ba8:	6224      	str	r4, [r4, #32]
 8003baa:	429c      	cmp	r4, r3
 8003bac:	d006      	beq.n	8003bbc <std+0x48>
 8003bae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003bb2:	4294      	cmp	r4, r2
 8003bb4:	d002      	beq.n	8003bbc <std+0x48>
 8003bb6:	33d0      	adds	r3, #208	@ 0xd0
 8003bb8:	429c      	cmp	r4, r3
 8003bba:	d105      	bne.n	8003bc8 <std+0x54>
 8003bbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bc4:	f000 b98e 	b.w	8003ee4 <__retarget_lock_init_recursive>
 8003bc8:	bd10      	pop	{r4, pc}
 8003bca:	bf00      	nop
 8003bcc:	08003d65 	.word	0x08003d65
 8003bd0:	08003d87 	.word	0x08003d87
 8003bd4:	08003dbf 	.word	0x08003dbf
 8003bd8:	08003de3 	.word	0x08003de3
 8003bdc:	200004e4 	.word	0x200004e4

08003be0 <stdio_exit_handler>:
 8003be0:	4a02      	ldr	r2, [pc, #8]	@ (8003bec <stdio_exit_handler+0xc>)
 8003be2:	4903      	ldr	r1, [pc, #12]	@ (8003bf0 <stdio_exit_handler+0x10>)
 8003be4:	4803      	ldr	r0, [pc, #12]	@ (8003bf4 <stdio_exit_handler+0x14>)
 8003be6:	f000 b869 	b.w	8003cbc <_fwalk_sglue>
 8003bea:	bf00      	nop
 8003bec:	2000002c 	.word	0x2000002c
 8003bf0:	08005859 	.word	0x08005859
 8003bf4:	2000003c 	.word	0x2000003c

08003bf8 <cleanup_stdio>:
 8003bf8:	6841      	ldr	r1, [r0, #4]
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8003c2c <cleanup_stdio+0x34>)
 8003bfc:	4299      	cmp	r1, r3
 8003bfe:	b510      	push	{r4, lr}
 8003c00:	4604      	mov	r4, r0
 8003c02:	d001      	beq.n	8003c08 <cleanup_stdio+0x10>
 8003c04:	f001 fe28 	bl	8005858 <_fflush_r>
 8003c08:	68a1      	ldr	r1, [r4, #8]
 8003c0a:	4b09      	ldr	r3, [pc, #36]	@ (8003c30 <cleanup_stdio+0x38>)
 8003c0c:	4299      	cmp	r1, r3
 8003c0e:	d002      	beq.n	8003c16 <cleanup_stdio+0x1e>
 8003c10:	4620      	mov	r0, r4
 8003c12:	f001 fe21 	bl	8005858 <_fflush_r>
 8003c16:	68e1      	ldr	r1, [r4, #12]
 8003c18:	4b06      	ldr	r3, [pc, #24]	@ (8003c34 <cleanup_stdio+0x3c>)
 8003c1a:	4299      	cmp	r1, r3
 8003c1c:	d004      	beq.n	8003c28 <cleanup_stdio+0x30>
 8003c1e:	4620      	mov	r0, r4
 8003c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c24:	f001 be18 	b.w	8005858 <_fflush_r>
 8003c28:	bd10      	pop	{r4, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200004e4 	.word	0x200004e4
 8003c30:	2000054c 	.word	0x2000054c
 8003c34:	200005b4 	.word	0x200005b4

08003c38 <global_stdio_init.part.0>:
 8003c38:	b510      	push	{r4, lr}
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c68 <global_stdio_init.part.0+0x30>)
 8003c3c:	4c0b      	ldr	r4, [pc, #44]	@ (8003c6c <global_stdio_init.part.0+0x34>)
 8003c3e:	4a0c      	ldr	r2, [pc, #48]	@ (8003c70 <global_stdio_init.part.0+0x38>)
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	4620      	mov	r0, r4
 8003c44:	2200      	movs	r2, #0
 8003c46:	2104      	movs	r1, #4
 8003c48:	f7ff ff94 	bl	8003b74 <std>
 8003c4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c50:	2201      	movs	r2, #1
 8003c52:	2109      	movs	r1, #9
 8003c54:	f7ff ff8e 	bl	8003b74 <std>
 8003c58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c62:	2112      	movs	r1, #18
 8003c64:	f7ff bf86 	b.w	8003b74 <std>
 8003c68:	2000061c 	.word	0x2000061c
 8003c6c:	200004e4 	.word	0x200004e4
 8003c70:	08003be1 	.word	0x08003be1

08003c74 <__sfp_lock_acquire>:
 8003c74:	4801      	ldr	r0, [pc, #4]	@ (8003c7c <__sfp_lock_acquire+0x8>)
 8003c76:	f000 b936 	b.w	8003ee6 <__retarget_lock_acquire_recursive>
 8003c7a:	bf00      	nop
 8003c7c:	20000625 	.word	0x20000625

08003c80 <__sfp_lock_release>:
 8003c80:	4801      	ldr	r0, [pc, #4]	@ (8003c88 <__sfp_lock_release+0x8>)
 8003c82:	f000 b931 	b.w	8003ee8 <__retarget_lock_release_recursive>
 8003c86:	bf00      	nop
 8003c88:	20000625 	.word	0x20000625

08003c8c <__sinit>:
 8003c8c:	b510      	push	{r4, lr}
 8003c8e:	4604      	mov	r4, r0
 8003c90:	f7ff fff0 	bl	8003c74 <__sfp_lock_acquire>
 8003c94:	6a23      	ldr	r3, [r4, #32]
 8003c96:	b11b      	cbz	r3, 8003ca0 <__sinit+0x14>
 8003c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c9c:	f7ff bff0 	b.w	8003c80 <__sfp_lock_release>
 8003ca0:	4b04      	ldr	r3, [pc, #16]	@ (8003cb4 <__sinit+0x28>)
 8003ca2:	6223      	str	r3, [r4, #32]
 8003ca4:	4b04      	ldr	r3, [pc, #16]	@ (8003cb8 <__sinit+0x2c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1f5      	bne.n	8003c98 <__sinit+0xc>
 8003cac:	f7ff ffc4 	bl	8003c38 <global_stdio_init.part.0>
 8003cb0:	e7f2      	b.n	8003c98 <__sinit+0xc>
 8003cb2:	bf00      	nop
 8003cb4:	08003bf9 	.word	0x08003bf9
 8003cb8:	2000061c 	.word	0x2000061c

08003cbc <_fwalk_sglue>:
 8003cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cc0:	4607      	mov	r7, r0
 8003cc2:	4688      	mov	r8, r1
 8003cc4:	4614      	mov	r4, r2
 8003cc6:	2600      	movs	r6, #0
 8003cc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ccc:	f1b9 0901 	subs.w	r9, r9, #1
 8003cd0:	d505      	bpl.n	8003cde <_fwalk_sglue+0x22>
 8003cd2:	6824      	ldr	r4, [r4, #0]
 8003cd4:	2c00      	cmp	r4, #0
 8003cd6:	d1f7      	bne.n	8003cc8 <_fwalk_sglue+0xc>
 8003cd8:	4630      	mov	r0, r6
 8003cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cde:	89ab      	ldrh	r3, [r5, #12]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d907      	bls.n	8003cf4 <_fwalk_sglue+0x38>
 8003ce4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	d003      	beq.n	8003cf4 <_fwalk_sglue+0x38>
 8003cec:	4629      	mov	r1, r5
 8003cee:	4638      	mov	r0, r7
 8003cf0:	47c0      	blx	r8
 8003cf2:	4306      	orrs	r6, r0
 8003cf4:	3568      	adds	r5, #104	@ 0x68
 8003cf6:	e7e9      	b.n	8003ccc <_fwalk_sglue+0x10>

08003cf8 <sniprintf>:
 8003cf8:	b40c      	push	{r2, r3}
 8003cfa:	b530      	push	{r4, r5, lr}
 8003cfc:	4b18      	ldr	r3, [pc, #96]	@ (8003d60 <sniprintf+0x68>)
 8003cfe:	1e0c      	subs	r4, r1, #0
 8003d00:	681d      	ldr	r5, [r3, #0]
 8003d02:	b09d      	sub	sp, #116	@ 0x74
 8003d04:	da08      	bge.n	8003d18 <sniprintf+0x20>
 8003d06:	238b      	movs	r3, #139	@ 0x8b
 8003d08:	602b      	str	r3, [r5, #0]
 8003d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0e:	b01d      	add	sp, #116	@ 0x74
 8003d10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d14:	b002      	add	sp, #8
 8003d16:	4770      	bx	lr
 8003d18:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003d1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003d26:	bf14      	ite	ne
 8003d28:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003d2c:	4623      	moveq	r3, r4
 8003d2e:	9304      	str	r3, [sp, #16]
 8003d30:	9307      	str	r3, [sp, #28]
 8003d32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d36:	9002      	str	r0, [sp, #8]
 8003d38:	9006      	str	r0, [sp, #24]
 8003d3a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003d3e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003d40:	ab21      	add	r3, sp, #132	@ 0x84
 8003d42:	a902      	add	r1, sp, #8
 8003d44:	4628      	mov	r0, r5
 8003d46:	9301      	str	r3, [sp, #4]
 8003d48:	f001 fc0a 	bl	8005560 <_svfiprintf_r>
 8003d4c:	1c43      	adds	r3, r0, #1
 8003d4e:	bfbc      	itt	lt
 8003d50:	238b      	movlt	r3, #139	@ 0x8b
 8003d52:	602b      	strlt	r3, [r5, #0]
 8003d54:	2c00      	cmp	r4, #0
 8003d56:	d0da      	beq.n	8003d0e <sniprintf+0x16>
 8003d58:	9b02      	ldr	r3, [sp, #8]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	e7d6      	b.n	8003d0e <sniprintf+0x16>
 8003d60:	20000038 	.word	0x20000038

08003d64 <__sread>:
 8003d64:	b510      	push	{r4, lr}
 8003d66:	460c      	mov	r4, r1
 8003d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d6c:	f000 f86c 	bl	8003e48 <_read_r>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	bfab      	itete	ge
 8003d74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003d76:	89a3      	ldrhlt	r3, [r4, #12]
 8003d78:	181b      	addge	r3, r3, r0
 8003d7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d7e:	bfac      	ite	ge
 8003d80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003d82:	81a3      	strhlt	r3, [r4, #12]
 8003d84:	bd10      	pop	{r4, pc}

08003d86 <__swrite>:
 8003d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d8a:	461f      	mov	r7, r3
 8003d8c:	898b      	ldrh	r3, [r1, #12]
 8003d8e:	05db      	lsls	r3, r3, #23
 8003d90:	4605      	mov	r5, r0
 8003d92:	460c      	mov	r4, r1
 8003d94:	4616      	mov	r6, r2
 8003d96:	d505      	bpl.n	8003da4 <__swrite+0x1e>
 8003d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f000 f840 	bl	8003e24 <_lseek_r>
 8003da4:	89a3      	ldrh	r3, [r4, #12]
 8003da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003daa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dae:	81a3      	strh	r3, [r4, #12]
 8003db0:	4632      	mov	r2, r6
 8003db2:	463b      	mov	r3, r7
 8003db4:	4628      	mov	r0, r5
 8003db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dba:	f000 b857 	b.w	8003e6c <_write_r>

08003dbe <__sseek>:
 8003dbe:	b510      	push	{r4, lr}
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dc6:	f000 f82d 	bl	8003e24 <_lseek_r>
 8003dca:	1c43      	adds	r3, r0, #1
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	bf15      	itete	ne
 8003dd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003dd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003dd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003dda:	81a3      	strheq	r3, [r4, #12]
 8003ddc:	bf18      	it	ne
 8003dde:	81a3      	strhne	r3, [r4, #12]
 8003de0:	bd10      	pop	{r4, pc}

08003de2 <__sclose>:
 8003de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de6:	f000 b80d 	b.w	8003e04 <_close_r>

08003dea <memset>:
 8003dea:	4402      	add	r2, r0
 8003dec:	4603      	mov	r3, r0
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d100      	bne.n	8003df4 <memset+0xa>
 8003df2:	4770      	bx	lr
 8003df4:	f803 1b01 	strb.w	r1, [r3], #1
 8003df8:	e7f9      	b.n	8003dee <memset+0x4>
	...

08003dfc <_localeconv_r>:
 8003dfc:	4800      	ldr	r0, [pc, #0]	@ (8003e00 <_localeconv_r+0x4>)
 8003dfe:	4770      	bx	lr
 8003e00:	20000178 	.word	0x20000178

08003e04 <_close_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4d06      	ldr	r5, [pc, #24]	@ (8003e20 <_close_r+0x1c>)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	f7fd fde3 	bl	80019da <_close>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d102      	bne.n	8003e1e <_close_r+0x1a>
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	b103      	cbz	r3, 8003e1e <_close_r+0x1a>
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	20000620 	.word	0x20000620

08003e24 <_lseek_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4d07      	ldr	r5, [pc, #28]	@ (8003e44 <_lseek_r+0x20>)
 8003e28:	4604      	mov	r4, r0
 8003e2a:	4608      	mov	r0, r1
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	2200      	movs	r2, #0
 8003e30:	602a      	str	r2, [r5, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f7fd fdf5 	bl	8001a22 <_lseek>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d102      	bne.n	8003e42 <_lseek_r+0x1e>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	b103      	cbz	r3, 8003e42 <_lseek_r+0x1e>
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
 8003e44:	20000620 	.word	0x20000620

08003e48 <_read_r>:
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	4d07      	ldr	r5, [pc, #28]	@ (8003e68 <_read_r+0x20>)
 8003e4c:	4604      	mov	r4, r0
 8003e4e:	4608      	mov	r0, r1
 8003e50:	4611      	mov	r1, r2
 8003e52:	2200      	movs	r2, #0
 8003e54:	602a      	str	r2, [r5, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	f7fd fd86 	bl	8001968 <_read>
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	d102      	bne.n	8003e66 <_read_r+0x1e>
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	b103      	cbz	r3, 8003e66 <_read_r+0x1e>
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	bd38      	pop	{r3, r4, r5, pc}
 8003e68:	20000620 	.word	0x20000620

08003e6c <_write_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4d07      	ldr	r5, [pc, #28]	@ (8003e8c <_write_r+0x20>)
 8003e70:	4604      	mov	r4, r0
 8003e72:	4608      	mov	r0, r1
 8003e74:	4611      	mov	r1, r2
 8003e76:	2200      	movs	r2, #0
 8003e78:	602a      	str	r2, [r5, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f7fd fd91 	bl	80019a2 <_write>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d102      	bne.n	8003e8a <_write_r+0x1e>
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	b103      	cbz	r3, 8003e8a <_write_r+0x1e>
 8003e88:	6023      	str	r3, [r4, #0]
 8003e8a:	bd38      	pop	{r3, r4, r5, pc}
 8003e8c:	20000620 	.word	0x20000620

08003e90 <__errno>:
 8003e90:	4b01      	ldr	r3, [pc, #4]	@ (8003e98 <__errno+0x8>)
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000038 	.word	0x20000038

08003e9c <__libc_init_array>:
 8003e9c:	b570      	push	{r4, r5, r6, lr}
 8003e9e:	4d0d      	ldr	r5, [pc, #52]	@ (8003ed4 <__libc_init_array+0x38>)
 8003ea0:	4c0d      	ldr	r4, [pc, #52]	@ (8003ed8 <__libc_init_array+0x3c>)
 8003ea2:	1b64      	subs	r4, r4, r5
 8003ea4:	10a4      	asrs	r4, r4, #2
 8003ea6:	2600      	movs	r6, #0
 8003ea8:	42a6      	cmp	r6, r4
 8003eaa:	d109      	bne.n	8003ec0 <__libc_init_array+0x24>
 8003eac:	4d0b      	ldr	r5, [pc, #44]	@ (8003edc <__libc_init_array+0x40>)
 8003eae:	4c0c      	ldr	r4, [pc, #48]	@ (8003ee0 <__libc_init_array+0x44>)
 8003eb0:	f002 ff90 	bl	8006dd4 <_init>
 8003eb4:	1b64      	subs	r4, r4, r5
 8003eb6:	10a4      	asrs	r4, r4, #2
 8003eb8:	2600      	movs	r6, #0
 8003eba:	42a6      	cmp	r6, r4
 8003ebc:	d105      	bne.n	8003eca <__libc_init_array+0x2e>
 8003ebe:	bd70      	pop	{r4, r5, r6, pc}
 8003ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec4:	4798      	blx	r3
 8003ec6:	3601      	adds	r6, #1
 8003ec8:	e7ee      	b.n	8003ea8 <__libc_init_array+0xc>
 8003eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ece:	4798      	blx	r3
 8003ed0:	3601      	adds	r6, #1
 8003ed2:	e7f2      	b.n	8003eba <__libc_init_array+0x1e>
 8003ed4:	080072d0 	.word	0x080072d0
 8003ed8:	080072d0 	.word	0x080072d0
 8003edc:	080072d0 	.word	0x080072d0
 8003ee0:	080072d4 	.word	0x080072d4

08003ee4 <__retarget_lock_init_recursive>:
 8003ee4:	4770      	bx	lr

08003ee6 <__retarget_lock_acquire_recursive>:
 8003ee6:	4770      	bx	lr

08003ee8 <__retarget_lock_release_recursive>:
 8003ee8:	4770      	bx	lr

08003eea <memcpy>:
 8003eea:	440a      	add	r2, r1
 8003eec:	4291      	cmp	r1, r2
 8003eee:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ef2:	d100      	bne.n	8003ef6 <memcpy+0xc>
 8003ef4:	4770      	bx	lr
 8003ef6:	b510      	push	{r4, lr}
 8003ef8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003efc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f00:	4291      	cmp	r1, r2
 8003f02:	d1f9      	bne.n	8003ef8 <memcpy+0xe>
 8003f04:	bd10      	pop	{r4, pc}

08003f06 <quorem>:
 8003f06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0a:	6903      	ldr	r3, [r0, #16]
 8003f0c:	690c      	ldr	r4, [r1, #16]
 8003f0e:	42a3      	cmp	r3, r4
 8003f10:	4607      	mov	r7, r0
 8003f12:	db7e      	blt.n	8004012 <quorem+0x10c>
 8003f14:	3c01      	subs	r4, #1
 8003f16:	f101 0814 	add.w	r8, r1, #20
 8003f1a:	00a3      	lsls	r3, r4, #2
 8003f1c:	f100 0514 	add.w	r5, r0, #20
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003f2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f30:	3301      	adds	r3, #1
 8003f32:	429a      	cmp	r2, r3
 8003f34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003f38:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f3c:	d32e      	bcc.n	8003f9c <quorem+0x96>
 8003f3e:	f04f 0a00 	mov.w	sl, #0
 8003f42:	46c4      	mov	ip, r8
 8003f44:	46ae      	mov	lr, r5
 8003f46:	46d3      	mov	fp, sl
 8003f48:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003f4c:	b298      	uxth	r0, r3
 8003f4e:	fb06 a000 	mla	r0, r6, r0, sl
 8003f52:	0c02      	lsrs	r2, r0, #16
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	fb06 2303 	mla	r3, r6, r3, r2
 8003f5a:	f8de 2000 	ldr.w	r2, [lr]
 8003f5e:	b280      	uxth	r0, r0
 8003f60:	b292      	uxth	r2, r2
 8003f62:	1a12      	subs	r2, r2, r0
 8003f64:	445a      	add	r2, fp
 8003f66:	f8de 0000 	ldr.w	r0, [lr]
 8003f6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003f74:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003f78:	b292      	uxth	r2, r2
 8003f7a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003f7e:	45e1      	cmp	r9, ip
 8003f80:	f84e 2b04 	str.w	r2, [lr], #4
 8003f84:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003f88:	d2de      	bcs.n	8003f48 <quorem+0x42>
 8003f8a:	9b00      	ldr	r3, [sp, #0]
 8003f8c:	58eb      	ldr	r3, [r5, r3]
 8003f8e:	b92b      	cbnz	r3, 8003f9c <quorem+0x96>
 8003f90:	9b01      	ldr	r3, [sp, #4]
 8003f92:	3b04      	subs	r3, #4
 8003f94:	429d      	cmp	r5, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	d32f      	bcc.n	8003ffa <quorem+0xf4>
 8003f9a:	613c      	str	r4, [r7, #16]
 8003f9c:	4638      	mov	r0, r7
 8003f9e:	f001 f97d 	bl	800529c <__mcmp>
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	db25      	blt.n	8003ff2 <quorem+0xec>
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f858 2b04 	ldr.w	r2, [r8], #4
 8003fae:	f8d1 c000 	ldr.w	ip, [r1]
 8003fb2:	fa1f fe82 	uxth.w	lr, r2
 8003fb6:	fa1f f38c 	uxth.w	r3, ip
 8003fba:	eba3 030e 	sub.w	r3, r3, lr
 8003fbe:	4403      	add	r3, r0
 8003fc0:	0c12      	lsrs	r2, r2, #16
 8003fc2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003fc6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fd0:	45c1      	cmp	r9, r8
 8003fd2:	f841 3b04 	str.w	r3, [r1], #4
 8003fd6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003fda:	d2e6      	bcs.n	8003faa <quorem+0xa4>
 8003fdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003fe0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003fe4:	b922      	cbnz	r2, 8003ff0 <quorem+0xea>
 8003fe6:	3b04      	subs	r3, #4
 8003fe8:	429d      	cmp	r5, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	d30b      	bcc.n	8004006 <quorem+0x100>
 8003fee:	613c      	str	r4, [r7, #16]
 8003ff0:	3601      	adds	r6, #1
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	b003      	add	sp, #12
 8003ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	3b04      	subs	r3, #4
 8003ffe:	2a00      	cmp	r2, #0
 8004000:	d1cb      	bne.n	8003f9a <quorem+0x94>
 8004002:	3c01      	subs	r4, #1
 8004004:	e7c6      	b.n	8003f94 <quorem+0x8e>
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	3b04      	subs	r3, #4
 800400a:	2a00      	cmp	r2, #0
 800400c:	d1ef      	bne.n	8003fee <quorem+0xe8>
 800400e:	3c01      	subs	r4, #1
 8004010:	e7ea      	b.n	8003fe8 <quorem+0xe2>
 8004012:	2000      	movs	r0, #0
 8004014:	e7ee      	b.n	8003ff4 <quorem+0xee>
	...

08004018 <_dtoa_r>:
 8004018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401c:	69c7      	ldr	r7, [r0, #28]
 800401e:	b097      	sub	sp, #92	@ 0x5c
 8004020:	4614      	mov	r4, r2
 8004022:	461d      	mov	r5, r3
 8004024:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004028:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800402a:	4681      	mov	r9, r0
 800402c:	b97f      	cbnz	r7, 800404e <_dtoa_r+0x36>
 800402e:	2010      	movs	r0, #16
 8004030:	f000 fe0c 	bl	8004c4c <malloc>
 8004034:	4602      	mov	r2, r0
 8004036:	f8c9 001c 	str.w	r0, [r9, #28]
 800403a:	b920      	cbnz	r0, 8004046 <_dtoa_r+0x2e>
 800403c:	4baa      	ldr	r3, [pc, #680]	@ (80042e8 <_dtoa_r+0x2d0>)
 800403e:	21ef      	movs	r1, #239	@ 0xef
 8004040:	48aa      	ldr	r0, [pc, #680]	@ (80042ec <_dtoa_r+0x2d4>)
 8004042:	f001 fc5b 	bl	80058fc <__assert_func>
 8004046:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800404a:	6007      	str	r7, [r0, #0]
 800404c:	60c7      	str	r7, [r0, #12]
 800404e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	b159      	cbz	r1, 800406e <_dtoa_r+0x56>
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	604a      	str	r2, [r1, #4]
 800405a:	2301      	movs	r3, #1
 800405c:	4093      	lsls	r3, r2
 800405e:	608b      	str	r3, [r1, #8]
 8004060:	4648      	mov	r0, r9
 8004062:	f000 fee9 	bl	8004e38 <_Bfree>
 8004066:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	1e2b      	subs	r3, r5, #0
 8004070:	bfb9      	ittee	lt
 8004072:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004076:	9307      	strlt	r3, [sp, #28]
 8004078:	2300      	movge	r3, #0
 800407a:	6033      	strge	r3, [r6, #0]
 800407c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004080:	4b9b      	ldr	r3, [pc, #620]	@ (80042f0 <_dtoa_r+0x2d8>)
 8004082:	bfbc      	itt	lt
 8004084:	2201      	movlt	r2, #1
 8004086:	6032      	strlt	r2, [r6, #0]
 8004088:	ea33 0308 	bics.w	r3, r3, r8
 800408c:	d112      	bne.n	80040b4 <_dtoa_r+0x9c>
 800408e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004090:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800409a:	4323      	orrs	r3, r4
 800409c:	f000 855b 	beq.w	8004b56 <_dtoa_r+0xb3e>
 80040a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80040a2:	f8df a250 	ldr.w	sl, [pc, #592]	@ 80042f4 <_dtoa_r+0x2dc>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 855d 	beq.w	8004b66 <_dtoa_r+0xb4e>
 80040ac:	f10a 0303 	add.w	r3, sl, #3
 80040b0:	f000 bd57 	b.w	8004b62 <_dtoa_r+0xb4a>
 80040b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80040bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80040c0:	2200      	movs	r2, #0
 80040c2:	2300      	movs	r3, #0
 80040c4:	f7fc fd00 	bl	8000ac8 <__aeabi_dcmpeq>
 80040c8:	4607      	mov	r7, r0
 80040ca:	b158      	cbz	r0, 80040e4 <_dtoa_r+0xcc>
 80040cc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80040ce:	2301      	movs	r3, #1
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80040d4:	b113      	cbz	r3, 80040dc <_dtoa_r+0xc4>
 80040d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80040d8:	4b87      	ldr	r3, [pc, #540]	@ (80042f8 <_dtoa_r+0x2e0>)
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 80042fc <_dtoa_r+0x2e4>
 80040e0:	f000 bd41 	b.w	8004b66 <_dtoa_r+0xb4e>
 80040e4:	ab14      	add	r3, sp, #80	@ 0x50
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	ab15      	add	r3, sp, #84	@ 0x54
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	4648      	mov	r0, r9
 80040ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80040f2:	f001 f981 	bl	80053f8 <__d2b>
 80040f6:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80040fa:	9003      	str	r0, [sp, #12]
 80040fc:	2e00      	cmp	r6, #0
 80040fe:	d077      	beq.n	80041f0 <_dtoa_r+0x1d8>
 8004100:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004102:	9712      	str	r7, [sp, #72]	@ 0x48
 8004104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800410c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004110:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004114:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004118:	4619      	mov	r1, r3
 800411a:	2200      	movs	r2, #0
 800411c:	4b78      	ldr	r3, [pc, #480]	@ (8004300 <_dtoa_r+0x2e8>)
 800411e:	f7fc f8b3 	bl	8000288 <__aeabi_dsub>
 8004122:	a36b      	add	r3, pc, #428	@ (adr r3, 80042d0 <_dtoa_r+0x2b8>)
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f7fc fa66 	bl	80005f8 <__aeabi_dmul>
 800412c:	a36a      	add	r3, pc, #424	@ (adr r3, 80042d8 <_dtoa_r+0x2c0>)
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	f7fc f8ab 	bl	800028c <__adddf3>
 8004136:	4604      	mov	r4, r0
 8004138:	4630      	mov	r0, r6
 800413a:	460d      	mov	r5, r1
 800413c:	f7fc f9f2 	bl	8000524 <__aeabi_i2d>
 8004140:	a367      	add	r3, pc, #412	@ (adr r3, 80042e0 <_dtoa_r+0x2c8>)
 8004142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004146:	f7fc fa57 	bl	80005f8 <__aeabi_dmul>
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	4620      	mov	r0, r4
 8004150:	4629      	mov	r1, r5
 8004152:	f7fc f89b 	bl	800028c <__adddf3>
 8004156:	4604      	mov	r4, r0
 8004158:	460d      	mov	r5, r1
 800415a:	f7fc fcfd 	bl	8000b58 <__aeabi_d2iz>
 800415e:	2200      	movs	r2, #0
 8004160:	4607      	mov	r7, r0
 8004162:	2300      	movs	r3, #0
 8004164:	4620      	mov	r0, r4
 8004166:	4629      	mov	r1, r5
 8004168:	f7fc fcb8 	bl	8000adc <__aeabi_dcmplt>
 800416c:	b140      	cbz	r0, 8004180 <_dtoa_r+0x168>
 800416e:	4638      	mov	r0, r7
 8004170:	f7fc f9d8 	bl	8000524 <__aeabi_i2d>
 8004174:	4622      	mov	r2, r4
 8004176:	462b      	mov	r3, r5
 8004178:	f7fc fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 800417c:	b900      	cbnz	r0, 8004180 <_dtoa_r+0x168>
 800417e:	3f01      	subs	r7, #1
 8004180:	2f16      	cmp	r7, #22
 8004182:	d853      	bhi.n	800422c <_dtoa_r+0x214>
 8004184:	4b5f      	ldr	r3, [pc, #380]	@ (8004304 <_dtoa_r+0x2ec>)
 8004186:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004192:	f7fc fca3 	bl	8000adc <__aeabi_dcmplt>
 8004196:	2800      	cmp	r0, #0
 8004198:	d04a      	beq.n	8004230 <_dtoa_r+0x218>
 800419a:	3f01      	subs	r7, #1
 800419c:	2300      	movs	r3, #0
 800419e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80041a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80041a2:	1b9b      	subs	r3, r3, r6
 80041a4:	1e5a      	subs	r2, r3, #1
 80041a6:	bf45      	ittet	mi
 80041a8:	f1c3 0301 	rsbmi	r3, r3, #1
 80041ac:	9304      	strmi	r3, [sp, #16]
 80041ae:	2300      	movpl	r3, #0
 80041b0:	2300      	movmi	r3, #0
 80041b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80041b4:	bf54      	ite	pl
 80041b6:	9304      	strpl	r3, [sp, #16]
 80041b8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80041ba:	2f00      	cmp	r7, #0
 80041bc:	db3a      	blt.n	8004234 <_dtoa_r+0x21c>
 80041be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041c0:	970e      	str	r7, [sp, #56]	@ 0x38
 80041c2:	443b      	add	r3, r7
 80041c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80041c6:	2300      	movs	r3, #0
 80041c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80041ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80041cc:	2b09      	cmp	r3, #9
 80041ce:	d864      	bhi.n	800429a <_dtoa_r+0x282>
 80041d0:	2b05      	cmp	r3, #5
 80041d2:	bfc4      	itt	gt
 80041d4:	3b04      	subgt	r3, #4
 80041d6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80041d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80041da:	f1a3 0302 	sub.w	r3, r3, #2
 80041de:	bfcc      	ite	gt
 80041e0:	2400      	movgt	r4, #0
 80041e2:	2401      	movle	r4, #1
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d864      	bhi.n	80042b2 <_dtoa_r+0x29a>
 80041e8:	e8df f003 	tbb	[pc, r3]
 80041ec:	2c385553 	.word	0x2c385553
 80041f0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80041f4:	441e      	add	r6, r3
 80041f6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	bfc1      	itttt	gt
 80041fe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004202:	fa08 f803 	lslgt.w	r8, r8, r3
 8004206:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800420a:	fa24 f303 	lsrgt.w	r3, r4, r3
 800420e:	bfd6      	itet	le
 8004210:	f1c3 0320 	rsble	r3, r3, #32
 8004214:	ea48 0003 	orrgt.w	r0, r8, r3
 8004218:	fa04 f003 	lslle.w	r0, r4, r3
 800421c:	f7fc f972 	bl	8000504 <__aeabi_ui2d>
 8004220:	2201      	movs	r2, #1
 8004222:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004226:	3e01      	subs	r6, #1
 8004228:	9212      	str	r2, [sp, #72]	@ 0x48
 800422a:	e775      	b.n	8004118 <_dtoa_r+0x100>
 800422c:	2301      	movs	r3, #1
 800422e:	e7b6      	b.n	800419e <_dtoa_r+0x186>
 8004230:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004232:	e7b5      	b.n	80041a0 <_dtoa_r+0x188>
 8004234:	9b04      	ldr	r3, [sp, #16]
 8004236:	1bdb      	subs	r3, r3, r7
 8004238:	9304      	str	r3, [sp, #16]
 800423a:	427b      	negs	r3, r7
 800423c:	930a      	str	r3, [sp, #40]	@ 0x28
 800423e:	2300      	movs	r3, #0
 8004240:	930e      	str	r3, [sp, #56]	@ 0x38
 8004242:	e7c2      	b.n	80041ca <_dtoa_r+0x1b2>
 8004244:	2301      	movs	r3, #1
 8004246:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004248:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800424a:	eb07 0b03 	add.w	fp, r7, r3
 800424e:	f10b 0301 	add.w	r3, fp, #1
 8004252:	2b01      	cmp	r3, #1
 8004254:	9308      	str	r3, [sp, #32]
 8004256:	bfb8      	it	lt
 8004258:	2301      	movlt	r3, #1
 800425a:	e006      	b.n	800426a <_dtoa_r+0x252>
 800425c:	2301      	movs	r3, #1
 800425e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004260:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004262:	2b00      	cmp	r3, #0
 8004264:	dd28      	ble.n	80042b8 <_dtoa_r+0x2a0>
 8004266:	469b      	mov	fp, r3
 8004268:	9308      	str	r3, [sp, #32]
 800426a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800426e:	2100      	movs	r1, #0
 8004270:	2204      	movs	r2, #4
 8004272:	f102 0514 	add.w	r5, r2, #20
 8004276:	429d      	cmp	r5, r3
 8004278:	d926      	bls.n	80042c8 <_dtoa_r+0x2b0>
 800427a:	6041      	str	r1, [r0, #4]
 800427c:	4648      	mov	r0, r9
 800427e:	f000 fd9b 	bl	8004db8 <_Balloc>
 8004282:	4682      	mov	sl, r0
 8004284:	2800      	cmp	r0, #0
 8004286:	d141      	bne.n	800430c <_dtoa_r+0x2f4>
 8004288:	4b1f      	ldr	r3, [pc, #124]	@ (8004308 <_dtoa_r+0x2f0>)
 800428a:	4602      	mov	r2, r0
 800428c:	f240 11af 	movw	r1, #431	@ 0x1af
 8004290:	e6d6      	b.n	8004040 <_dtoa_r+0x28>
 8004292:	2300      	movs	r3, #0
 8004294:	e7e3      	b.n	800425e <_dtoa_r+0x246>
 8004296:	2300      	movs	r3, #0
 8004298:	e7d5      	b.n	8004246 <_dtoa_r+0x22e>
 800429a:	2401      	movs	r4, #1
 800429c:	2300      	movs	r3, #0
 800429e:	9320      	str	r3, [sp, #128]	@ 0x80
 80042a0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80042a2:	f04f 3bff 	mov.w	fp, #4294967295
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8cd b020 	str.w	fp, [sp, #32]
 80042ac:	2312      	movs	r3, #18
 80042ae:	9221      	str	r2, [sp, #132]	@ 0x84
 80042b0:	e7db      	b.n	800426a <_dtoa_r+0x252>
 80042b2:	2301      	movs	r3, #1
 80042b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042b6:	e7f4      	b.n	80042a2 <_dtoa_r+0x28a>
 80042b8:	f04f 0b01 	mov.w	fp, #1
 80042bc:	f8cd b020 	str.w	fp, [sp, #32]
 80042c0:	465b      	mov	r3, fp
 80042c2:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80042c6:	e7d0      	b.n	800426a <_dtoa_r+0x252>
 80042c8:	3101      	adds	r1, #1
 80042ca:	0052      	lsls	r2, r2, #1
 80042cc:	e7d1      	b.n	8004272 <_dtoa_r+0x25a>
 80042ce:	bf00      	nop
 80042d0:	636f4361 	.word	0x636f4361
 80042d4:	3fd287a7 	.word	0x3fd287a7
 80042d8:	8b60c8b3 	.word	0x8b60c8b3
 80042dc:	3fc68a28 	.word	0x3fc68a28
 80042e0:	509f79fb 	.word	0x509f79fb
 80042e4:	3fd34413 	.word	0x3fd34413
 80042e8:	08006f51 	.word	0x08006f51
 80042ec:	08006f68 	.word	0x08006f68
 80042f0:	7ff00000 	.word	0x7ff00000
 80042f4:	08006f4d 	.word	0x08006f4d
 80042f8:	08006f21 	.word	0x08006f21
 80042fc:	08006f20 	.word	0x08006f20
 8004300:	3ff80000 	.word	0x3ff80000
 8004304:	080070b8 	.word	0x080070b8
 8004308:	08006fc0 	.word	0x08006fc0
 800430c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004310:	6018      	str	r0, [r3, #0]
 8004312:	9b08      	ldr	r3, [sp, #32]
 8004314:	2b0e      	cmp	r3, #14
 8004316:	f200 80a1 	bhi.w	800445c <_dtoa_r+0x444>
 800431a:	2c00      	cmp	r4, #0
 800431c:	f000 809e 	beq.w	800445c <_dtoa_r+0x444>
 8004320:	2f00      	cmp	r7, #0
 8004322:	dd33      	ble.n	800438c <_dtoa_r+0x374>
 8004324:	4b9c      	ldr	r3, [pc, #624]	@ (8004598 <_dtoa_r+0x580>)
 8004326:	f007 020f 	and.w	r2, r7, #15
 800432a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800432e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004332:	05f8      	lsls	r0, r7, #23
 8004334:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004338:	ea4f 1427 	mov.w	r4, r7, asr #4
 800433c:	d516      	bpl.n	800436c <_dtoa_r+0x354>
 800433e:	4b97      	ldr	r3, [pc, #604]	@ (800459c <_dtoa_r+0x584>)
 8004340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004344:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004348:	f7fc fa80 	bl	800084c <__aeabi_ddiv>
 800434c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004350:	f004 040f 	and.w	r4, r4, #15
 8004354:	2603      	movs	r6, #3
 8004356:	4d91      	ldr	r5, [pc, #580]	@ (800459c <_dtoa_r+0x584>)
 8004358:	b954      	cbnz	r4, 8004370 <_dtoa_r+0x358>
 800435a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800435e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004362:	f7fc fa73 	bl	800084c <__aeabi_ddiv>
 8004366:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800436a:	e028      	b.n	80043be <_dtoa_r+0x3a6>
 800436c:	2602      	movs	r6, #2
 800436e:	e7f2      	b.n	8004356 <_dtoa_r+0x33e>
 8004370:	07e1      	lsls	r1, r4, #31
 8004372:	d508      	bpl.n	8004386 <_dtoa_r+0x36e>
 8004374:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004378:	e9d5 2300 	ldrd	r2, r3, [r5]
 800437c:	f7fc f93c 	bl	80005f8 <__aeabi_dmul>
 8004380:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004384:	3601      	adds	r6, #1
 8004386:	1064      	asrs	r4, r4, #1
 8004388:	3508      	adds	r5, #8
 800438a:	e7e5      	b.n	8004358 <_dtoa_r+0x340>
 800438c:	f000 80af 	beq.w	80044ee <_dtoa_r+0x4d6>
 8004390:	427c      	negs	r4, r7
 8004392:	4b81      	ldr	r3, [pc, #516]	@ (8004598 <_dtoa_r+0x580>)
 8004394:	4d81      	ldr	r5, [pc, #516]	@ (800459c <_dtoa_r+0x584>)
 8004396:	f004 020f 	and.w	r2, r4, #15
 800439a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80043a6:	f7fc f927 	bl	80005f8 <__aeabi_dmul>
 80043aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80043ae:	1124      	asrs	r4, r4, #4
 80043b0:	2300      	movs	r3, #0
 80043b2:	2602      	movs	r6, #2
 80043b4:	2c00      	cmp	r4, #0
 80043b6:	f040 808f 	bne.w	80044d8 <_dtoa_r+0x4c0>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1d3      	bne.n	8004366 <_dtoa_r+0x34e>
 80043be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80043c0:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8094 	beq.w	80044f2 <_dtoa_r+0x4da>
 80043ca:	4b75      	ldr	r3, [pc, #468]	@ (80045a0 <_dtoa_r+0x588>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	4620      	mov	r0, r4
 80043d0:	4629      	mov	r1, r5
 80043d2:	f7fc fb83 	bl	8000adc <__aeabi_dcmplt>
 80043d6:	2800      	cmp	r0, #0
 80043d8:	f000 808b 	beq.w	80044f2 <_dtoa_r+0x4da>
 80043dc:	9b08      	ldr	r3, [sp, #32]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 8087 	beq.w	80044f2 <_dtoa_r+0x4da>
 80043e4:	f1bb 0f00 	cmp.w	fp, #0
 80043e8:	dd34      	ble.n	8004454 <_dtoa_r+0x43c>
 80043ea:	4620      	mov	r0, r4
 80043ec:	4b6d      	ldr	r3, [pc, #436]	@ (80045a4 <_dtoa_r+0x58c>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	4629      	mov	r1, r5
 80043f2:	f7fc f901 	bl	80005f8 <__aeabi_dmul>
 80043f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80043fa:	f107 38ff 	add.w	r8, r7, #4294967295
 80043fe:	3601      	adds	r6, #1
 8004400:	465c      	mov	r4, fp
 8004402:	4630      	mov	r0, r6
 8004404:	f7fc f88e 	bl	8000524 <__aeabi_i2d>
 8004408:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800440c:	f7fc f8f4 	bl	80005f8 <__aeabi_dmul>
 8004410:	4b65      	ldr	r3, [pc, #404]	@ (80045a8 <_dtoa_r+0x590>)
 8004412:	2200      	movs	r2, #0
 8004414:	f7fb ff3a 	bl	800028c <__adddf3>
 8004418:	4605      	mov	r5, r0
 800441a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800441e:	2c00      	cmp	r4, #0
 8004420:	d16a      	bne.n	80044f8 <_dtoa_r+0x4e0>
 8004422:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004426:	4b61      	ldr	r3, [pc, #388]	@ (80045ac <_dtoa_r+0x594>)
 8004428:	2200      	movs	r2, #0
 800442a:	f7fb ff2d 	bl	8000288 <__aeabi_dsub>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004436:	462a      	mov	r2, r5
 8004438:	4633      	mov	r3, r6
 800443a:	f7fc fb6d 	bl	8000b18 <__aeabi_dcmpgt>
 800443e:	2800      	cmp	r0, #0
 8004440:	f040 8298 	bne.w	8004974 <_dtoa_r+0x95c>
 8004444:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004448:	462a      	mov	r2, r5
 800444a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800444e:	f7fc fb45 	bl	8000adc <__aeabi_dcmplt>
 8004452:	bb38      	cbnz	r0, 80044a4 <_dtoa_r+0x48c>
 8004454:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004458:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800445c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800445e:	2b00      	cmp	r3, #0
 8004460:	f2c0 8157 	blt.w	8004712 <_dtoa_r+0x6fa>
 8004464:	2f0e      	cmp	r7, #14
 8004466:	f300 8154 	bgt.w	8004712 <_dtoa_r+0x6fa>
 800446a:	4b4b      	ldr	r3, [pc, #300]	@ (8004598 <_dtoa_r+0x580>)
 800446c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004470:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004474:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004478:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800447a:	2b00      	cmp	r3, #0
 800447c:	f280 80e5 	bge.w	800464a <_dtoa_r+0x632>
 8004480:	9b08      	ldr	r3, [sp, #32]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f300 80e1 	bgt.w	800464a <_dtoa_r+0x632>
 8004488:	d10c      	bne.n	80044a4 <_dtoa_r+0x48c>
 800448a:	4b48      	ldr	r3, [pc, #288]	@ (80045ac <_dtoa_r+0x594>)
 800448c:	2200      	movs	r2, #0
 800448e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004492:	f7fc f8b1 	bl	80005f8 <__aeabi_dmul>
 8004496:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800449a:	f7fc fb33 	bl	8000b04 <__aeabi_dcmpge>
 800449e:	2800      	cmp	r0, #0
 80044a0:	f000 8266 	beq.w	8004970 <_dtoa_r+0x958>
 80044a4:	2400      	movs	r4, #0
 80044a6:	4625      	mov	r5, r4
 80044a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80044aa:	4656      	mov	r6, sl
 80044ac:	ea6f 0803 	mvn.w	r8, r3
 80044b0:	2700      	movs	r7, #0
 80044b2:	4621      	mov	r1, r4
 80044b4:	4648      	mov	r0, r9
 80044b6:	f000 fcbf 	bl	8004e38 <_Bfree>
 80044ba:	2d00      	cmp	r5, #0
 80044bc:	f000 80bd 	beq.w	800463a <_dtoa_r+0x622>
 80044c0:	b12f      	cbz	r7, 80044ce <_dtoa_r+0x4b6>
 80044c2:	42af      	cmp	r7, r5
 80044c4:	d003      	beq.n	80044ce <_dtoa_r+0x4b6>
 80044c6:	4639      	mov	r1, r7
 80044c8:	4648      	mov	r0, r9
 80044ca:	f000 fcb5 	bl	8004e38 <_Bfree>
 80044ce:	4629      	mov	r1, r5
 80044d0:	4648      	mov	r0, r9
 80044d2:	f000 fcb1 	bl	8004e38 <_Bfree>
 80044d6:	e0b0      	b.n	800463a <_dtoa_r+0x622>
 80044d8:	07e2      	lsls	r2, r4, #31
 80044da:	d505      	bpl.n	80044e8 <_dtoa_r+0x4d0>
 80044dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80044e0:	f7fc f88a 	bl	80005f8 <__aeabi_dmul>
 80044e4:	3601      	adds	r6, #1
 80044e6:	2301      	movs	r3, #1
 80044e8:	1064      	asrs	r4, r4, #1
 80044ea:	3508      	adds	r5, #8
 80044ec:	e762      	b.n	80043b4 <_dtoa_r+0x39c>
 80044ee:	2602      	movs	r6, #2
 80044f0:	e765      	b.n	80043be <_dtoa_r+0x3a6>
 80044f2:	9c08      	ldr	r4, [sp, #32]
 80044f4:	46b8      	mov	r8, r7
 80044f6:	e784      	b.n	8004402 <_dtoa_r+0x3ea>
 80044f8:	4b27      	ldr	r3, [pc, #156]	@ (8004598 <_dtoa_r+0x580>)
 80044fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80044fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004500:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004504:	4454      	add	r4, sl
 8004506:	2900      	cmp	r1, #0
 8004508:	d054      	beq.n	80045b4 <_dtoa_r+0x59c>
 800450a:	4929      	ldr	r1, [pc, #164]	@ (80045b0 <_dtoa_r+0x598>)
 800450c:	2000      	movs	r0, #0
 800450e:	f7fc f99d 	bl	800084c <__aeabi_ddiv>
 8004512:	4633      	mov	r3, r6
 8004514:	462a      	mov	r2, r5
 8004516:	f7fb feb7 	bl	8000288 <__aeabi_dsub>
 800451a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800451e:	4656      	mov	r6, sl
 8004520:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004524:	f7fc fb18 	bl	8000b58 <__aeabi_d2iz>
 8004528:	4605      	mov	r5, r0
 800452a:	f7fb fffb 	bl	8000524 <__aeabi_i2d>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004536:	f7fb fea7 	bl	8000288 <__aeabi_dsub>
 800453a:	3530      	adds	r5, #48	@ 0x30
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004544:	f806 5b01 	strb.w	r5, [r6], #1
 8004548:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800454c:	f7fc fac6 	bl	8000adc <__aeabi_dcmplt>
 8004550:	2800      	cmp	r0, #0
 8004552:	d172      	bne.n	800463a <_dtoa_r+0x622>
 8004554:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004558:	4911      	ldr	r1, [pc, #68]	@ (80045a0 <_dtoa_r+0x588>)
 800455a:	2000      	movs	r0, #0
 800455c:	f7fb fe94 	bl	8000288 <__aeabi_dsub>
 8004560:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004564:	f7fc faba 	bl	8000adc <__aeabi_dcmplt>
 8004568:	2800      	cmp	r0, #0
 800456a:	f040 80b4 	bne.w	80046d6 <_dtoa_r+0x6be>
 800456e:	42a6      	cmp	r6, r4
 8004570:	f43f af70 	beq.w	8004454 <_dtoa_r+0x43c>
 8004574:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004578:	4b0a      	ldr	r3, [pc, #40]	@ (80045a4 <_dtoa_r+0x58c>)
 800457a:	2200      	movs	r2, #0
 800457c:	f7fc f83c 	bl	80005f8 <__aeabi_dmul>
 8004580:	4b08      	ldr	r3, [pc, #32]	@ (80045a4 <_dtoa_r+0x58c>)
 8004582:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004586:	2200      	movs	r2, #0
 8004588:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800458c:	f7fc f834 	bl	80005f8 <__aeabi_dmul>
 8004590:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004594:	e7c4      	b.n	8004520 <_dtoa_r+0x508>
 8004596:	bf00      	nop
 8004598:	080070b8 	.word	0x080070b8
 800459c:	08007090 	.word	0x08007090
 80045a0:	3ff00000 	.word	0x3ff00000
 80045a4:	40240000 	.word	0x40240000
 80045a8:	401c0000 	.word	0x401c0000
 80045ac:	40140000 	.word	0x40140000
 80045b0:	3fe00000 	.word	0x3fe00000
 80045b4:	4631      	mov	r1, r6
 80045b6:	4628      	mov	r0, r5
 80045b8:	f7fc f81e 	bl	80005f8 <__aeabi_dmul>
 80045bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80045c0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80045c2:	4656      	mov	r6, sl
 80045c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045c8:	f7fc fac6 	bl	8000b58 <__aeabi_d2iz>
 80045cc:	4605      	mov	r5, r0
 80045ce:	f7fb ffa9 	bl	8000524 <__aeabi_i2d>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045da:	f7fb fe55 	bl	8000288 <__aeabi_dsub>
 80045de:	3530      	adds	r5, #48	@ 0x30
 80045e0:	f806 5b01 	strb.w	r5, [r6], #1
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	42a6      	cmp	r6, r4
 80045ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	d124      	bne.n	800463e <_dtoa_r+0x626>
 80045f4:	4baf      	ldr	r3, [pc, #700]	@ (80048b4 <_dtoa_r+0x89c>)
 80045f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80045fa:	f7fb fe47 	bl	800028c <__adddf3>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004606:	f7fc fa87 	bl	8000b18 <__aeabi_dcmpgt>
 800460a:	2800      	cmp	r0, #0
 800460c:	d163      	bne.n	80046d6 <_dtoa_r+0x6be>
 800460e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004612:	49a8      	ldr	r1, [pc, #672]	@ (80048b4 <_dtoa_r+0x89c>)
 8004614:	2000      	movs	r0, #0
 8004616:	f7fb fe37 	bl	8000288 <__aeabi_dsub>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004622:	f7fc fa5b 	bl	8000adc <__aeabi_dcmplt>
 8004626:	2800      	cmp	r0, #0
 8004628:	f43f af14 	beq.w	8004454 <_dtoa_r+0x43c>
 800462c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800462e:	1e73      	subs	r3, r6, #1
 8004630:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004632:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004636:	2b30      	cmp	r3, #48	@ 0x30
 8004638:	d0f8      	beq.n	800462c <_dtoa_r+0x614>
 800463a:	4647      	mov	r7, r8
 800463c:	e03b      	b.n	80046b6 <_dtoa_r+0x69e>
 800463e:	4b9e      	ldr	r3, [pc, #632]	@ (80048b8 <_dtoa_r+0x8a0>)
 8004640:	f7fb ffda 	bl	80005f8 <__aeabi_dmul>
 8004644:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004648:	e7bc      	b.n	80045c4 <_dtoa_r+0x5ac>
 800464a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800464e:	4656      	mov	r6, sl
 8004650:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004654:	4620      	mov	r0, r4
 8004656:	4629      	mov	r1, r5
 8004658:	f7fc f8f8 	bl	800084c <__aeabi_ddiv>
 800465c:	f7fc fa7c 	bl	8000b58 <__aeabi_d2iz>
 8004660:	4680      	mov	r8, r0
 8004662:	f7fb ff5f 	bl	8000524 <__aeabi_i2d>
 8004666:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800466a:	f7fb ffc5 	bl	80005f8 <__aeabi_dmul>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4620      	mov	r0, r4
 8004674:	4629      	mov	r1, r5
 8004676:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800467a:	f7fb fe05 	bl	8000288 <__aeabi_dsub>
 800467e:	f806 4b01 	strb.w	r4, [r6], #1
 8004682:	9d08      	ldr	r5, [sp, #32]
 8004684:	eba6 040a 	sub.w	r4, r6, sl
 8004688:	42a5      	cmp	r5, r4
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	d133      	bne.n	80046f8 <_dtoa_r+0x6e0>
 8004690:	f7fb fdfc 	bl	800028c <__adddf3>
 8004694:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004698:	4604      	mov	r4, r0
 800469a:	460d      	mov	r5, r1
 800469c:	f7fc fa3c 	bl	8000b18 <__aeabi_dcmpgt>
 80046a0:	b9c0      	cbnz	r0, 80046d4 <_dtoa_r+0x6bc>
 80046a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046a6:	4620      	mov	r0, r4
 80046a8:	4629      	mov	r1, r5
 80046aa:	f7fc fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80046ae:	b110      	cbz	r0, 80046b6 <_dtoa_r+0x69e>
 80046b0:	f018 0f01 	tst.w	r8, #1
 80046b4:	d10e      	bne.n	80046d4 <_dtoa_r+0x6bc>
 80046b6:	9903      	ldr	r1, [sp, #12]
 80046b8:	4648      	mov	r0, r9
 80046ba:	f000 fbbd 	bl	8004e38 <_Bfree>
 80046be:	2300      	movs	r3, #0
 80046c0:	7033      	strb	r3, [r6, #0]
 80046c2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80046c4:	3701      	adds	r7, #1
 80046c6:	601f      	str	r7, [r3, #0]
 80046c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 824b 	beq.w	8004b66 <_dtoa_r+0xb4e>
 80046d0:	601e      	str	r6, [r3, #0]
 80046d2:	e248      	b.n	8004b66 <_dtoa_r+0xb4e>
 80046d4:	46b8      	mov	r8, r7
 80046d6:	4633      	mov	r3, r6
 80046d8:	461e      	mov	r6, r3
 80046da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046de:	2a39      	cmp	r2, #57	@ 0x39
 80046e0:	d106      	bne.n	80046f0 <_dtoa_r+0x6d8>
 80046e2:	459a      	cmp	sl, r3
 80046e4:	d1f8      	bne.n	80046d8 <_dtoa_r+0x6c0>
 80046e6:	2230      	movs	r2, #48	@ 0x30
 80046e8:	f108 0801 	add.w	r8, r8, #1
 80046ec:	f88a 2000 	strb.w	r2, [sl]
 80046f0:	781a      	ldrb	r2, [r3, #0]
 80046f2:	3201      	adds	r2, #1
 80046f4:	701a      	strb	r2, [r3, #0]
 80046f6:	e7a0      	b.n	800463a <_dtoa_r+0x622>
 80046f8:	4b6f      	ldr	r3, [pc, #444]	@ (80048b8 <_dtoa_r+0x8a0>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	f7fb ff7c 	bl	80005f8 <__aeabi_dmul>
 8004700:	2200      	movs	r2, #0
 8004702:	2300      	movs	r3, #0
 8004704:	4604      	mov	r4, r0
 8004706:	460d      	mov	r5, r1
 8004708:	f7fc f9de 	bl	8000ac8 <__aeabi_dcmpeq>
 800470c:	2800      	cmp	r0, #0
 800470e:	d09f      	beq.n	8004650 <_dtoa_r+0x638>
 8004710:	e7d1      	b.n	80046b6 <_dtoa_r+0x69e>
 8004712:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004714:	2a00      	cmp	r2, #0
 8004716:	f000 80ea 	beq.w	80048ee <_dtoa_r+0x8d6>
 800471a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800471c:	2a01      	cmp	r2, #1
 800471e:	f300 80cd 	bgt.w	80048bc <_dtoa_r+0x8a4>
 8004722:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004724:	2a00      	cmp	r2, #0
 8004726:	f000 80c1 	beq.w	80048ac <_dtoa_r+0x894>
 800472a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800472e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004730:	9e04      	ldr	r6, [sp, #16]
 8004732:	9a04      	ldr	r2, [sp, #16]
 8004734:	441a      	add	r2, r3
 8004736:	9204      	str	r2, [sp, #16]
 8004738:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800473a:	2101      	movs	r1, #1
 800473c:	441a      	add	r2, r3
 800473e:	4648      	mov	r0, r9
 8004740:	9209      	str	r2, [sp, #36]	@ 0x24
 8004742:	f000 fc2d 	bl	8004fa0 <__i2b>
 8004746:	4605      	mov	r5, r0
 8004748:	b166      	cbz	r6, 8004764 <_dtoa_r+0x74c>
 800474a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800474c:	2b00      	cmp	r3, #0
 800474e:	dd09      	ble.n	8004764 <_dtoa_r+0x74c>
 8004750:	42b3      	cmp	r3, r6
 8004752:	9a04      	ldr	r2, [sp, #16]
 8004754:	bfa8      	it	ge
 8004756:	4633      	movge	r3, r6
 8004758:	1ad2      	subs	r2, r2, r3
 800475a:	9204      	str	r2, [sp, #16]
 800475c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800475e:	1af6      	subs	r6, r6, r3
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	9309      	str	r3, [sp, #36]	@ 0x24
 8004764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004766:	b30b      	cbz	r3, 80047ac <_dtoa_r+0x794>
 8004768:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 80c6 	beq.w	80048fc <_dtoa_r+0x8e4>
 8004770:	2c00      	cmp	r4, #0
 8004772:	f000 80c0 	beq.w	80048f6 <_dtoa_r+0x8de>
 8004776:	4629      	mov	r1, r5
 8004778:	4622      	mov	r2, r4
 800477a:	4648      	mov	r0, r9
 800477c:	f000 fcc8 	bl	8005110 <__pow5mult>
 8004780:	9a03      	ldr	r2, [sp, #12]
 8004782:	4601      	mov	r1, r0
 8004784:	4605      	mov	r5, r0
 8004786:	4648      	mov	r0, r9
 8004788:	f000 fc20 	bl	8004fcc <__multiply>
 800478c:	9903      	ldr	r1, [sp, #12]
 800478e:	4680      	mov	r8, r0
 8004790:	4648      	mov	r0, r9
 8004792:	f000 fb51 	bl	8004e38 <_Bfree>
 8004796:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004798:	1b1b      	subs	r3, r3, r4
 800479a:	930a      	str	r3, [sp, #40]	@ 0x28
 800479c:	f000 80b1 	beq.w	8004902 <_dtoa_r+0x8ea>
 80047a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80047a2:	4641      	mov	r1, r8
 80047a4:	4648      	mov	r0, r9
 80047a6:	f000 fcb3 	bl	8005110 <__pow5mult>
 80047aa:	9003      	str	r0, [sp, #12]
 80047ac:	2101      	movs	r1, #1
 80047ae:	4648      	mov	r0, r9
 80047b0:	f000 fbf6 	bl	8004fa0 <__i2b>
 80047b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80047b6:	4604      	mov	r4, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 81d8 	beq.w	8004b6e <_dtoa_r+0xb56>
 80047be:	461a      	mov	r2, r3
 80047c0:	4601      	mov	r1, r0
 80047c2:	4648      	mov	r0, r9
 80047c4:	f000 fca4 	bl	8005110 <__pow5mult>
 80047c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	4604      	mov	r4, r0
 80047ce:	f300 809f 	bgt.w	8004910 <_dtoa_r+0x8f8>
 80047d2:	9b06      	ldr	r3, [sp, #24]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f040 8097 	bne.w	8004908 <_dtoa_r+0x8f0>
 80047da:	9b07      	ldr	r3, [sp, #28]
 80047dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f040 8093 	bne.w	800490c <_dtoa_r+0x8f4>
 80047e6:	9b07      	ldr	r3, [sp, #28]
 80047e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047ec:	0d1b      	lsrs	r3, r3, #20
 80047ee:	051b      	lsls	r3, r3, #20
 80047f0:	b133      	cbz	r3, 8004800 <_dtoa_r+0x7e8>
 80047f2:	9b04      	ldr	r3, [sp, #16]
 80047f4:	3301      	adds	r3, #1
 80047f6:	9304      	str	r3, [sp, #16]
 80047f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047fa:	3301      	adds	r3, #1
 80047fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80047fe:	2301      	movs	r3, #1
 8004800:	930a      	str	r3, [sp, #40]	@ 0x28
 8004802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 81b8 	beq.w	8004b7a <_dtoa_r+0xb62>
 800480a:	6923      	ldr	r3, [r4, #16]
 800480c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004810:	6918      	ldr	r0, [r3, #16]
 8004812:	f000 fb79 	bl	8004f08 <__hi0bits>
 8004816:	f1c0 0020 	rsb	r0, r0, #32
 800481a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800481c:	4418      	add	r0, r3
 800481e:	f010 001f 	ands.w	r0, r0, #31
 8004822:	f000 8082 	beq.w	800492a <_dtoa_r+0x912>
 8004826:	f1c0 0320 	rsb	r3, r0, #32
 800482a:	2b04      	cmp	r3, #4
 800482c:	dd73      	ble.n	8004916 <_dtoa_r+0x8fe>
 800482e:	9b04      	ldr	r3, [sp, #16]
 8004830:	f1c0 001c 	rsb	r0, r0, #28
 8004834:	4403      	add	r3, r0
 8004836:	9304      	str	r3, [sp, #16]
 8004838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800483a:	4403      	add	r3, r0
 800483c:	4406      	add	r6, r0
 800483e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004840:	9b04      	ldr	r3, [sp, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	dd05      	ble.n	8004852 <_dtoa_r+0x83a>
 8004846:	9903      	ldr	r1, [sp, #12]
 8004848:	461a      	mov	r2, r3
 800484a:	4648      	mov	r0, r9
 800484c:	f000 fcba 	bl	80051c4 <__lshift>
 8004850:	9003      	str	r0, [sp, #12]
 8004852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004854:	2b00      	cmp	r3, #0
 8004856:	dd05      	ble.n	8004864 <_dtoa_r+0x84c>
 8004858:	4621      	mov	r1, r4
 800485a:	461a      	mov	r2, r3
 800485c:	4648      	mov	r0, r9
 800485e:	f000 fcb1 	bl	80051c4 <__lshift>
 8004862:	4604      	mov	r4, r0
 8004864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d061      	beq.n	800492e <_dtoa_r+0x916>
 800486a:	9803      	ldr	r0, [sp, #12]
 800486c:	4621      	mov	r1, r4
 800486e:	f000 fd15 	bl	800529c <__mcmp>
 8004872:	2800      	cmp	r0, #0
 8004874:	da5b      	bge.n	800492e <_dtoa_r+0x916>
 8004876:	2300      	movs	r3, #0
 8004878:	9903      	ldr	r1, [sp, #12]
 800487a:	220a      	movs	r2, #10
 800487c:	4648      	mov	r0, r9
 800487e:	f000 fafd 	bl	8004e7c <__multadd>
 8004882:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004884:	9003      	str	r0, [sp, #12]
 8004886:	f107 38ff 	add.w	r8, r7, #4294967295
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 8177 	beq.w	8004b7e <_dtoa_r+0xb66>
 8004890:	4629      	mov	r1, r5
 8004892:	2300      	movs	r3, #0
 8004894:	220a      	movs	r2, #10
 8004896:	4648      	mov	r0, r9
 8004898:	f000 faf0 	bl	8004e7c <__multadd>
 800489c:	f1bb 0f00 	cmp.w	fp, #0
 80048a0:	4605      	mov	r5, r0
 80048a2:	dc6f      	bgt.n	8004984 <_dtoa_r+0x96c>
 80048a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	dc49      	bgt.n	800493e <_dtoa_r+0x926>
 80048aa:	e06b      	b.n	8004984 <_dtoa_r+0x96c>
 80048ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80048ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80048b2:	e73c      	b.n	800472e <_dtoa_r+0x716>
 80048b4:	3fe00000 	.word	0x3fe00000
 80048b8:	40240000 	.word	0x40240000
 80048bc:	9b08      	ldr	r3, [sp, #32]
 80048be:	1e5c      	subs	r4, r3, #1
 80048c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048c2:	42a3      	cmp	r3, r4
 80048c4:	db09      	blt.n	80048da <_dtoa_r+0x8c2>
 80048c6:	1b1c      	subs	r4, r3, r4
 80048c8:	9b08      	ldr	r3, [sp, #32]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f6bf af30 	bge.w	8004730 <_dtoa_r+0x718>
 80048d0:	9b04      	ldr	r3, [sp, #16]
 80048d2:	9a08      	ldr	r2, [sp, #32]
 80048d4:	1a9e      	subs	r6, r3, r2
 80048d6:	2300      	movs	r3, #0
 80048d8:	e72b      	b.n	8004732 <_dtoa_r+0x71a>
 80048da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80048de:	940a      	str	r4, [sp, #40]	@ 0x28
 80048e0:	1ae3      	subs	r3, r4, r3
 80048e2:	441a      	add	r2, r3
 80048e4:	9e04      	ldr	r6, [sp, #16]
 80048e6:	9b08      	ldr	r3, [sp, #32]
 80048e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80048ea:	2400      	movs	r4, #0
 80048ec:	e721      	b.n	8004732 <_dtoa_r+0x71a>
 80048ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80048f0:	9e04      	ldr	r6, [sp, #16]
 80048f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80048f4:	e728      	b.n	8004748 <_dtoa_r+0x730>
 80048f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80048fa:	e751      	b.n	80047a0 <_dtoa_r+0x788>
 80048fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80048fe:	9903      	ldr	r1, [sp, #12]
 8004900:	e750      	b.n	80047a4 <_dtoa_r+0x78c>
 8004902:	f8cd 800c 	str.w	r8, [sp, #12]
 8004906:	e751      	b.n	80047ac <_dtoa_r+0x794>
 8004908:	2300      	movs	r3, #0
 800490a:	e779      	b.n	8004800 <_dtoa_r+0x7e8>
 800490c:	9b06      	ldr	r3, [sp, #24]
 800490e:	e777      	b.n	8004800 <_dtoa_r+0x7e8>
 8004910:	2300      	movs	r3, #0
 8004912:	930a      	str	r3, [sp, #40]	@ 0x28
 8004914:	e779      	b.n	800480a <_dtoa_r+0x7f2>
 8004916:	d093      	beq.n	8004840 <_dtoa_r+0x828>
 8004918:	9a04      	ldr	r2, [sp, #16]
 800491a:	331c      	adds	r3, #28
 800491c:	441a      	add	r2, r3
 800491e:	9204      	str	r2, [sp, #16]
 8004920:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004922:	441a      	add	r2, r3
 8004924:	441e      	add	r6, r3
 8004926:	9209      	str	r2, [sp, #36]	@ 0x24
 8004928:	e78a      	b.n	8004840 <_dtoa_r+0x828>
 800492a:	4603      	mov	r3, r0
 800492c:	e7f4      	b.n	8004918 <_dtoa_r+0x900>
 800492e:	9b08      	ldr	r3, [sp, #32]
 8004930:	2b00      	cmp	r3, #0
 8004932:	46b8      	mov	r8, r7
 8004934:	dc20      	bgt.n	8004978 <_dtoa_r+0x960>
 8004936:	469b      	mov	fp, r3
 8004938:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800493a:	2b02      	cmp	r3, #2
 800493c:	dd1e      	ble.n	800497c <_dtoa_r+0x964>
 800493e:	f1bb 0f00 	cmp.w	fp, #0
 8004942:	f47f adb1 	bne.w	80044a8 <_dtoa_r+0x490>
 8004946:	4621      	mov	r1, r4
 8004948:	465b      	mov	r3, fp
 800494a:	2205      	movs	r2, #5
 800494c:	4648      	mov	r0, r9
 800494e:	f000 fa95 	bl	8004e7c <__multadd>
 8004952:	4601      	mov	r1, r0
 8004954:	4604      	mov	r4, r0
 8004956:	9803      	ldr	r0, [sp, #12]
 8004958:	f000 fca0 	bl	800529c <__mcmp>
 800495c:	2800      	cmp	r0, #0
 800495e:	f77f ada3 	ble.w	80044a8 <_dtoa_r+0x490>
 8004962:	4656      	mov	r6, sl
 8004964:	2331      	movs	r3, #49	@ 0x31
 8004966:	f806 3b01 	strb.w	r3, [r6], #1
 800496a:	f108 0801 	add.w	r8, r8, #1
 800496e:	e59f      	b.n	80044b0 <_dtoa_r+0x498>
 8004970:	9c08      	ldr	r4, [sp, #32]
 8004972:	46b8      	mov	r8, r7
 8004974:	4625      	mov	r5, r4
 8004976:	e7f4      	b.n	8004962 <_dtoa_r+0x94a>
 8004978:	f8dd b020 	ldr.w	fp, [sp, #32]
 800497c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 8101 	beq.w	8004b86 <_dtoa_r+0xb6e>
 8004984:	2e00      	cmp	r6, #0
 8004986:	dd05      	ble.n	8004994 <_dtoa_r+0x97c>
 8004988:	4629      	mov	r1, r5
 800498a:	4632      	mov	r2, r6
 800498c:	4648      	mov	r0, r9
 800498e:	f000 fc19 	bl	80051c4 <__lshift>
 8004992:	4605      	mov	r5, r0
 8004994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004996:	2b00      	cmp	r3, #0
 8004998:	d05c      	beq.n	8004a54 <_dtoa_r+0xa3c>
 800499a:	6869      	ldr	r1, [r5, #4]
 800499c:	4648      	mov	r0, r9
 800499e:	f000 fa0b 	bl	8004db8 <_Balloc>
 80049a2:	4606      	mov	r6, r0
 80049a4:	b928      	cbnz	r0, 80049b2 <_dtoa_r+0x99a>
 80049a6:	4b82      	ldr	r3, [pc, #520]	@ (8004bb0 <_dtoa_r+0xb98>)
 80049a8:	4602      	mov	r2, r0
 80049aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80049ae:	f7ff bb47 	b.w	8004040 <_dtoa_r+0x28>
 80049b2:	692a      	ldr	r2, [r5, #16]
 80049b4:	3202      	adds	r2, #2
 80049b6:	0092      	lsls	r2, r2, #2
 80049b8:	f105 010c 	add.w	r1, r5, #12
 80049bc:	300c      	adds	r0, #12
 80049be:	f7ff fa94 	bl	8003eea <memcpy>
 80049c2:	2201      	movs	r2, #1
 80049c4:	4631      	mov	r1, r6
 80049c6:	4648      	mov	r0, r9
 80049c8:	f000 fbfc 	bl	80051c4 <__lshift>
 80049cc:	f10a 0301 	add.w	r3, sl, #1
 80049d0:	9304      	str	r3, [sp, #16]
 80049d2:	eb0a 030b 	add.w	r3, sl, fp
 80049d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80049d8:	9b06      	ldr	r3, [sp, #24]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	462f      	mov	r7, r5
 80049e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80049e2:	4605      	mov	r5, r0
 80049e4:	9b04      	ldr	r3, [sp, #16]
 80049e6:	9803      	ldr	r0, [sp, #12]
 80049e8:	4621      	mov	r1, r4
 80049ea:	f103 3bff 	add.w	fp, r3, #4294967295
 80049ee:	f7ff fa8a 	bl	8003f06 <quorem>
 80049f2:	4603      	mov	r3, r0
 80049f4:	3330      	adds	r3, #48	@ 0x30
 80049f6:	9006      	str	r0, [sp, #24]
 80049f8:	4639      	mov	r1, r7
 80049fa:	9803      	ldr	r0, [sp, #12]
 80049fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049fe:	f000 fc4d 	bl	800529c <__mcmp>
 8004a02:	462a      	mov	r2, r5
 8004a04:	9008      	str	r0, [sp, #32]
 8004a06:	4621      	mov	r1, r4
 8004a08:	4648      	mov	r0, r9
 8004a0a:	f000 fc63 	bl	80052d4 <__mdiff>
 8004a0e:	68c2      	ldr	r2, [r0, #12]
 8004a10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a12:	4606      	mov	r6, r0
 8004a14:	bb02      	cbnz	r2, 8004a58 <_dtoa_r+0xa40>
 8004a16:	4601      	mov	r1, r0
 8004a18:	9803      	ldr	r0, [sp, #12]
 8004a1a:	f000 fc3f 	bl	800529c <__mcmp>
 8004a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a20:	4602      	mov	r2, r0
 8004a22:	4631      	mov	r1, r6
 8004a24:	4648      	mov	r0, r9
 8004a26:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004a2a:	f000 fa05 	bl	8004e38 <_Bfree>
 8004a2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a30:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004a32:	9e04      	ldr	r6, [sp, #16]
 8004a34:	ea42 0103 	orr.w	r1, r2, r3
 8004a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a3a:	4319      	orrs	r1, r3
 8004a3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a3e:	d10d      	bne.n	8004a5c <_dtoa_r+0xa44>
 8004a40:	2b39      	cmp	r3, #57	@ 0x39
 8004a42:	d027      	beq.n	8004a94 <_dtoa_r+0xa7c>
 8004a44:	9a08      	ldr	r2, [sp, #32]
 8004a46:	2a00      	cmp	r2, #0
 8004a48:	dd01      	ble.n	8004a4e <_dtoa_r+0xa36>
 8004a4a:	9b06      	ldr	r3, [sp, #24]
 8004a4c:	3331      	adds	r3, #49	@ 0x31
 8004a4e:	f88b 3000 	strb.w	r3, [fp]
 8004a52:	e52e      	b.n	80044b2 <_dtoa_r+0x49a>
 8004a54:	4628      	mov	r0, r5
 8004a56:	e7b9      	b.n	80049cc <_dtoa_r+0x9b4>
 8004a58:	2201      	movs	r2, #1
 8004a5a:	e7e2      	b.n	8004a22 <_dtoa_r+0xa0a>
 8004a5c:	9908      	ldr	r1, [sp, #32]
 8004a5e:	2900      	cmp	r1, #0
 8004a60:	db04      	blt.n	8004a6c <_dtoa_r+0xa54>
 8004a62:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004a64:	4301      	orrs	r1, r0
 8004a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a68:	4301      	orrs	r1, r0
 8004a6a:	d120      	bne.n	8004aae <_dtoa_r+0xa96>
 8004a6c:	2a00      	cmp	r2, #0
 8004a6e:	ddee      	ble.n	8004a4e <_dtoa_r+0xa36>
 8004a70:	9903      	ldr	r1, [sp, #12]
 8004a72:	9304      	str	r3, [sp, #16]
 8004a74:	2201      	movs	r2, #1
 8004a76:	4648      	mov	r0, r9
 8004a78:	f000 fba4 	bl	80051c4 <__lshift>
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	9003      	str	r0, [sp, #12]
 8004a80:	f000 fc0c 	bl	800529c <__mcmp>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	9b04      	ldr	r3, [sp, #16]
 8004a88:	dc02      	bgt.n	8004a90 <_dtoa_r+0xa78>
 8004a8a:	d1e0      	bne.n	8004a4e <_dtoa_r+0xa36>
 8004a8c:	07da      	lsls	r2, r3, #31
 8004a8e:	d5de      	bpl.n	8004a4e <_dtoa_r+0xa36>
 8004a90:	2b39      	cmp	r3, #57	@ 0x39
 8004a92:	d1da      	bne.n	8004a4a <_dtoa_r+0xa32>
 8004a94:	2339      	movs	r3, #57	@ 0x39
 8004a96:	f88b 3000 	strb.w	r3, [fp]
 8004a9a:	4633      	mov	r3, r6
 8004a9c:	461e      	mov	r6, r3
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004aa4:	2a39      	cmp	r2, #57	@ 0x39
 8004aa6:	d04e      	beq.n	8004b46 <_dtoa_r+0xb2e>
 8004aa8:	3201      	adds	r2, #1
 8004aaa:	701a      	strb	r2, [r3, #0]
 8004aac:	e501      	b.n	80044b2 <_dtoa_r+0x49a>
 8004aae:	2a00      	cmp	r2, #0
 8004ab0:	dd03      	ble.n	8004aba <_dtoa_r+0xaa2>
 8004ab2:	2b39      	cmp	r3, #57	@ 0x39
 8004ab4:	d0ee      	beq.n	8004a94 <_dtoa_r+0xa7c>
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	e7c9      	b.n	8004a4e <_dtoa_r+0xa36>
 8004aba:	9a04      	ldr	r2, [sp, #16]
 8004abc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004abe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004ac2:	428a      	cmp	r2, r1
 8004ac4:	d028      	beq.n	8004b18 <_dtoa_r+0xb00>
 8004ac6:	9903      	ldr	r1, [sp, #12]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	220a      	movs	r2, #10
 8004acc:	4648      	mov	r0, r9
 8004ace:	f000 f9d5 	bl	8004e7c <__multadd>
 8004ad2:	42af      	cmp	r7, r5
 8004ad4:	9003      	str	r0, [sp, #12]
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	f04f 020a 	mov.w	r2, #10
 8004ade:	4639      	mov	r1, r7
 8004ae0:	4648      	mov	r0, r9
 8004ae2:	d107      	bne.n	8004af4 <_dtoa_r+0xadc>
 8004ae4:	f000 f9ca 	bl	8004e7c <__multadd>
 8004ae8:	4607      	mov	r7, r0
 8004aea:	4605      	mov	r5, r0
 8004aec:	9b04      	ldr	r3, [sp, #16]
 8004aee:	3301      	adds	r3, #1
 8004af0:	9304      	str	r3, [sp, #16]
 8004af2:	e777      	b.n	80049e4 <_dtoa_r+0x9cc>
 8004af4:	f000 f9c2 	bl	8004e7c <__multadd>
 8004af8:	4629      	mov	r1, r5
 8004afa:	4607      	mov	r7, r0
 8004afc:	2300      	movs	r3, #0
 8004afe:	220a      	movs	r2, #10
 8004b00:	4648      	mov	r0, r9
 8004b02:	f000 f9bb 	bl	8004e7c <__multadd>
 8004b06:	4605      	mov	r5, r0
 8004b08:	e7f0      	b.n	8004aec <_dtoa_r+0xad4>
 8004b0a:	f1bb 0f00 	cmp.w	fp, #0
 8004b0e:	bfcc      	ite	gt
 8004b10:	465e      	movgt	r6, fp
 8004b12:	2601      	movle	r6, #1
 8004b14:	4456      	add	r6, sl
 8004b16:	2700      	movs	r7, #0
 8004b18:	9903      	ldr	r1, [sp, #12]
 8004b1a:	9304      	str	r3, [sp, #16]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	4648      	mov	r0, r9
 8004b20:	f000 fb50 	bl	80051c4 <__lshift>
 8004b24:	4621      	mov	r1, r4
 8004b26:	9003      	str	r0, [sp, #12]
 8004b28:	f000 fbb8 	bl	800529c <__mcmp>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	dcb4      	bgt.n	8004a9a <_dtoa_r+0xa82>
 8004b30:	d102      	bne.n	8004b38 <_dtoa_r+0xb20>
 8004b32:	9b04      	ldr	r3, [sp, #16]
 8004b34:	07db      	lsls	r3, r3, #31
 8004b36:	d4b0      	bmi.n	8004a9a <_dtoa_r+0xa82>
 8004b38:	4633      	mov	r3, r6
 8004b3a:	461e      	mov	r6, r3
 8004b3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b40:	2a30      	cmp	r2, #48	@ 0x30
 8004b42:	d0fa      	beq.n	8004b3a <_dtoa_r+0xb22>
 8004b44:	e4b5      	b.n	80044b2 <_dtoa_r+0x49a>
 8004b46:	459a      	cmp	sl, r3
 8004b48:	d1a8      	bne.n	8004a9c <_dtoa_r+0xa84>
 8004b4a:	2331      	movs	r3, #49	@ 0x31
 8004b4c:	f108 0801 	add.w	r8, r8, #1
 8004b50:	f88a 3000 	strb.w	r3, [sl]
 8004b54:	e4ad      	b.n	80044b2 <_dtoa_r+0x49a>
 8004b56:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004b58:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004bb4 <_dtoa_r+0xb9c>
 8004b5c:	b11b      	cbz	r3, 8004b66 <_dtoa_r+0xb4e>
 8004b5e:	f10a 0308 	add.w	r3, sl, #8
 8004b62:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	4650      	mov	r0, sl
 8004b68:	b017      	add	sp, #92	@ 0x5c
 8004b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	f77f ae2e 	ble.w	80047d2 <_dtoa_r+0x7ba>
 8004b76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b78:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b7a:	2001      	movs	r0, #1
 8004b7c:	e64d      	b.n	800481a <_dtoa_r+0x802>
 8004b7e:	f1bb 0f00 	cmp.w	fp, #0
 8004b82:	f77f aed9 	ble.w	8004938 <_dtoa_r+0x920>
 8004b86:	4656      	mov	r6, sl
 8004b88:	9803      	ldr	r0, [sp, #12]
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	f7ff f9bb 	bl	8003f06 <quorem>
 8004b90:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004b94:	f806 3b01 	strb.w	r3, [r6], #1
 8004b98:	eba6 020a 	sub.w	r2, r6, sl
 8004b9c:	4593      	cmp	fp, r2
 8004b9e:	ddb4      	ble.n	8004b0a <_dtoa_r+0xaf2>
 8004ba0:	9903      	ldr	r1, [sp, #12]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	220a      	movs	r2, #10
 8004ba6:	4648      	mov	r0, r9
 8004ba8:	f000 f968 	bl	8004e7c <__multadd>
 8004bac:	9003      	str	r0, [sp, #12]
 8004bae:	e7eb      	b.n	8004b88 <_dtoa_r+0xb70>
 8004bb0:	08006fc0 	.word	0x08006fc0
 8004bb4:	08006f44 	.word	0x08006f44

08004bb8 <_free_r>:
 8004bb8:	b538      	push	{r3, r4, r5, lr}
 8004bba:	4605      	mov	r5, r0
 8004bbc:	2900      	cmp	r1, #0
 8004bbe:	d041      	beq.n	8004c44 <_free_r+0x8c>
 8004bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bc4:	1f0c      	subs	r4, r1, #4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	bfb8      	it	lt
 8004bca:	18e4      	addlt	r4, r4, r3
 8004bcc:	f000 f8e8 	bl	8004da0 <__malloc_lock>
 8004bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c48 <_free_r+0x90>)
 8004bd2:	6813      	ldr	r3, [r2, #0]
 8004bd4:	b933      	cbnz	r3, 8004be4 <_free_r+0x2c>
 8004bd6:	6063      	str	r3, [r4, #4]
 8004bd8:	6014      	str	r4, [r2, #0]
 8004bda:	4628      	mov	r0, r5
 8004bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004be0:	f000 b8e4 	b.w	8004dac <__malloc_unlock>
 8004be4:	42a3      	cmp	r3, r4
 8004be6:	d908      	bls.n	8004bfa <_free_r+0x42>
 8004be8:	6820      	ldr	r0, [r4, #0]
 8004bea:	1821      	adds	r1, r4, r0
 8004bec:	428b      	cmp	r3, r1
 8004bee:	bf01      	itttt	eq
 8004bf0:	6819      	ldreq	r1, [r3, #0]
 8004bf2:	685b      	ldreq	r3, [r3, #4]
 8004bf4:	1809      	addeq	r1, r1, r0
 8004bf6:	6021      	streq	r1, [r4, #0]
 8004bf8:	e7ed      	b.n	8004bd6 <_free_r+0x1e>
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	b10b      	cbz	r3, 8004c04 <_free_r+0x4c>
 8004c00:	42a3      	cmp	r3, r4
 8004c02:	d9fa      	bls.n	8004bfa <_free_r+0x42>
 8004c04:	6811      	ldr	r1, [r2, #0]
 8004c06:	1850      	adds	r0, r2, r1
 8004c08:	42a0      	cmp	r0, r4
 8004c0a:	d10b      	bne.n	8004c24 <_free_r+0x6c>
 8004c0c:	6820      	ldr	r0, [r4, #0]
 8004c0e:	4401      	add	r1, r0
 8004c10:	1850      	adds	r0, r2, r1
 8004c12:	4283      	cmp	r3, r0
 8004c14:	6011      	str	r1, [r2, #0]
 8004c16:	d1e0      	bne.n	8004bda <_free_r+0x22>
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	6053      	str	r3, [r2, #4]
 8004c1e:	4408      	add	r0, r1
 8004c20:	6010      	str	r0, [r2, #0]
 8004c22:	e7da      	b.n	8004bda <_free_r+0x22>
 8004c24:	d902      	bls.n	8004c2c <_free_r+0x74>
 8004c26:	230c      	movs	r3, #12
 8004c28:	602b      	str	r3, [r5, #0]
 8004c2a:	e7d6      	b.n	8004bda <_free_r+0x22>
 8004c2c:	6820      	ldr	r0, [r4, #0]
 8004c2e:	1821      	adds	r1, r4, r0
 8004c30:	428b      	cmp	r3, r1
 8004c32:	bf04      	itt	eq
 8004c34:	6819      	ldreq	r1, [r3, #0]
 8004c36:	685b      	ldreq	r3, [r3, #4]
 8004c38:	6063      	str	r3, [r4, #4]
 8004c3a:	bf04      	itt	eq
 8004c3c:	1809      	addeq	r1, r1, r0
 8004c3e:	6021      	streq	r1, [r4, #0]
 8004c40:	6054      	str	r4, [r2, #4]
 8004c42:	e7ca      	b.n	8004bda <_free_r+0x22>
 8004c44:	bd38      	pop	{r3, r4, r5, pc}
 8004c46:	bf00      	nop
 8004c48:	2000062c 	.word	0x2000062c

08004c4c <malloc>:
 8004c4c:	4b02      	ldr	r3, [pc, #8]	@ (8004c58 <malloc+0xc>)
 8004c4e:	4601      	mov	r1, r0
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	f000 b825 	b.w	8004ca0 <_malloc_r>
 8004c56:	bf00      	nop
 8004c58:	20000038 	.word	0x20000038

08004c5c <sbrk_aligned>:
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	4e0f      	ldr	r6, [pc, #60]	@ (8004c9c <sbrk_aligned+0x40>)
 8004c60:	460c      	mov	r4, r1
 8004c62:	6831      	ldr	r1, [r6, #0]
 8004c64:	4605      	mov	r5, r0
 8004c66:	b911      	cbnz	r1, 8004c6e <sbrk_aligned+0x12>
 8004c68:	f000 fe38 	bl	80058dc <_sbrk_r>
 8004c6c:	6030      	str	r0, [r6, #0]
 8004c6e:	4621      	mov	r1, r4
 8004c70:	4628      	mov	r0, r5
 8004c72:	f000 fe33 	bl	80058dc <_sbrk_r>
 8004c76:	1c43      	adds	r3, r0, #1
 8004c78:	d103      	bne.n	8004c82 <sbrk_aligned+0x26>
 8004c7a:	f04f 34ff 	mov.w	r4, #4294967295
 8004c7e:	4620      	mov	r0, r4
 8004c80:	bd70      	pop	{r4, r5, r6, pc}
 8004c82:	1cc4      	adds	r4, r0, #3
 8004c84:	f024 0403 	bic.w	r4, r4, #3
 8004c88:	42a0      	cmp	r0, r4
 8004c8a:	d0f8      	beq.n	8004c7e <sbrk_aligned+0x22>
 8004c8c:	1a21      	subs	r1, r4, r0
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f000 fe24 	bl	80058dc <_sbrk_r>
 8004c94:	3001      	adds	r0, #1
 8004c96:	d1f2      	bne.n	8004c7e <sbrk_aligned+0x22>
 8004c98:	e7ef      	b.n	8004c7a <sbrk_aligned+0x1e>
 8004c9a:	bf00      	nop
 8004c9c:	20000628 	.word	0x20000628

08004ca0 <_malloc_r>:
 8004ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ca4:	1ccd      	adds	r5, r1, #3
 8004ca6:	f025 0503 	bic.w	r5, r5, #3
 8004caa:	3508      	adds	r5, #8
 8004cac:	2d0c      	cmp	r5, #12
 8004cae:	bf38      	it	cc
 8004cb0:	250c      	movcc	r5, #12
 8004cb2:	2d00      	cmp	r5, #0
 8004cb4:	4606      	mov	r6, r0
 8004cb6:	db01      	blt.n	8004cbc <_malloc_r+0x1c>
 8004cb8:	42a9      	cmp	r1, r5
 8004cba:	d904      	bls.n	8004cc6 <_malloc_r+0x26>
 8004cbc:	230c      	movs	r3, #12
 8004cbe:	6033      	str	r3, [r6, #0]
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d9c <_malloc_r+0xfc>
 8004cca:	f000 f869 	bl	8004da0 <__malloc_lock>
 8004cce:	f8d8 3000 	ldr.w	r3, [r8]
 8004cd2:	461c      	mov	r4, r3
 8004cd4:	bb44      	cbnz	r4, 8004d28 <_malloc_r+0x88>
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	4630      	mov	r0, r6
 8004cda:	f7ff ffbf 	bl	8004c5c <sbrk_aligned>
 8004cde:	1c43      	adds	r3, r0, #1
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	d158      	bne.n	8004d96 <_malloc_r+0xf6>
 8004ce4:	f8d8 4000 	ldr.w	r4, [r8]
 8004ce8:	4627      	mov	r7, r4
 8004cea:	2f00      	cmp	r7, #0
 8004cec:	d143      	bne.n	8004d76 <_malloc_r+0xd6>
 8004cee:	2c00      	cmp	r4, #0
 8004cf0:	d04b      	beq.n	8004d8a <_malloc_r+0xea>
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	4639      	mov	r1, r7
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	eb04 0903 	add.w	r9, r4, r3
 8004cfc:	f000 fdee 	bl	80058dc <_sbrk_r>
 8004d00:	4581      	cmp	r9, r0
 8004d02:	d142      	bne.n	8004d8a <_malloc_r+0xea>
 8004d04:	6821      	ldr	r1, [r4, #0]
 8004d06:	1a6d      	subs	r5, r5, r1
 8004d08:	4629      	mov	r1, r5
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	f7ff ffa6 	bl	8004c5c <sbrk_aligned>
 8004d10:	3001      	adds	r0, #1
 8004d12:	d03a      	beq.n	8004d8a <_malloc_r+0xea>
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	442b      	add	r3, r5
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	bb62      	cbnz	r2, 8004d7c <_malloc_r+0xdc>
 8004d22:	f8c8 7000 	str.w	r7, [r8]
 8004d26:	e00f      	b.n	8004d48 <_malloc_r+0xa8>
 8004d28:	6822      	ldr	r2, [r4, #0]
 8004d2a:	1b52      	subs	r2, r2, r5
 8004d2c:	d420      	bmi.n	8004d70 <_malloc_r+0xd0>
 8004d2e:	2a0b      	cmp	r2, #11
 8004d30:	d917      	bls.n	8004d62 <_malloc_r+0xc2>
 8004d32:	1961      	adds	r1, r4, r5
 8004d34:	42a3      	cmp	r3, r4
 8004d36:	6025      	str	r5, [r4, #0]
 8004d38:	bf18      	it	ne
 8004d3a:	6059      	strne	r1, [r3, #4]
 8004d3c:	6863      	ldr	r3, [r4, #4]
 8004d3e:	bf08      	it	eq
 8004d40:	f8c8 1000 	streq.w	r1, [r8]
 8004d44:	5162      	str	r2, [r4, r5]
 8004d46:	604b      	str	r3, [r1, #4]
 8004d48:	4630      	mov	r0, r6
 8004d4a:	f000 f82f 	bl	8004dac <__malloc_unlock>
 8004d4e:	f104 000b 	add.w	r0, r4, #11
 8004d52:	1d23      	adds	r3, r4, #4
 8004d54:	f020 0007 	bic.w	r0, r0, #7
 8004d58:	1ac2      	subs	r2, r0, r3
 8004d5a:	bf1c      	itt	ne
 8004d5c:	1a1b      	subne	r3, r3, r0
 8004d5e:	50a3      	strne	r3, [r4, r2]
 8004d60:	e7af      	b.n	8004cc2 <_malloc_r+0x22>
 8004d62:	6862      	ldr	r2, [r4, #4]
 8004d64:	42a3      	cmp	r3, r4
 8004d66:	bf0c      	ite	eq
 8004d68:	f8c8 2000 	streq.w	r2, [r8]
 8004d6c:	605a      	strne	r2, [r3, #4]
 8004d6e:	e7eb      	b.n	8004d48 <_malloc_r+0xa8>
 8004d70:	4623      	mov	r3, r4
 8004d72:	6864      	ldr	r4, [r4, #4]
 8004d74:	e7ae      	b.n	8004cd4 <_malloc_r+0x34>
 8004d76:	463c      	mov	r4, r7
 8004d78:	687f      	ldr	r7, [r7, #4]
 8004d7a:	e7b6      	b.n	8004cea <_malloc_r+0x4a>
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	42a3      	cmp	r3, r4
 8004d82:	d1fb      	bne.n	8004d7c <_malloc_r+0xdc>
 8004d84:	2300      	movs	r3, #0
 8004d86:	6053      	str	r3, [r2, #4]
 8004d88:	e7de      	b.n	8004d48 <_malloc_r+0xa8>
 8004d8a:	230c      	movs	r3, #12
 8004d8c:	6033      	str	r3, [r6, #0]
 8004d8e:	4630      	mov	r0, r6
 8004d90:	f000 f80c 	bl	8004dac <__malloc_unlock>
 8004d94:	e794      	b.n	8004cc0 <_malloc_r+0x20>
 8004d96:	6005      	str	r5, [r0, #0]
 8004d98:	e7d6      	b.n	8004d48 <_malloc_r+0xa8>
 8004d9a:	bf00      	nop
 8004d9c:	2000062c 	.word	0x2000062c

08004da0 <__malloc_lock>:
 8004da0:	4801      	ldr	r0, [pc, #4]	@ (8004da8 <__malloc_lock+0x8>)
 8004da2:	f7ff b8a0 	b.w	8003ee6 <__retarget_lock_acquire_recursive>
 8004da6:	bf00      	nop
 8004da8:	20000624 	.word	0x20000624

08004dac <__malloc_unlock>:
 8004dac:	4801      	ldr	r0, [pc, #4]	@ (8004db4 <__malloc_unlock+0x8>)
 8004dae:	f7ff b89b 	b.w	8003ee8 <__retarget_lock_release_recursive>
 8004db2:	bf00      	nop
 8004db4:	20000624 	.word	0x20000624

08004db8 <_Balloc>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	69c6      	ldr	r6, [r0, #28]
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	460d      	mov	r5, r1
 8004dc0:	b976      	cbnz	r6, 8004de0 <_Balloc+0x28>
 8004dc2:	2010      	movs	r0, #16
 8004dc4:	f7ff ff42 	bl	8004c4c <malloc>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	61e0      	str	r0, [r4, #28]
 8004dcc:	b920      	cbnz	r0, 8004dd8 <_Balloc+0x20>
 8004dce:	4b18      	ldr	r3, [pc, #96]	@ (8004e30 <_Balloc+0x78>)
 8004dd0:	4818      	ldr	r0, [pc, #96]	@ (8004e34 <_Balloc+0x7c>)
 8004dd2:	216b      	movs	r1, #107	@ 0x6b
 8004dd4:	f000 fd92 	bl	80058fc <__assert_func>
 8004dd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ddc:	6006      	str	r6, [r0, #0]
 8004dde:	60c6      	str	r6, [r0, #12]
 8004de0:	69e6      	ldr	r6, [r4, #28]
 8004de2:	68f3      	ldr	r3, [r6, #12]
 8004de4:	b183      	cbz	r3, 8004e08 <_Balloc+0x50>
 8004de6:	69e3      	ldr	r3, [r4, #28]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004dee:	b9b8      	cbnz	r0, 8004e20 <_Balloc+0x68>
 8004df0:	2101      	movs	r1, #1
 8004df2:	fa01 f605 	lsl.w	r6, r1, r5
 8004df6:	1d72      	adds	r2, r6, #5
 8004df8:	0092      	lsls	r2, r2, #2
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f000 fd9c 	bl	8005938 <_calloc_r>
 8004e00:	b160      	cbz	r0, 8004e1c <_Balloc+0x64>
 8004e02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004e06:	e00e      	b.n	8004e26 <_Balloc+0x6e>
 8004e08:	2221      	movs	r2, #33	@ 0x21
 8004e0a:	2104      	movs	r1, #4
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f000 fd93 	bl	8005938 <_calloc_r>
 8004e12:	69e3      	ldr	r3, [r4, #28]
 8004e14:	60f0      	str	r0, [r6, #12]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e4      	bne.n	8004de6 <_Balloc+0x2e>
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}
 8004e20:	6802      	ldr	r2, [r0, #0]
 8004e22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e26:	2300      	movs	r3, #0
 8004e28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e2c:	e7f7      	b.n	8004e1e <_Balloc+0x66>
 8004e2e:	bf00      	nop
 8004e30:	08006f51 	.word	0x08006f51
 8004e34:	08006fd1 	.word	0x08006fd1

08004e38 <_Bfree>:
 8004e38:	b570      	push	{r4, r5, r6, lr}
 8004e3a:	69c6      	ldr	r6, [r0, #28]
 8004e3c:	4605      	mov	r5, r0
 8004e3e:	460c      	mov	r4, r1
 8004e40:	b976      	cbnz	r6, 8004e60 <_Bfree+0x28>
 8004e42:	2010      	movs	r0, #16
 8004e44:	f7ff ff02 	bl	8004c4c <malloc>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	61e8      	str	r0, [r5, #28]
 8004e4c:	b920      	cbnz	r0, 8004e58 <_Bfree+0x20>
 8004e4e:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <_Bfree+0x3c>)
 8004e50:	4809      	ldr	r0, [pc, #36]	@ (8004e78 <_Bfree+0x40>)
 8004e52:	218f      	movs	r1, #143	@ 0x8f
 8004e54:	f000 fd52 	bl	80058fc <__assert_func>
 8004e58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e5c:	6006      	str	r6, [r0, #0]
 8004e5e:	60c6      	str	r6, [r0, #12]
 8004e60:	b13c      	cbz	r4, 8004e72 <_Bfree+0x3a>
 8004e62:	69eb      	ldr	r3, [r5, #28]
 8004e64:	6862      	ldr	r2, [r4, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e6c:	6021      	str	r1, [r4, #0]
 8004e6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e72:	bd70      	pop	{r4, r5, r6, pc}
 8004e74:	08006f51 	.word	0x08006f51
 8004e78:	08006fd1 	.word	0x08006fd1

08004e7c <__multadd>:
 8004e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e80:	690d      	ldr	r5, [r1, #16]
 8004e82:	4607      	mov	r7, r0
 8004e84:	460c      	mov	r4, r1
 8004e86:	461e      	mov	r6, r3
 8004e88:	f101 0c14 	add.w	ip, r1, #20
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	f8dc 3000 	ldr.w	r3, [ip]
 8004e92:	b299      	uxth	r1, r3
 8004e94:	fb02 6101 	mla	r1, r2, r1, r6
 8004e98:	0c1e      	lsrs	r6, r3, #16
 8004e9a:	0c0b      	lsrs	r3, r1, #16
 8004e9c:	fb02 3306 	mla	r3, r2, r6, r3
 8004ea0:	b289      	uxth	r1, r1
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004ea8:	4285      	cmp	r5, r0
 8004eaa:	f84c 1b04 	str.w	r1, [ip], #4
 8004eae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004eb2:	dcec      	bgt.n	8004e8e <__multadd+0x12>
 8004eb4:	b30e      	cbz	r6, 8004efa <__multadd+0x7e>
 8004eb6:	68a3      	ldr	r3, [r4, #8]
 8004eb8:	42ab      	cmp	r3, r5
 8004eba:	dc19      	bgt.n	8004ef0 <__multadd+0x74>
 8004ebc:	6861      	ldr	r1, [r4, #4]
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	3101      	adds	r1, #1
 8004ec2:	f7ff ff79 	bl	8004db8 <_Balloc>
 8004ec6:	4680      	mov	r8, r0
 8004ec8:	b928      	cbnz	r0, 8004ed6 <__multadd+0x5a>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8004f00 <__multadd+0x84>)
 8004ece:	480d      	ldr	r0, [pc, #52]	@ (8004f04 <__multadd+0x88>)
 8004ed0:	21ba      	movs	r1, #186	@ 0xba
 8004ed2:	f000 fd13 	bl	80058fc <__assert_func>
 8004ed6:	6922      	ldr	r2, [r4, #16]
 8004ed8:	3202      	adds	r2, #2
 8004eda:	f104 010c 	add.w	r1, r4, #12
 8004ede:	0092      	lsls	r2, r2, #2
 8004ee0:	300c      	adds	r0, #12
 8004ee2:	f7ff f802 	bl	8003eea <memcpy>
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	4638      	mov	r0, r7
 8004eea:	f7ff ffa5 	bl	8004e38 <_Bfree>
 8004eee:	4644      	mov	r4, r8
 8004ef0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ef4:	3501      	adds	r5, #1
 8004ef6:	615e      	str	r6, [r3, #20]
 8004ef8:	6125      	str	r5, [r4, #16]
 8004efa:	4620      	mov	r0, r4
 8004efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f00:	08006fc0 	.word	0x08006fc0
 8004f04:	08006fd1 	.word	0x08006fd1

08004f08 <__hi0bits>:
 8004f08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	bf36      	itet	cc
 8004f10:	0403      	lslcc	r3, r0, #16
 8004f12:	2000      	movcs	r0, #0
 8004f14:	2010      	movcc	r0, #16
 8004f16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f1a:	bf3c      	itt	cc
 8004f1c:	021b      	lslcc	r3, r3, #8
 8004f1e:	3008      	addcc	r0, #8
 8004f20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f24:	bf3c      	itt	cc
 8004f26:	011b      	lslcc	r3, r3, #4
 8004f28:	3004      	addcc	r0, #4
 8004f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f2e:	bf3c      	itt	cc
 8004f30:	009b      	lslcc	r3, r3, #2
 8004f32:	3002      	addcc	r0, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	db05      	blt.n	8004f44 <__hi0bits+0x3c>
 8004f38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004f3c:	f100 0001 	add.w	r0, r0, #1
 8004f40:	bf08      	it	eq
 8004f42:	2020      	moveq	r0, #32
 8004f44:	4770      	bx	lr

08004f46 <__lo0bits>:
 8004f46:	6803      	ldr	r3, [r0, #0]
 8004f48:	4602      	mov	r2, r0
 8004f4a:	f013 0007 	ands.w	r0, r3, #7
 8004f4e:	d00b      	beq.n	8004f68 <__lo0bits+0x22>
 8004f50:	07d9      	lsls	r1, r3, #31
 8004f52:	d421      	bmi.n	8004f98 <__lo0bits+0x52>
 8004f54:	0798      	lsls	r0, r3, #30
 8004f56:	bf49      	itett	mi
 8004f58:	085b      	lsrmi	r3, r3, #1
 8004f5a:	089b      	lsrpl	r3, r3, #2
 8004f5c:	2001      	movmi	r0, #1
 8004f5e:	6013      	strmi	r3, [r2, #0]
 8004f60:	bf5c      	itt	pl
 8004f62:	6013      	strpl	r3, [r2, #0]
 8004f64:	2002      	movpl	r0, #2
 8004f66:	4770      	bx	lr
 8004f68:	b299      	uxth	r1, r3
 8004f6a:	b909      	cbnz	r1, 8004f70 <__lo0bits+0x2a>
 8004f6c:	0c1b      	lsrs	r3, r3, #16
 8004f6e:	2010      	movs	r0, #16
 8004f70:	b2d9      	uxtb	r1, r3
 8004f72:	b909      	cbnz	r1, 8004f78 <__lo0bits+0x32>
 8004f74:	3008      	adds	r0, #8
 8004f76:	0a1b      	lsrs	r3, r3, #8
 8004f78:	0719      	lsls	r1, r3, #28
 8004f7a:	bf04      	itt	eq
 8004f7c:	091b      	lsreq	r3, r3, #4
 8004f7e:	3004      	addeq	r0, #4
 8004f80:	0799      	lsls	r1, r3, #30
 8004f82:	bf04      	itt	eq
 8004f84:	089b      	lsreq	r3, r3, #2
 8004f86:	3002      	addeq	r0, #2
 8004f88:	07d9      	lsls	r1, r3, #31
 8004f8a:	d403      	bmi.n	8004f94 <__lo0bits+0x4e>
 8004f8c:	085b      	lsrs	r3, r3, #1
 8004f8e:	f100 0001 	add.w	r0, r0, #1
 8004f92:	d003      	beq.n	8004f9c <__lo0bits+0x56>
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	4770      	bx	lr
 8004f98:	2000      	movs	r0, #0
 8004f9a:	4770      	bx	lr
 8004f9c:	2020      	movs	r0, #32
 8004f9e:	4770      	bx	lr

08004fa0 <__i2b>:
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	460c      	mov	r4, r1
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	f7ff ff07 	bl	8004db8 <_Balloc>
 8004faa:	4602      	mov	r2, r0
 8004fac:	b928      	cbnz	r0, 8004fba <__i2b+0x1a>
 8004fae:	4b05      	ldr	r3, [pc, #20]	@ (8004fc4 <__i2b+0x24>)
 8004fb0:	4805      	ldr	r0, [pc, #20]	@ (8004fc8 <__i2b+0x28>)
 8004fb2:	f240 1145 	movw	r1, #325	@ 0x145
 8004fb6:	f000 fca1 	bl	80058fc <__assert_func>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	6144      	str	r4, [r0, #20]
 8004fbe:	6103      	str	r3, [r0, #16]
 8004fc0:	bd10      	pop	{r4, pc}
 8004fc2:	bf00      	nop
 8004fc4:	08006fc0 	.word	0x08006fc0
 8004fc8:	08006fd1 	.word	0x08006fd1

08004fcc <__multiply>:
 8004fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd0:	4617      	mov	r7, r2
 8004fd2:	690a      	ldr	r2, [r1, #16]
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	bfa8      	it	ge
 8004fda:	463b      	movge	r3, r7
 8004fdc:	4689      	mov	r9, r1
 8004fde:	bfa4      	itt	ge
 8004fe0:	460f      	movge	r7, r1
 8004fe2:	4699      	movge	r9, r3
 8004fe4:	693d      	ldr	r5, [r7, #16]
 8004fe6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	eb05 060a 	add.w	r6, r5, sl
 8004ff2:	42b3      	cmp	r3, r6
 8004ff4:	b085      	sub	sp, #20
 8004ff6:	bfb8      	it	lt
 8004ff8:	3101      	addlt	r1, #1
 8004ffa:	f7ff fedd 	bl	8004db8 <_Balloc>
 8004ffe:	b930      	cbnz	r0, 800500e <__multiply+0x42>
 8005000:	4602      	mov	r2, r0
 8005002:	4b41      	ldr	r3, [pc, #260]	@ (8005108 <__multiply+0x13c>)
 8005004:	4841      	ldr	r0, [pc, #260]	@ (800510c <__multiply+0x140>)
 8005006:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800500a:	f000 fc77 	bl	80058fc <__assert_func>
 800500e:	f100 0414 	add.w	r4, r0, #20
 8005012:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005016:	4623      	mov	r3, r4
 8005018:	2200      	movs	r2, #0
 800501a:	4573      	cmp	r3, lr
 800501c:	d320      	bcc.n	8005060 <__multiply+0x94>
 800501e:	f107 0814 	add.w	r8, r7, #20
 8005022:	f109 0114 	add.w	r1, r9, #20
 8005026:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800502a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800502e:	9302      	str	r3, [sp, #8]
 8005030:	1beb      	subs	r3, r5, r7
 8005032:	3b15      	subs	r3, #21
 8005034:	f023 0303 	bic.w	r3, r3, #3
 8005038:	3304      	adds	r3, #4
 800503a:	3715      	adds	r7, #21
 800503c:	42bd      	cmp	r5, r7
 800503e:	bf38      	it	cc
 8005040:	2304      	movcc	r3, #4
 8005042:	9301      	str	r3, [sp, #4]
 8005044:	9b02      	ldr	r3, [sp, #8]
 8005046:	9103      	str	r1, [sp, #12]
 8005048:	428b      	cmp	r3, r1
 800504a:	d80c      	bhi.n	8005066 <__multiply+0x9a>
 800504c:	2e00      	cmp	r6, #0
 800504e:	dd03      	ble.n	8005058 <__multiply+0x8c>
 8005050:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005054:	2b00      	cmp	r3, #0
 8005056:	d055      	beq.n	8005104 <__multiply+0x138>
 8005058:	6106      	str	r6, [r0, #16]
 800505a:	b005      	add	sp, #20
 800505c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005060:	f843 2b04 	str.w	r2, [r3], #4
 8005064:	e7d9      	b.n	800501a <__multiply+0x4e>
 8005066:	f8b1 a000 	ldrh.w	sl, [r1]
 800506a:	f1ba 0f00 	cmp.w	sl, #0
 800506e:	d01f      	beq.n	80050b0 <__multiply+0xe4>
 8005070:	46c4      	mov	ip, r8
 8005072:	46a1      	mov	r9, r4
 8005074:	2700      	movs	r7, #0
 8005076:	f85c 2b04 	ldr.w	r2, [ip], #4
 800507a:	f8d9 3000 	ldr.w	r3, [r9]
 800507e:	fa1f fb82 	uxth.w	fp, r2
 8005082:	b29b      	uxth	r3, r3
 8005084:	fb0a 330b 	mla	r3, sl, fp, r3
 8005088:	443b      	add	r3, r7
 800508a:	f8d9 7000 	ldr.w	r7, [r9]
 800508e:	0c12      	lsrs	r2, r2, #16
 8005090:	0c3f      	lsrs	r7, r7, #16
 8005092:	fb0a 7202 	mla	r2, sl, r2, r7
 8005096:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800509a:	b29b      	uxth	r3, r3
 800509c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050a0:	4565      	cmp	r5, ip
 80050a2:	f849 3b04 	str.w	r3, [r9], #4
 80050a6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80050aa:	d8e4      	bhi.n	8005076 <__multiply+0xaa>
 80050ac:	9b01      	ldr	r3, [sp, #4]
 80050ae:	50e7      	str	r7, [r4, r3]
 80050b0:	9b03      	ldr	r3, [sp, #12]
 80050b2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80050b6:	3104      	adds	r1, #4
 80050b8:	f1b9 0f00 	cmp.w	r9, #0
 80050bc:	d020      	beq.n	8005100 <__multiply+0x134>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	4647      	mov	r7, r8
 80050c2:	46a4      	mov	ip, r4
 80050c4:	f04f 0a00 	mov.w	sl, #0
 80050c8:	f8b7 b000 	ldrh.w	fp, [r7]
 80050cc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80050d0:	fb09 220b 	mla	r2, r9, fp, r2
 80050d4:	4452      	add	r2, sl
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050dc:	f84c 3b04 	str.w	r3, [ip], #4
 80050e0:	f857 3b04 	ldr.w	r3, [r7], #4
 80050e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050e8:	f8bc 3000 	ldrh.w	r3, [ip]
 80050ec:	fb09 330a 	mla	r3, r9, sl, r3
 80050f0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80050f4:	42bd      	cmp	r5, r7
 80050f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050fa:	d8e5      	bhi.n	80050c8 <__multiply+0xfc>
 80050fc:	9a01      	ldr	r2, [sp, #4]
 80050fe:	50a3      	str	r3, [r4, r2]
 8005100:	3404      	adds	r4, #4
 8005102:	e79f      	b.n	8005044 <__multiply+0x78>
 8005104:	3e01      	subs	r6, #1
 8005106:	e7a1      	b.n	800504c <__multiply+0x80>
 8005108:	08006fc0 	.word	0x08006fc0
 800510c:	08006fd1 	.word	0x08006fd1

08005110 <__pow5mult>:
 8005110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005114:	4615      	mov	r5, r2
 8005116:	f012 0203 	ands.w	r2, r2, #3
 800511a:	4607      	mov	r7, r0
 800511c:	460e      	mov	r6, r1
 800511e:	d007      	beq.n	8005130 <__pow5mult+0x20>
 8005120:	4c25      	ldr	r4, [pc, #148]	@ (80051b8 <__pow5mult+0xa8>)
 8005122:	3a01      	subs	r2, #1
 8005124:	2300      	movs	r3, #0
 8005126:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800512a:	f7ff fea7 	bl	8004e7c <__multadd>
 800512e:	4606      	mov	r6, r0
 8005130:	10ad      	asrs	r5, r5, #2
 8005132:	d03d      	beq.n	80051b0 <__pow5mult+0xa0>
 8005134:	69fc      	ldr	r4, [r7, #28]
 8005136:	b97c      	cbnz	r4, 8005158 <__pow5mult+0x48>
 8005138:	2010      	movs	r0, #16
 800513a:	f7ff fd87 	bl	8004c4c <malloc>
 800513e:	4602      	mov	r2, r0
 8005140:	61f8      	str	r0, [r7, #28]
 8005142:	b928      	cbnz	r0, 8005150 <__pow5mult+0x40>
 8005144:	4b1d      	ldr	r3, [pc, #116]	@ (80051bc <__pow5mult+0xac>)
 8005146:	481e      	ldr	r0, [pc, #120]	@ (80051c0 <__pow5mult+0xb0>)
 8005148:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800514c:	f000 fbd6 	bl	80058fc <__assert_func>
 8005150:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005154:	6004      	str	r4, [r0, #0]
 8005156:	60c4      	str	r4, [r0, #12]
 8005158:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800515c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005160:	b94c      	cbnz	r4, 8005176 <__pow5mult+0x66>
 8005162:	f240 2171 	movw	r1, #625	@ 0x271
 8005166:	4638      	mov	r0, r7
 8005168:	f7ff ff1a 	bl	8004fa0 <__i2b>
 800516c:	2300      	movs	r3, #0
 800516e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005172:	4604      	mov	r4, r0
 8005174:	6003      	str	r3, [r0, #0]
 8005176:	f04f 0900 	mov.w	r9, #0
 800517a:	07eb      	lsls	r3, r5, #31
 800517c:	d50a      	bpl.n	8005194 <__pow5mult+0x84>
 800517e:	4631      	mov	r1, r6
 8005180:	4622      	mov	r2, r4
 8005182:	4638      	mov	r0, r7
 8005184:	f7ff ff22 	bl	8004fcc <__multiply>
 8005188:	4631      	mov	r1, r6
 800518a:	4680      	mov	r8, r0
 800518c:	4638      	mov	r0, r7
 800518e:	f7ff fe53 	bl	8004e38 <_Bfree>
 8005192:	4646      	mov	r6, r8
 8005194:	106d      	asrs	r5, r5, #1
 8005196:	d00b      	beq.n	80051b0 <__pow5mult+0xa0>
 8005198:	6820      	ldr	r0, [r4, #0]
 800519a:	b938      	cbnz	r0, 80051ac <__pow5mult+0x9c>
 800519c:	4622      	mov	r2, r4
 800519e:	4621      	mov	r1, r4
 80051a0:	4638      	mov	r0, r7
 80051a2:	f7ff ff13 	bl	8004fcc <__multiply>
 80051a6:	6020      	str	r0, [r4, #0]
 80051a8:	f8c0 9000 	str.w	r9, [r0]
 80051ac:	4604      	mov	r4, r0
 80051ae:	e7e4      	b.n	800517a <__pow5mult+0x6a>
 80051b0:	4630      	mov	r0, r6
 80051b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b6:	bf00      	nop
 80051b8:	08007084 	.word	0x08007084
 80051bc:	08006f51 	.word	0x08006f51
 80051c0:	08006fd1 	.word	0x08006fd1

080051c4 <__lshift>:
 80051c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c8:	460c      	mov	r4, r1
 80051ca:	6849      	ldr	r1, [r1, #4]
 80051cc:	6923      	ldr	r3, [r4, #16]
 80051ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80051d2:	68a3      	ldr	r3, [r4, #8]
 80051d4:	4607      	mov	r7, r0
 80051d6:	4691      	mov	r9, r2
 80051d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051dc:	f108 0601 	add.w	r6, r8, #1
 80051e0:	42b3      	cmp	r3, r6
 80051e2:	db0b      	blt.n	80051fc <__lshift+0x38>
 80051e4:	4638      	mov	r0, r7
 80051e6:	f7ff fde7 	bl	8004db8 <_Balloc>
 80051ea:	4605      	mov	r5, r0
 80051ec:	b948      	cbnz	r0, 8005202 <__lshift+0x3e>
 80051ee:	4602      	mov	r2, r0
 80051f0:	4b28      	ldr	r3, [pc, #160]	@ (8005294 <__lshift+0xd0>)
 80051f2:	4829      	ldr	r0, [pc, #164]	@ (8005298 <__lshift+0xd4>)
 80051f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80051f8:	f000 fb80 	bl	80058fc <__assert_func>
 80051fc:	3101      	adds	r1, #1
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	e7ee      	b.n	80051e0 <__lshift+0x1c>
 8005202:	2300      	movs	r3, #0
 8005204:	f100 0114 	add.w	r1, r0, #20
 8005208:	f100 0210 	add.w	r2, r0, #16
 800520c:	4618      	mov	r0, r3
 800520e:	4553      	cmp	r3, sl
 8005210:	db33      	blt.n	800527a <__lshift+0xb6>
 8005212:	6920      	ldr	r0, [r4, #16]
 8005214:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005218:	f104 0314 	add.w	r3, r4, #20
 800521c:	f019 091f 	ands.w	r9, r9, #31
 8005220:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005224:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005228:	d02b      	beq.n	8005282 <__lshift+0xbe>
 800522a:	f1c9 0e20 	rsb	lr, r9, #32
 800522e:	468a      	mov	sl, r1
 8005230:	2200      	movs	r2, #0
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	fa00 f009 	lsl.w	r0, r0, r9
 8005238:	4310      	orrs	r0, r2
 800523a:	f84a 0b04 	str.w	r0, [sl], #4
 800523e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005242:	459c      	cmp	ip, r3
 8005244:	fa22 f20e 	lsr.w	r2, r2, lr
 8005248:	d8f3      	bhi.n	8005232 <__lshift+0x6e>
 800524a:	ebac 0304 	sub.w	r3, ip, r4
 800524e:	3b15      	subs	r3, #21
 8005250:	f023 0303 	bic.w	r3, r3, #3
 8005254:	3304      	adds	r3, #4
 8005256:	f104 0015 	add.w	r0, r4, #21
 800525a:	4560      	cmp	r0, ip
 800525c:	bf88      	it	hi
 800525e:	2304      	movhi	r3, #4
 8005260:	50ca      	str	r2, [r1, r3]
 8005262:	b10a      	cbz	r2, 8005268 <__lshift+0xa4>
 8005264:	f108 0602 	add.w	r6, r8, #2
 8005268:	3e01      	subs	r6, #1
 800526a:	4638      	mov	r0, r7
 800526c:	612e      	str	r6, [r5, #16]
 800526e:	4621      	mov	r1, r4
 8005270:	f7ff fde2 	bl	8004e38 <_Bfree>
 8005274:	4628      	mov	r0, r5
 8005276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527a:	f842 0f04 	str.w	r0, [r2, #4]!
 800527e:	3301      	adds	r3, #1
 8005280:	e7c5      	b.n	800520e <__lshift+0x4a>
 8005282:	3904      	subs	r1, #4
 8005284:	f853 2b04 	ldr.w	r2, [r3], #4
 8005288:	f841 2f04 	str.w	r2, [r1, #4]!
 800528c:	459c      	cmp	ip, r3
 800528e:	d8f9      	bhi.n	8005284 <__lshift+0xc0>
 8005290:	e7ea      	b.n	8005268 <__lshift+0xa4>
 8005292:	bf00      	nop
 8005294:	08006fc0 	.word	0x08006fc0
 8005298:	08006fd1 	.word	0x08006fd1

0800529c <__mcmp>:
 800529c:	690a      	ldr	r2, [r1, #16]
 800529e:	4603      	mov	r3, r0
 80052a0:	6900      	ldr	r0, [r0, #16]
 80052a2:	1a80      	subs	r0, r0, r2
 80052a4:	b530      	push	{r4, r5, lr}
 80052a6:	d10e      	bne.n	80052c6 <__mcmp+0x2a>
 80052a8:	3314      	adds	r3, #20
 80052aa:	3114      	adds	r1, #20
 80052ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80052b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80052b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80052b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80052bc:	4295      	cmp	r5, r2
 80052be:	d003      	beq.n	80052c8 <__mcmp+0x2c>
 80052c0:	d205      	bcs.n	80052ce <__mcmp+0x32>
 80052c2:	f04f 30ff 	mov.w	r0, #4294967295
 80052c6:	bd30      	pop	{r4, r5, pc}
 80052c8:	42a3      	cmp	r3, r4
 80052ca:	d3f3      	bcc.n	80052b4 <__mcmp+0x18>
 80052cc:	e7fb      	b.n	80052c6 <__mcmp+0x2a>
 80052ce:	2001      	movs	r0, #1
 80052d0:	e7f9      	b.n	80052c6 <__mcmp+0x2a>
	...

080052d4 <__mdiff>:
 80052d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d8:	4689      	mov	r9, r1
 80052da:	4606      	mov	r6, r0
 80052dc:	4611      	mov	r1, r2
 80052de:	4648      	mov	r0, r9
 80052e0:	4614      	mov	r4, r2
 80052e2:	f7ff ffdb 	bl	800529c <__mcmp>
 80052e6:	1e05      	subs	r5, r0, #0
 80052e8:	d112      	bne.n	8005310 <__mdiff+0x3c>
 80052ea:	4629      	mov	r1, r5
 80052ec:	4630      	mov	r0, r6
 80052ee:	f7ff fd63 	bl	8004db8 <_Balloc>
 80052f2:	4602      	mov	r2, r0
 80052f4:	b928      	cbnz	r0, 8005302 <__mdiff+0x2e>
 80052f6:	4b3e      	ldr	r3, [pc, #248]	@ (80053f0 <__mdiff+0x11c>)
 80052f8:	f240 2137 	movw	r1, #567	@ 0x237
 80052fc:	483d      	ldr	r0, [pc, #244]	@ (80053f4 <__mdiff+0x120>)
 80052fe:	f000 fafd 	bl	80058fc <__assert_func>
 8005302:	2301      	movs	r3, #1
 8005304:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005308:	4610      	mov	r0, r2
 800530a:	b003      	add	sp, #12
 800530c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005310:	bfbc      	itt	lt
 8005312:	464b      	movlt	r3, r9
 8005314:	46a1      	movlt	r9, r4
 8005316:	4630      	mov	r0, r6
 8005318:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800531c:	bfba      	itte	lt
 800531e:	461c      	movlt	r4, r3
 8005320:	2501      	movlt	r5, #1
 8005322:	2500      	movge	r5, #0
 8005324:	f7ff fd48 	bl	8004db8 <_Balloc>
 8005328:	4602      	mov	r2, r0
 800532a:	b918      	cbnz	r0, 8005334 <__mdiff+0x60>
 800532c:	4b30      	ldr	r3, [pc, #192]	@ (80053f0 <__mdiff+0x11c>)
 800532e:	f240 2145 	movw	r1, #581	@ 0x245
 8005332:	e7e3      	b.n	80052fc <__mdiff+0x28>
 8005334:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005338:	6926      	ldr	r6, [r4, #16]
 800533a:	60c5      	str	r5, [r0, #12]
 800533c:	f109 0310 	add.w	r3, r9, #16
 8005340:	f109 0514 	add.w	r5, r9, #20
 8005344:	f104 0e14 	add.w	lr, r4, #20
 8005348:	f100 0b14 	add.w	fp, r0, #20
 800534c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005350:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005354:	9301      	str	r3, [sp, #4]
 8005356:	46d9      	mov	r9, fp
 8005358:	f04f 0c00 	mov.w	ip, #0
 800535c:	9b01      	ldr	r3, [sp, #4]
 800535e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005362:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005366:	9301      	str	r3, [sp, #4]
 8005368:	b281      	uxth	r1, r0
 800536a:	fa1f f38a 	uxth.w	r3, sl
 800536e:	1a5b      	subs	r3, r3, r1
 8005370:	0c00      	lsrs	r0, r0, #16
 8005372:	4463      	add	r3, ip
 8005374:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005378:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800537c:	b29b      	uxth	r3, r3
 800537e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005382:	4576      	cmp	r6, lr
 8005384:	f849 3b04 	str.w	r3, [r9], #4
 8005388:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800538c:	d8e6      	bhi.n	800535c <__mdiff+0x88>
 800538e:	1b33      	subs	r3, r6, r4
 8005390:	3b15      	subs	r3, #21
 8005392:	f023 0303 	bic.w	r3, r3, #3
 8005396:	3415      	adds	r4, #21
 8005398:	3304      	adds	r3, #4
 800539a:	42a6      	cmp	r6, r4
 800539c:	bf38      	it	cc
 800539e:	2304      	movcc	r3, #4
 80053a0:	441d      	add	r5, r3
 80053a2:	445b      	add	r3, fp
 80053a4:	461e      	mov	r6, r3
 80053a6:	462c      	mov	r4, r5
 80053a8:	4544      	cmp	r4, r8
 80053aa:	d30e      	bcc.n	80053ca <__mdiff+0xf6>
 80053ac:	f108 0103 	add.w	r1, r8, #3
 80053b0:	1b49      	subs	r1, r1, r5
 80053b2:	f021 0103 	bic.w	r1, r1, #3
 80053b6:	3d03      	subs	r5, #3
 80053b8:	45a8      	cmp	r8, r5
 80053ba:	bf38      	it	cc
 80053bc:	2100      	movcc	r1, #0
 80053be:	440b      	add	r3, r1
 80053c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80053c4:	b191      	cbz	r1, 80053ec <__mdiff+0x118>
 80053c6:	6117      	str	r7, [r2, #16]
 80053c8:	e79e      	b.n	8005308 <__mdiff+0x34>
 80053ca:	f854 1b04 	ldr.w	r1, [r4], #4
 80053ce:	46e6      	mov	lr, ip
 80053d0:	0c08      	lsrs	r0, r1, #16
 80053d2:	fa1c fc81 	uxtah	ip, ip, r1
 80053d6:	4471      	add	r1, lr
 80053d8:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80053dc:	b289      	uxth	r1, r1
 80053de:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80053e2:	f846 1b04 	str.w	r1, [r6], #4
 80053e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80053ea:	e7dd      	b.n	80053a8 <__mdiff+0xd4>
 80053ec:	3f01      	subs	r7, #1
 80053ee:	e7e7      	b.n	80053c0 <__mdiff+0xec>
 80053f0:	08006fc0 	.word	0x08006fc0
 80053f4:	08006fd1 	.word	0x08006fd1

080053f8 <__d2b>:
 80053f8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80053fc:	2101      	movs	r1, #1
 80053fe:	9e08      	ldr	r6, [sp, #32]
 8005400:	4690      	mov	r8, r2
 8005402:	4699      	mov	r9, r3
 8005404:	f7ff fcd8 	bl	8004db8 <_Balloc>
 8005408:	4604      	mov	r4, r0
 800540a:	b930      	cbnz	r0, 800541a <__d2b+0x22>
 800540c:	4602      	mov	r2, r0
 800540e:	4b24      	ldr	r3, [pc, #144]	@ (80054a0 <__d2b+0xa8>)
 8005410:	4824      	ldr	r0, [pc, #144]	@ (80054a4 <__d2b+0xac>)
 8005412:	f240 310f 	movw	r1, #783	@ 0x30f
 8005416:	f000 fa71 	bl	80058fc <__assert_func>
 800541a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800541e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005422:	b10d      	cbz	r5, 8005428 <__d2b+0x30>
 8005424:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	f1b8 0300 	subs.w	r3, r8, #0
 800542e:	d024      	beq.n	800547a <__d2b+0x82>
 8005430:	4668      	mov	r0, sp
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	f7ff fd87 	bl	8004f46 <__lo0bits>
 8005438:	e9dd 1200 	ldrd	r1, r2, [sp]
 800543c:	b1d8      	cbz	r0, 8005476 <__d2b+0x7e>
 800543e:	f1c0 0320 	rsb	r3, r0, #32
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	430b      	orrs	r3, r1
 8005448:	40c2      	lsrs	r2, r0
 800544a:	6163      	str	r3, [r4, #20]
 800544c:	9201      	str	r2, [sp, #4]
 800544e:	9b01      	ldr	r3, [sp, #4]
 8005450:	61a3      	str	r3, [r4, #24]
 8005452:	2b00      	cmp	r3, #0
 8005454:	bf0c      	ite	eq
 8005456:	2201      	moveq	r2, #1
 8005458:	2202      	movne	r2, #2
 800545a:	6122      	str	r2, [r4, #16]
 800545c:	b1ad      	cbz	r5, 800548a <__d2b+0x92>
 800545e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005462:	4405      	add	r5, r0
 8005464:	6035      	str	r5, [r6, #0]
 8005466:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800546a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800546c:	6018      	str	r0, [r3, #0]
 800546e:	4620      	mov	r0, r4
 8005470:	b002      	add	sp, #8
 8005472:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005476:	6161      	str	r1, [r4, #20]
 8005478:	e7e9      	b.n	800544e <__d2b+0x56>
 800547a:	a801      	add	r0, sp, #4
 800547c:	f7ff fd63 	bl	8004f46 <__lo0bits>
 8005480:	9b01      	ldr	r3, [sp, #4]
 8005482:	6163      	str	r3, [r4, #20]
 8005484:	3020      	adds	r0, #32
 8005486:	2201      	movs	r2, #1
 8005488:	e7e7      	b.n	800545a <__d2b+0x62>
 800548a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800548e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005492:	6030      	str	r0, [r6, #0]
 8005494:	6918      	ldr	r0, [r3, #16]
 8005496:	f7ff fd37 	bl	8004f08 <__hi0bits>
 800549a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800549e:	e7e4      	b.n	800546a <__d2b+0x72>
 80054a0:	08006fc0 	.word	0x08006fc0
 80054a4:	08006fd1 	.word	0x08006fd1

080054a8 <__ssputs_r>:
 80054a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054ac:	688e      	ldr	r6, [r1, #8]
 80054ae:	461f      	mov	r7, r3
 80054b0:	42be      	cmp	r6, r7
 80054b2:	680b      	ldr	r3, [r1, #0]
 80054b4:	4682      	mov	sl, r0
 80054b6:	460c      	mov	r4, r1
 80054b8:	4690      	mov	r8, r2
 80054ba:	d82d      	bhi.n	8005518 <__ssputs_r+0x70>
 80054bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054c4:	d026      	beq.n	8005514 <__ssputs_r+0x6c>
 80054c6:	6965      	ldr	r5, [r4, #20]
 80054c8:	6909      	ldr	r1, [r1, #16]
 80054ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054ce:	eba3 0901 	sub.w	r9, r3, r1
 80054d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054d6:	1c7b      	adds	r3, r7, #1
 80054d8:	444b      	add	r3, r9
 80054da:	106d      	asrs	r5, r5, #1
 80054dc:	429d      	cmp	r5, r3
 80054de:	bf38      	it	cc
 80054e0:	461d      	movcc	r5, r3
 80054e2:	0553      	lsls	r3, r2, #21
 80054e4:	d527      	bpl.n	8005536 <__ssputs_r+0x8e>
 80054e6:	4629      	mov	r1, r5
 80054e8:	f7ff fbda 	bl	8004ca0 <_malloc_r>
 80054ec:	4606      	mov	r6, r0
 80054ee:	b360      	cbz	r0, 800554a <__ssputs_r+0xa2>
 80054f0:	6921      	ldr	r1, [r4, #16]
 80054f2:	464a      	mov	r2, r9
 80054f4:	f7fe fcf9 	bl	8003eea <memcpy>
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80054fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005502:	81a3      	strh	r3, [r4, #12]
 8005504:	6126      	str	r6, [r4, #16]
 8005506:	6165      	str	r5, [r4, #20]
 8005508:	444e      	add	r6, r9
 800550a:	eba5 0509 	sub.w	r5, r5, r9
 800550e:	6026      	str	r6, [r4, #0]
 8005510:	60a5      	str	r5, [r4, #8]
 8005512:	463e      	mov	r6, r7
 8005514:	42be      	cmp	r6, r7
 8005516:	d900      	bls.n	800551a <__ssputs_r+0x72>
 8005518:	463e      	mov	r6, r7
 800551a:	6820      	ldr	r0, [r4, #0]
 800551c:	4632      	mov	r2, r6
 800551e:	4641      	mov	r1, r8
 8005520:	f000 f9c2 	bl	80058a8 <memmove>
 8005524:	68a3      	ldr	r3, [r4, #8]
 8005526:	1b9b      	subs	r3, r3, r6
 8005528:	60a3      	str	r3, [r4, #8]
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	4433      	add	r3, r6
 800552e:	6023      	str	r3, [r4, #0]
 8005530:	2000      	movs	r0, #0
 8005532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005536:	462a      	mov	r2, r5
 8005538:	f000 fa24 	bl	8005984 <_realloc_r>
 800553c:	4606      	mov	r6, r0
 800553e:	2800      	cmp	r0, #0
 8005540:	d1e0      	bne.n	8005504 <__ssputs_r+0x5c>
 8005542:	6921      	ldr	r1, [r4, #16]
 8005544:	4650      	mov	r0, sl
 8005546:	f7ff fb37 	bl	8004bb8 <_free_r>
 800554a:	230c      	movs	r3, #12
 800554c:	f8ca 3000 	str.w	r3, [sl]
 8005550:	89a3      	ldrh	r3, [r4, #12]
 8005552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005556:	81a3      	strh	r3, [r4, #12]
 8005558:	f04f 30ff 	mov.w	r0, #4294967295
 800555c:	e7e9      	b.n	8005532 <__ssputs_r+0x8a>
	...

08005560 <_svfiprintf_r>:
 8005560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005564:	4698      	mov	r8, r3
 8005566:	898b      	ldrh	r3, [r1, #12]
 8005568:	061b      	lsls	r3, r3, #24
 800556a:	b09d      	sub	sp, #116	@ 0x74
 800556c:	4607      	mov	r7, r0
 800556e:	460d      	mov	r5, r1
 8005570:	4614      	mov	r4, r2
 8005572:	d510      	bpl.n	8005596 <_svfiprintf_r+0x36>
 8005574:	690b      	ldr	r3, [r1, #16]
 8005576:	b973      	cbnz	r3, 8005596 <_svfiprintf_r+0x36>
 8005578:	2140      	movs	r1, #64	@ 0x40
 800557a:	f7ff fb91 	bl	8004ca0 <_malloc_r>
 800557e:	6028      	str	r0, [r5, #0]
 8005580:	6128      	str	r0, [r5, #16]
 8005582:	b930      	cbnz	r0, 8005592 <_svfiprintf_r+0x32>
 8005584:	230c      	movs	r3, #12
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	f04f 30ff 	mov.w	r0, #4294967295
 800558c:	b01d      	add	sp, #116	@ 0x74
 800558e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005592:	2340      	movs	r3, #64	@ 0x40
 8005594:	616b      	str	r3, [r5, #20]
 8005596:	2300      	movs	r3, #0
 8005598:	9309      	str	r3, [sp, #36]	@ 0x24
 800559a:	2320      	movs	r3, #32
 800559c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80055a4:	2330      	movs	r3, #48	@ 0x30
 80055a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005744 <_svfiprintf_r+0x1e4>
 80055aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055ae:	f04f 0901 	mov.w	r9, #1
 80055b2:	4623      	mov	r3, r4
 80055b4:	469a      	mov	sl, r3
 80055b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055ba:	b10a      	cbz	r2, 80055c0 <_svfiprintf_r+0x60>
 80055bc:	2a25      	cmp	r2, #37	@ 0x25
 80055be:	d1f9      	bne.n	80055b4 <_svfiprintf_r+0x54>
 80055c0:	ebba 0b04 	subs.w	fp, sl, r4
 80055c4:	d00b      	beq.n	80055de <_svfiprintf_r+0x7e>
 80055c6:	465b      	mov	r3, fp
 80055c8:	4622      	mov	r2, r4
 80055ca:	4629      	mov	r1, r5
 80055cc:	4638      	mov	r0, r7
 80055ce:	f7ff ff6b 	bl	80054a8 <__ssputs_r>
 80055d2:	3001      	adds	r0, #1
 80055d4:	f000 80a7 	beq.w	8005726 <_svfiprintf_r+0x1c6>
 80055d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055da:	445a      	add	r2, fp
 80055dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80055de:	f89a 3000 	ldrb.w	r3, [sl]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 809f 	beq.w	8005726 <_svfiprintf_r+0x1c6>
 80055e8:	2300      	movs	r3, #0
 80055ea:	f04f 32ff 	mov.w	r2, #4294967295
 80055ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055f2:	f10a 0a01 	add.w	sl, sl, #1
 80055f6:	9304      	str	r3, [sp, #16]
 80055f8:	9307      	str	r3, [sp, #28]
 80055fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8005600:	4654      	mov	r4, sl
 8005602:	2205      	movs	r2, #5
 8005604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005608:	484e      	ldr	r0, [pc, #312]	@ (8005744 <_svfiprintf_r+0x1e4>)
 800560a:	f7fa fde1 	bl	80001d0 <memchr>
 800560e:	9a04      	ldr	r2, [sp, #16]
 8005610:	b9d8      	cbnz	r0, 800564a <_svfiprintf_r+0xea>
 8005612:	06d0      	lsls	r0, r2, #27
 8005614:	bf44      	itt	mi
 8005616:	2320      	movmi	r3, #32
 8005618:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800561c:	0711      	lsls	r1, r2, #28
 800561e:	bf44      	itt	mi
 8005620:	232b      	movmi	r3, #43	@ 0x2b
 8005622:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005626:	f89a 3000 	ldrb.w	r3, [sl]
 800562a:	2b2a      	cmp	r3, #42	@ 0x2a
 800562c:	d015      	beq.n	800565a <_svfiprintf_r+0xfa>
 800562e:	9a07      	ldr	r2, [sp, #28]
 8005630:	4654      	mov	r4, sl
 8005632:	2000      	movs	r0, #0
 8005634:	f04f 0c0a 	mov.w	ip, #10
 8005638:	4621      	mov	r1, r4
 800563a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800563e:	3b30      	subs	r3, #48	@ 0x30
 8005640:	2b09      	cmp	r3, #9
 8005642:	d94b      	bls.n	80056dc <_svfiprintf_r+0x17c>
 8005644:	b1b0      	cbz	r0, 8005674 <_svfiprintf_r+0x114>
 8005646:	9207      	str	r2, [sp, #28]
 8005648:	e014      	b.n	8005674 <_svfiprintf_r+0x114>
 800564a:	eba0 0308 	sub.w	r3, r0, r8
 800564e:	fa09 f303 	lsl.w	r3, r9, r3
 8005652:	4313      	orrs	r3, r2
 8005654:	9304      	str	r3, [sp, #16]
 8005656:	46a2      	mov	sl, r4
 8005658:	e7d2      	b.n	8005600 <_svfiprintf_r+0xa0>
 800565a:	9b03      	ldr	r3, [sp, #12]
 800565c:	1d19      	adds	r1, r3, #4
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	9103      	str	r1, [sp, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	bfbb      	ittet	lt
 8005666:	425b      	neglt	r3, r3
 8005668:	f042 0202 	orrlt.w	r2, r2, #2
 800566c:	9307      	strge	r3, [sp, #28]
 800566e:	9307      	strlt	r3, [sp, #28]
 8005670:	bfb8      	it	lt
 8005672:	9204      	strlt	r2, [sp, #16]
 8005674:	7823      	ldrb	r3, [r4, #0]
 8005676:	2b2e      	cmp	r3, #46	@ 0x2e
 8005678:	d10a      	bne.n	8005690 <_svfiprintf_r+0x130>
 800567a:	7863      	ldrb	r3, [r4, #1]
 800567c:	2b2a      	cmp	r3, #42	@ 0x2a
 800567e:	d132      	bne.n	80056e6 <_svfiprintf_r+0x186>
 8005680:	9b03      	ldr	r3, [sp, #12]
 8005682:	1d1a      	adds	r2, r3, #4
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	9203      	str	r2, [sp, #12]
 8005688:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800568c:	3402      	adds	r4, #2
 800568e:	9305      	str	r3, [sp, #20]
 8005690:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005748 <_svfiprintf_r+0x1e8>
 8005694:	7821      	ldrb	r1, [r4, #0]
 8005696:	2203      	movs	r2, #3
 8005698:	4650      	mov	r0, sl
 800569a:	f7fa fd99 	bl	80001d0 <memchr>
 800569e:	b138      	cbz	r0, 80056b0 <_svfiprintf_r+0x150>
 80056a0:	9b04      	ldr	r3, [sp, #16]
 80056a2:	eba0 000a 	sub.w	r0, r0, sl
 80056a6:	2240      	movs	r2, #64	@ 0x40
 80056a8:	4082      	lsls	r2, r0
 80056aa:	4313      	orrs	r3, r2
 80056ac:	3401      	adds	r4, #1
 80056ae:	9304      	str	r3, [sp, #16]
 80056b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b4:	4825      	ldr	r0, [pc, #148]	@ (800574c <_svfiprintf_r+0x1ec>)
 80056b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056ba:	2206      	movs	r2, #6
 80056bc:	f7fa fd88 	bl	80001d0 <memchr>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	d036      	beq.n	8005732 <_svfiprintf_r+0x1d2>
 80056c4:	4b22      	ldr	r3, [pc, #136]	@ (8005750 <_svfiprintf_r+0x1f0>)
 80056c6:	bb1b      	cbnz	r3, 8005710 <_svfiprintf_r+0x1b0>
 80056c8:	9b03      	ldr	r3, [sp, #12]
 80056ca:	3307      	adds	r3, #7
 80056cc:	f023 0307 	bic.w	r3, r3, #7
 80056d0:	3308      	adds	r3, #8
 80056d2:	9303      	str	r3, [sp, #12]
 80056d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056d6:	4433      	add	r3, r6
 80056d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80056da:	e76a      	b.n	80055b2 <_svfiprintf_r+0x52>
 80056dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80056e0:	460c      	mov	r4, r1
 80056e2:	2001      	movs	r0, #1
 80056e4:	e7a8      	b.n	8005638 <_svfiprintf_r+0xd8>
 80056e6:	2300      	movs	r3, #0
 80056e8:	3401      	adds	r4, #1
 80056ea:	9305      	str	r3, [sp, #20]
 80056ec:	4619      	mov	r1, r3
 80056ee:	f04f 0c0a 	mov.w	ip, #10
 80056f2:	4620      	mov	r0, r4
 80056f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056f8:	3a30      	subs	r2, #48	@ 0x30
 80056fa:	2a09      	cmp	r2, #9
 80056fc:	d903      	bls.n	8005706 <_svfiprintf_r+0x1a6>
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0c6      	beq.n	8005690 <_svfiprintf_r+0x130>
 8005702:	9105      	str	r1, [sp, #20]
 8005704:	e7c4      	b.n	8005690 <_svfiprintf_r+0x130>
 8005706:	fb0c 2101 	mla	r1, ip, r1, r2
 800570a:	4604      	mov	r4, r0
 800570c:	2301      	movs	r3, #1
 800570e:	e7f0      	b.n	80056f2 <_svfiprintf_r+0x192>
 8005710:	ab03      	add	r3, sp, #12
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	462a      	mov	r2, r5
 8005716:	4b0f      	ldr	r3, [pc, #60]	@ (8005754 <_svfiprintf_r+0x1f4>)
 8005718:	a904      	add	r1, sp, #16
 800571a:	4638      	mov	r0, r7
 800571c:	f7fd fe72 	bl	8003404 <_printf_float>
 8005720:	1c42      	adds	r2, r0, #1
 8005722:	4606      	mov	r6, r0
 8005724:	d1d6      	bne.n	80056d4 <_svfiprintf_r+0x174>
 8005726:	89ab      	ldrh	r3, [r5, #12]
 8005728:	065b      	lsls	r3, r3, #25
 800572a:	f53f af2d 	bmi.w	8005588 <_svfiprintf_r+0x28>
 800572e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005730:	e72c      	b.n	800558c <_svfiprintf_r+0x2c>
 8005732:	ab03      	add	r3, sp, #12
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	462a      	mov	r2, r5
 8005738:	4b06      	ldr	r3, [pc, #24]	@ (8005754 <_svfiprintf_r+0x1f4>)
 800573a:	a904      	add	r1, sp, #16
 800573c:	4638      	mov	r0, r7
 800573e:	f7fe f8fb 	bl	8003938 <_printf_i>
 8005742:	e7ed      	b.n	8005720 <_svfiprintf_r+0x1c0>
 8005744:	0800702a 	.word	0x0800702a
 8005748:	08007030 	.word	0x08007030
 800574c:	08007034 	.word	0x08007034
 8005750:	08003405 	.word	0x08003405
 8005754:	080054a9 	.word	0x080054a9

08005758 <__sflush_r>:
 8005758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575e:	0716      	lsls	r6, r2, #28
 8005760:	4605      	mov	r5, r0
 8005762:	460c      	mov	r4, r1
 8005764:	d454      	bmi.n	8005810 <__sflush_r+0xb8>
 8005766:	684b      	ldr	r3, [r1, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	dc02      	bgt.n	8005772 <__sflush_r+0x1a>
 800576c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800576e:	2b00      	cmp	r3, #0
 8005770:	dd48      	ble.n	8005804 <__sflush_r+0xac>
 8005772:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005774:	2e00      	cmp	r6, #0
 8005776:	d045      	beq.n	8005804 <__sflush_r+0xac>
 8005778:	2300      	movs	r3, #0
 800577a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800577e:	682f      	ldr	r7, [r5, #0]
 8005780:	6a21      	ldr	r1, [r4, #32]
 8005782:	602b      	str	r3, [r5, #0]
 8005784:	d030      	beq.n	80057e8 <__sflush_r+0x90>
 8005786:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	0759      	lsls	r1, r3, #29
 800578c:	d505      	bpl.n	800579a <__sflush_r+0x42>
 800578e:	6863      	ldr	r3, [r4, #4]
 8005790:	1ad2      	subs	r2, r2, r3
 8005792:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005794:	b10b      	cbz	r3, 800579a <__sflush_r+0x42>
 8005796:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005798:	1ad2      	subs	r2, r2, r3
 800579a:	2300      	movs	r3, #0
 800579c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800579e:	6a21      	ldr	r1, [r4, #32]
 80057a0:	4628      	mov	r0, r5
 80057a2:	47b0      	blx	r6
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	d106      	bne.n	80057b8 <__sflush_r+0x60>
 80057aa:	6829      	ldr	r1, [r5, #0]
 80057ac:	291d      	cmp	r1, #29
 80057ae:	d82b      	bhi.n	8005808 <__sflush_r+0xb0>
 80057b0:	4a28      	ldr	r2, [pc, #160]	@ (8005854 <__sflush_r+0xfc>)
 80057b2:	40ca      	lsrs	r2, r1
 80057b4:	07d6      	lsls	r6, r2, #31
 80057b6:	d527      	bpl.n	8005808 <__sflush_r+0xb0>
 80057b8:	2200      	movs	r2, #0
 80057ba:	6062      	str	r2, [r4, #4]
 80057bc:	04d9      	lsls	r1, r3, #19
 80057be:	6922      	ldr	r2, [r4, #16]
 80057c0:	6022      	str	r2, [r4, #0]
 80057c2:	d504      	bpl.n	80057ce <__sflush_r+0x76>
 80057c4:	1c42      	adds	r2, r0, #1
 80057c6:	d101      	bne.n	80057cc <__sflush_r+0x74>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	b903      	cbnz	r3, 80057ce <__sflush_r+0x76>
 80057cc:	6560      	str	r0, [r4, #84]	@ 0x54
 80057ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057d0:	602f      	str	r7, [r5, #0]
 80057d2:	b1b9      	cbz	r1, 8005804 <__sflush_r+0xac>
 80057d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057d8:	4299      	cmp	r1, r3
 80057da:	d002      	beq.n	80057e2 <__sflush_r+0x8a>
 80057dc:	4628      	mov	r0, r5
 80057de:	f7ff f9eb 	bl	8004bb8 <_free_r>
 80057e2:	2300      	movs	r3, #0
 80057e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80057e6:	e00d      	b.n	8005804 <__sflush_r+0xac>
 80057e8:	2301      	movs	r3, #1
 80057ea:	4628      	mov	r0, r5
 80057ec:	47b0      	blx	r6
 80057ee:	4602      	mov	r2, r0
 80057f0:	1c50      	adds	r0, r2, #1
 80057f2:	d1c9      	bne.n	8005788 <__sflush_r+0x30>
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0c6      	beq.n	8005788 <__sflush_r+0x30>
 80057fa:	2b1d      	cmp	r3, #29
 80057fc:	d001      	beq.n	8005802 <__sflush_r+0xaa>
 80057fe:	2b16      	cmp	r3, #22
 8005800:	d11d      	bne.n	800583e <__sflush_r+0xe6>
 8005802:	602f      	str	r7, [r5, #0]
 8005804:	2000      	movs	r0, #0
 8005806:	e021      	b.n	800584c <__sflush_r+0xf4>
 8005808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800580c:	b21b      	sxth	r3, r3
 800580e:	e01a      	b.n	8005846 <__sflush_r+0xee>
 8005810:	690f      	ldr	r7, [r1, #16]
 8005812:	2f00      	cmp	r7, #0
 8005814:	d0f6      	beq.n	8005804 <__sflush_r+0xac>
 8005816:	0793      	lsls	r3, r2, #30
 8005818:	680e      	ldr	r6, [r1, #0]
 800581a:	bf08      	it	eq
 800581c:	694b      	ldreq	r3, [r1, #20]
 800581e:	600f      	str	r7, [r1, #0]
 8005820:	bf18      	it	ne
 8005822:	2300      	movne	r3, #0
 8005824:	1bf6      	subs	r6, r6, r7
 8005826:	608b      	str	r3, [r1, #8]
 8005828:	2e00      	cmp	r6, #0
 800582a:	ddeb      	ble.n	8005804 <__sflush_r+0xac>
 800582c:	6a21      	ldr	r1, [r4, #32]
 800582e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005832:	4633      	mov	r3, r6
 8005834:	463a      	mov	r2, r7
 8005836:	4628      	mov	r0, r5
 8005838:	47e0      	blx	ip
 800583a:	2800      	cmp	r0, #0
 800583c:	dc07      	bgt.n	800584e <__sflush_r+0xf6>
 800583e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005846:	81a3      	strh	r3, [r4, #12]
 8005848:	f04f 30ff 	mov.w	r0, #4294967295
 800584c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800584e:	4407      	add	r7, r0
 8005850:	1a36      	subs	r6, r6, r0
 8005852:	e7e9      	b.n	8005828 <__sflush_r+0xd0>
 8005854:	20400001 	.word	0x20400001

08005858 <_fflush_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	690b      	ldr	r3, [r1, #16]
 800585c:	4605      	mov	r5, r0
 800585e:	460c      	mov	r4, r1
 8005860:	b913      	cbnz	r3, 8005868 <_fflush_r+0x10>
 8005862:	2500      	movs	r5, #0
 8005864:	4628      	mov	r0, r5
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	b118      	cbz	r0, 8005872 <_fflush_r+0x1a>
 800586a:	6a03      	ldr	r3, [r0, #32]
 800586c:	b90b      	cbnz	r3, 8005872 <_fflush_r+0x1a>
 800586e:	f7fe fa0d 	bl	8003c8c <__sinit>
 8005872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0f3      	beq.n	8005862 <_fflush_r+0xa>
 800587a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800587c:	07d0      	lsls	r0, r2, #31
 800587e:	d404      	bmi.n	800588a <_fflush_r+0x32>
 8005880:	0599      	lsls	r1, r3, #22
 8005882:	d402      	bmi.n	800588a <_fflush_r+0x32>
 8005884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005886:	f7fe fb2e 	bl	8003ee6 <__retarget_lock_acquire_recursive>
 800588a:	4628      	mov	r0, r5
 800588c:	4621      	mov	r1, r4
 800588e:	f7ff ff63 	bl	8005758 <__sflush_r>
 8005892:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005894:	07da      	lsls	r2, r3, #31
 8005896:	4605      	mov	r5, r0
 8005898:	d4e4      	bmi.n	8005864 <_fflush_r+0xc>
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	059b      	lsls	r3, r3, #22
 800589e:	d4e1      	bmi.n	8005864 <_fflush_r+0xc>
 80058a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058a2:	f7fe fb21 	bl	8003ee8 <__retarget_lock_release_recursive>
 80058a6:	e7dd      	b.n	8005864 <_fflush_r+0xc>

080058a8 <memmove>:
 80058a8:	4288      	cmp	r0, r1
 80058aa:	b510      	push	{r4, lr}
 80058ac:	eb01 0402 	add.w	r4, r1, r2
 80058b0:	d902      	bls.n	80058b8 <memmove+0x10>
 80058b2:	4284      	cmp	r4, r0
 80058b4:	4623      	mov	r3, r4
 80058b6:	d807      	bhi.n	80058c8 <memmove+0x20>
 80058b8:	1e43      	subs	r3, r0, #1
 80058ba:	42a1      	cmp	r1, r4
 80058bc:	d008      	beq.n	80058d0 <memmove+0x28>
 80058be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058c6:	e7f8      	b.n	80058ba <memmove+0x12>
 80058c8:	4402      	add	r2, r0
 80058ca:	4601      	mov	r1, r0
 80058cc:	428a      	cmp	r2, r1
 80058ce:	d100      	bne.n	80058d2 <memmove+0x2a>
 80058d0:	bd10      	pop	{r4, pc}
 80058d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058da:	e7f7      	b.n	80058cc <memmove+0x24>

080058dc <_sbrk_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4d06      	ldr	r5, [pc, #24]	@ (80058f8 <_sbrk_r+0x1c>)
 80058e0:	2300      	movs	r3, #0
 80058e2:	4604      	mov	r4, r0
 80058e4:	4608      	mov	r0, r1
 80058e6:	602b      	str	r3, [r5, #0]
 80058e8:	f7fc f8a8 	bl	8001a3c <_sbrk>
 80058ec:	1c43      	adds	r3, r0, #1
 80058ee:	d102      	bne.n	80058f6 <_sbrk_r+0x1a>
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	b103      	cbz	r3, 80058f6 <_sbrk_r+0x1a>
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	bd38      	pop	{r3, r4, r5, pc}
 80058f8:	20000620 	.word	0x20000620

080058fc <__assert_func>:
 80058fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80058fe:	4614      	mov	r4, r2
 8005900:	461a      	mov	r2, r3
 8005902:	4b09      	ldr	r3, [pc, #36]	@ (8005928 <__assert_func+0x2c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4605      	mov	r5, r0
 8005908:	68d8      	ldr	r0, [r3, #12]
 800590a:	b14c      	cbz	r4, 8005920 <__assert_func+0x24>
 800590c:	4b07      	ldr	r3, [pc, #28]	@ (800592c <__assert_func+0x30>)
 800590e:	9100      	str	r1, [sp, #0]
 8005910:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005914:	4906      	ldr	r1, [pc, #24]	@ (8005930 <__assert_func+0x34>)
 8005916:	462b      	mov	r3, r5
 8005918:	f000 f870 	bl	80059fc <fiprintf>
 800591c:	f000 f880 	bl	8005a20 <abort>
 8005920:	4b04      	ldr	r3, [pc, #16]	@ (8005934 <__assert_func+0x38>)
 8005922:	461c      	mov	r4, r3
 8005924:	e7f3      	b.n	800590e <__assert_func+0x12>
 8005926:	bf00      	nop
 8005928:	20000038 	.word	0x20000038
 800592c:	08007045 	.word	0x08007045
 8005930:	08007052 	.word	0x08007052
 8005934:	08007080 	.word	0x08007080

08005938 <_calloc_r>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	fba1 5402 	umull	r5, r4, r1, r2
 800593e:	b934      	cbnz	r4, 800594e <_calloc_r+0x16>
 8005940:	4629      	mov	r1, r5
 8005942:	f7ff f9ad 	bl	8004ca0 <_malloc_r>
 8005946:	4606      	mov	r6, r0
 8005948:	b928      	cbnz	r0, 8005956 <_calloc_r+0x1e>
 800594a:	4630      	mov	r0, r6
 800594c:	bd70      	pop	{r4, r5, r6, pc}
 800594e:	220c      	movs	r2, #12
 8005950:	6002      	str	r2, [r0, #0]
 8005952:	2600      	movs	r6, #0
 8005954:	e7f9      	b.n	800594a <_calloc_r+0x12>
 8005956:	462a      	mov	r2, r5
 8005958:	4621      	mov	r1, r4
 800595a:	f7fe fa46 	bl	8003dea <memset>
 800595e:	e7f4      	b.n	800594a <_calloc_r+0x12>

08005960 <__ascii_mbtowc>:
 8005960:	b082      	sub	sp, #8
 8005962:	b901      	cbnz	r1, 8005966 <__ascii_mbtowc+0x6>
 8005964:	a901      	add	r1, sp, #4
 8005966:	b142      	cbz	r2, 800597a <__ascii_mbtowc+0x1a>
 8005968:	b14b      	cbz	r3, 800597e <__ascii_mbtowc+0x1e>
 800596a:	7813      	ldrb	r3, [r2, #0]
 800596c:	600b      	str	r3, [r1, #0]
 800596e:	7812      	ldrb	r2, [r2, #0]
 8005970:	1e10      	subs	r0, r2, #0
 8005972:	bf18      	it	ne
 8005974:	2001      	movne	r0, #1
 8005976:	b002      	add	sp, #8
 8005978:	4770      	bx	lr
 800597a:	4610      	mov	r0, r2
 800597c:	e7fb      	b.n	8005976 <__ascii_mbtowc+0x16>
 800597e:	f06f 0001 	mvn.w	r0, #1
 8005982:	e7f8      	b.n	8005976 <__ascii_mbtowc+0x16>

08005984 <_realloc_r>:
 8005984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005988:	4607      	mov	r7, r0
 800598a:	4614      	mov	r4, r2
 800598c:	460d      	mov	r5, r1
 800598e:	b921      	cbnz	r1, 800599a <_realloc_r+0x16>
 8005990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005994:	4611      	mov	r1, r2
 8005996:	f7ff b983 	b.w	8004ca0 <_malloc_r>
 800599a:	b92a      	cbnz	r2, 80059a8 <_realloc_r+0x24>
 800599c:	f7ff f90c 	bl	8004bb8 <_free_r>
 80059a0:	4625      	mov	r5, r4
 80059a2:	4628      	mov	r0, r5
 80059a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a8:	f000 f841 	bl	8005a2e <_malloc_usable_size_r>
 80059ac:	4284      	cmp	r4, r0
 80059ae:	4606      	mov	r6, r0
 80059b0:	d802      	bhi.n	80059b8 <_realloc_r+0x34>
 80059b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059b6:	d8f4      	bhi.n	80059a2 <_realloc_r+0x1e>
 80059b8:	4621      	mov	r1, r4
 80059ba:	4638      	mov	r0, r7
 80059bc:	f7ff f970 	bl	8004ca0 <_malloc_r>
 80059c0:	4680      	mov	r8, r0
 80059c2:	b908      	cbnz	r0, 80059c8 <_realloc_r+0x44>
 80059c4:	4645      	mov	r5, r8
 80059c6:	e7ec      	b.n	80059a2 <_realloc_r+0x1e>
 80059c8:	42b4      	cmp	r4, r6
 80059ca:	4622      	mov	r2, r4
 80059cc:	4629      	mov	r1, r5
 80059ce:	bf28      	it	cs
 80059d0:	4632      	movcs	r2, r6
 80059d2:	f7fe fa8a 	bl	8003eea <memcpy>
 80059d6:	4629      	mov	r1, r5
 80059d8:	4638      	mov	r0, r7
 80059da:	f7ff f8ed 	bl	8004bb8 <_free_r>
 80059de:	e7f1      	b.n	80059c4 <_realloc_r+0x40>

080059e0 <__ascii_wctomb>:
 80059e0:	4603      	mov	r3, r0
 80059e2:	4608      	mov	r0, r1
 80059e4:	b141      	cbz	r1, 80059f8 <__ascii_wctomb+0x18>
 80059e6:	2aff      	cmp	r2, #255	@ 0xff
 80059e8:	d904      	bls.n	80059f4 <__ascii_wctomb+0x14>
 80059ea:	228a      	movs	r2, #138	@ 0x8a
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	f04f 30ff 	mov.w	r0, #4294967295
 80059f2:	4770      	bx	lr
 80059f4:	700a      	strb	r2, [r1, #0]
 80059f6:	2001      	movs	r0, #1
 80059f8:	4770      	bx	lr
	...

080059fc <fiprintf>:
 80059fc:	b40e      	push	{r1, r2, r3}
 80059fe:	b503      	push	{r0, r1, lr}
 8005a00:	4601      	mov	r1, r0
 8005a02:	ab03      	add	r3, sp, #12
 8005a04:	4805      	ldr	r0, [pc, #20]	@ (8005a1c <fiprintf+0x20>)
 8005a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a0a:	6800      	ldr	r0, [r0, #0]
 8005a0c:	9301      	str	r3, [sp, #4]
 8005a0e:	f000 f83d 	bl	8005a8c <_vfiprintf_r>
 8005a12:	b002      	add	sp, #8
 8005a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a18:	b003      	add	sp, #12
 8005a1a:	4770      	bx	lr
 8005a1c:	20000038 	.word	0x20000038

08005a20 <abort>:
 8005a20:	b508      	push	{r3, lr}
 8005a22:	2006      	movs	r0, #6
 8005a24:	f000 fa06 	bl	8005e34 <raise>
 8005a28:	2001      	movs	r0, #1
 8005a2a:	f7fb ff92 	bl	8001952 <_exit>

08005a2e <_malloc_usable_size_r>:
 8005a2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a32:	1f18      	subs	r0, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	bfbc      	itt	lt
 8005a38:	580b      	ldrlt	r3, [r1, r0]
 8005a3a:	18c0      	addlt	r0, r0, r3
 8005a3c:	4770      	bx	lr

08005a3e <__sfputc_r>:
 8005a3e:	6893      	ldr	r3, [r2, #8]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	b410      	push	{r4}
 8005a46:	6093      	str	r3, [r2, #8]
 8005a48:	da07      	bge.n	8005a5a <__sfputc_r+0x1c>
 8005a4a:	6994      	ldr	r4, [r2, #24]
 8005a4c:	42a3      	cmp	r3, r4
 8005a4e:	db01      	blt.n	8005a54 <__sfputc_r+0x16>
 8005a50:	290a      	cmp	r1, #10
 8005a52:	d102      	bne.n	8005a5a <__sfputc_r+0x1c>
 8005a54:	bc10      	pop	{r4}
 8005a56:	f000 b931 	b.w	8005cbc <__swbuf_r>
 8005a5a:	6813      	ldr	r3, [r2, #0]
 8005a5c:	1c58      	adds	r0, r3, #1
 8005a5e:	6010      	str	r0, [r2, #0]
 8005a60:	7019      	strb	r1, [r3, #0]
 8005a62:	4608      	mov	r0, r1
 8005a64:	bc10      	pop	{r4}
 8005a66:	4770      	bx	lr

08005a68 <__sfputs_r>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	4606      	mov	r6, r0
 8005a6c:	460f      	mov	r7, r1
 8005a6e:	4614      	mov	r4, r2
 8005a70:	18d5      	adds	r5, r2, r3
 8005a72:	42ac      	cmp	r4, r5
 8005a74:	d101      	bne.n	8005a7a <__sfputs_r+0x12>
 8005a76:	2000      	movs	r0, #0
 8005a78:	e007      	b.n	8005a8a <__sfputs_r+0x22>
 8005a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a7e:	463a      	mov	r2, r7
 8005a80:	4630      	mov	r0, r6
 8005a82:	f7ff ffdc 	bl	8005a3e <__sfputc_r>
 8005a86:	1c43      	adds	r3, r0, #1
 8005a88:	d1f3      	bne.n	8005a72 <__sfputs_r+0xa>
 8005a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a8c <_vfiprintf_r>:
 8005a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a90:	460d      	mov	r5, r1
 8005a92:	b09d      	sub	sp, #116	@ 0x74
 8005a94:	4614      	mov	r4, r2
 8005a96:	4698      	mov	r8, r3
 8005a98:	4606      	mov	r6, r0
 8005a9a:	b118      	cbz	r0, 8005aa4 <_vfiprintf_r+0x18>
 8005a9c:	6a03      	ldr	r3, [r0, #32]
 8005a9e:	b90b      	cbnz	r3, 8005aa4 <_vfiprintf_r+0x18>
 8005aa0:	f7fe f8f4 	bl	8003c8c <__sinit>
 8005aa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005aa6:	07d9      	lsls	r1, r3, #31
 8005aa8:	d405      	bmi.n	8005ab6 <_vfiprintf_r+0x2a>
 8005aaa:	89ab      	ldrh	r3, [r5, #12]
 8005aac:	059a      	lsls	r2, r3, #22
 8005aae:	d402      	bmi.n	8005ab6 <_vfiprintf_r+0x2a>
 8005ab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ab2:	f7fe fa18 	bl	8003ee6 <__retarget_lock_acquire_recursive>
 8005ab6:	89ab      	ldrh	r3, [r5, #12]
 8005ab8:	071b      	lsls	r3, r3, #28
 8005aba:	d501      	bpl.n	8005ac0 <_vfiprintf_r+0x34>
 8005abc:	692b      	ldr	r3, [r5, #16]
 8005abe:	b99b      	cbnz	r3, 8005ae8 <_vfiprintf_r+0x5c>
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f000 f938 	bl	8005d38 <__swsetup_r>
 8005ac8:	b170      	cbz	r0, 8005ae8 <_vfiprintf_r+0x5c>
 8005aca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005acc:	07dc      	lsls	r4, r3, #31
 8005ace:	d504      	bpl.n	8005ada <_vfiprintf_r+0x4e>
 8005ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad4:	b01d      	add	sp, #116	@ 0x74
 8005ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ada:	89ab      	ldrh	r3, [r5, #12]
 8005adc:	0598      	lsls	r0, r3, #22
 8005ade:	d4f7      	bmi.n	8005ad0 <_vfiprintf_r+0x44>
 8005ae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ae2:	f7fe fa01 	bl	8003ee8 <__retarget_lock_release_recursive>
 8005ae6:	e7f3      	b.n	8005ad0 <_vfiprintf_r+0x44>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aec:	2320      	movs	r3, #32
 8005aee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005af2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005af6:	2330      	movs	r3, #48	@ 0x30
 8005af8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005ca8 <_vfiprintf_r+0x21c>
 8005afc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b00:	f04f 0901 	mov.w	r9, #1
 8005b04:	4623      	mov	r3, r4
 8005b06:	469a      	mov	sl, r3
 8005b08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b0c:	b10a      	cbz	r2, 8005b12 <_vfiprintf_r+0x86>
 8005b0e:	2a25      	cmp	r2, #37	@ 0x25
 8005b10:	d1f9      	bne.n	8005b06 <_vfiprintf_r+0x7a>
 8005b12:	ebba 0b04 	subs.w	fp, sl, r4
 8005b16:	d00b      	beq.n	8005b30 <_vfiprintf_r+0xa4>
 8005b18:	465b      	mov	r3, fp
 8005b1a:	4622      	mov	r2, r4
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	4630      	mov	r0, r6
 8005b20:	f7ff ffa2 	bl	8005a68 <__sfputs_r>
 8005b24:	3001      	adds	r0, #1
 8005b26:	f000 80a7 	beq.w	8005c78 <_vfiprintf_r+0x1ec>
 8005b2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b2c:	445a      	add	r2, fp
 8005b2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b30:	f89a 3000 	ldrb.w	r3, [sl]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 809f 	beq.w	8005c78 <_vfiprintf_r+0x1ec>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b44:	f10a 0a01 	add.w	sl, sl, #1
 8005b48:	9304      	str	r3, [sp, #16]
 8005b4a:	9307      	str	r3, [sp, #28]
 8005b4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b50:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b52:	4654      	mov	r4, sl
 8005b54:	2205      	movs	r2, #5
 8005b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b5a:	4853      	ldr	r0, [pc, #332]	@ (8005ca8 <_vfiprintf_r+0x21c>)
 8005b5c:	f7fa fb38 	bl	80001d0 <memchr>
 8005b60:	9a04      	ldr	r2, [sp, #16]
 8005b62:	b9d8      	cbnz	r0, 8005b9c <_vfiprintf_r+0x110>
 8005b64:	06d1      	lsls	r1, r2, #27
 8005b66:	bf44      	itt	mi
 8005b68:	2320      	movmi	r3, #32
 8005b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b6e:	0713      	lsls	r3, r2, #28
 8005b70:	bf44      	itt	mi
 8005b72:	232b      	movmi	r3, #43	@ 0x2b
 8005b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b78:	f89a 3000 	ldrb.w	r3, [sl]
 8005b7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b7e:	d015      	beq.n	8005bac <_vfiprintf_r+0x120>
 8005b80:	9a07      	ldr	r2, [sp, #28]
 8005b82:	4654      	mov	r4, sl
 8005b84:	2000      	movs	r0, #0
 8005b86:	f04f 0c0a 	mov.w	ip, #10
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b90:	3b30      	subs	r3, #48	@ 0x30
 8005b92:	2b09      	cmp	r3, #9
 8005b94:	d94b      	bls.n	8005c2e <_vfiprintf_r+0x1a2>
 8005b96:	b1b0      	cbz	r0, 8005bc6 <_vfiprintf_r+0x13a>
 8005b98:	9207      	str	r2, [sp, #28]
 8005b9a:	e014      	b.n	8005bc6 <_vfiprintf_r+0x13a>
 8005b9c:	eba0 0308 	sub.w	r3, r0, r8
 8005ba0:	fa09 f303 	lsl.w	r3, r9, r3
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	9304      	str	r3, [sp, #16]
 8005ba8:	46a2      	mov	sl, r4
 8005baa:	e7d2      	b.n	8005b52 <_vfiprintf_r+0xc6>
 8005bac:	9b03      	ldr	r3, [sp, #12]
 8005bae:	1d19      	adds	r1, r3, #4
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	9103      	str	r1, [sp, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	bfbb      	ittet	lt
 8005bb8:	425b      	neglt	r3, r3
 8005bba:	f042 0202 	orrlt.w	r2, r2, #2
 8005bbe:	9307      	strge	r3, [sp, #28]
 8005bc0:	9307      	strlt	r3, [sp, #28]
 8005bc2:	bfb8      	it	lt
 8005bc4:	9204      	strlt	r2, [sp, #16]
 8005bc6:	7823      	ldrb	r3, [r4, #0]
 8005bc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bca:	d10a      	bne.n	8005be2 <_vfiprintf_r+0x156>
 8005bcc:	7863      	ldrb	r3, [r4, #1]
 8005bce:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bd0:	d132      	bne.n	8005c38 <_vfiprintf_r+0x1ac>
 8005bd2:	9b03      	ldr	r3, [sp, #12]
 8005bd4:	1d1a      	adds	r2, r3, #4
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	9203      	str	r2, [sp, #12]
 8005bda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bde:	3402      	adds	r4, #2
 8005be0:	9305      	str	r3, [sp, #20]
 8005be2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005cac <_vfiprintf_r+0x220>
 8005be6:	7821      	ldrb	r1, [r4, #0]
 8005be8:	2203      	movs	r2, #3
 8005bea:	4650      	mov	r0, sl
 8005bec:	f7fa faf0 	bl	80001d0 <memchr>
 8005bf0:	b138      	cbz	r0, 8005c02 <_vfiprintf_r+0x176>
 8005bf2:	9b04      	ldr	r3, [sp, #16]
 8005bf4:	eba0 000a 	sub.w	r0, r0, sl
 8005bf8:	2240      	movs	r2, #64	@ 0x40
 8005bfa:	4082      	lsls	r2, r0
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	3401      	adds	r4, #1
 8005c00:	9304      	str	r3, [sp, #16]
 8005c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c06:	482a      	ldr	r0, [pc, #168]	@ (8005cb0 <_vfiprintf_r+0x224>)
 8005c08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c0c:	2206      	movs	r2, #6
 8005c0e:	f7fa fadf 	bl	80001d0 <memchr>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d03f      	beq.n	8005c96 <_vfiprintf_r+0x20a>
 8005c16:	4b27      	ldr	r3, [pc, #156]	@ (8005cb4 <_vfiprintf_r+0x228>)
 8005c18:	bb1b      	cbnz	r3, 8005c62 <_vfiprintf_r+0x1d6>
 8005c1a:	9b03      	ldr	r3, [sp, #12]
 8005c1c:	3307      	adds	r3, #7
 8005c1e:	f023 0307 	bic.w	r3, r3, #7
 8005c22:	3308      	adds	r3, #8
 8005c24:	9303      	str	r3, [sp, #12]
 8005c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c28:	443b      	add	r3, r7
 8005c2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c2c:	e76a      	b.n	8005b04 <_vfiprintf_r+0x78>
 8005c2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c32:	460c      	mov	r4, r1
 8005c34:	2001      	movs	r0, #1
 8005c36:	e7a8      	b.n	8005b8a <_vfiprintf_r+0xfe>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	3401      	adds	r4, #1
 8005c3c:	9305      	str	r3, [sp, #20]
 8005c3e:	4619      	mov	r1, r3
 8005c40:	f04f 0c0a 	mov.w	ip, #10
 8005c44:	4620      	mov	r0, r4
 8005c46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c4a:	3a30      	subs	r2, #48	@ 0x30
 8005c4c:	2a09      	cmp	r2, #9
 8005c4e:	d903      	bls.n	8005c58 <_vfiprintf_r+0x1cc>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0c6      	beq.n	8005be2 <_vfiprintf_r+0x156>
 8005c54:	9105      	str	r1, [sp, #20]
 8005c56:	e7c4      	b.n	8005be2 <_vfiprintf_r+0x156>
 8005c58:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e7f0      	b.n	8005c44 <_vfiprintf_r+0x1b8>
 8005c62:	ab03      	add	r3, sp, #12
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	462a      	mov	r2, r5
 8005c68:	4b13      	ldr	r3, [pc, #76]	@ (8005cb8 <_vfiprintf_r+0x22c>)
 8005c6a:	a904      	add	r1, sp, #16
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f7fd fbc9 	bl	8003404 <_printf_float>
 8005c72:	4607      	mov	r7, r0
 8005c74:	1c78      	adds	r0, r7, #1
 8005c76:	d1d6      	bne.n	8005c26 <_vfiprintf_r+0x19a>
 8005c78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c7a:	07d9      	lsls	r1, r3, #31
 8005c7c:	d405      	bmi.n	8005c8a <_vfiprintf_r+0x1fe>
 8005c7e:	89ab      	ldrh	r3, [r5, #12]
 8005c80:	059a      	lsls	r2, r3, #22
 8005c82:	d402      	bmi.n	8005c8a <_vfiprintf_r+0x1fe>
 8005c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c86:	f7fe f92f 	bl	8003ee8 <__retarget_lock_release_recursive>
 8005c8a:	89ab      	ldrh	r3, [r5, #12]
 8005c8c:	065b      	lsls	r3, r3, #25
 8005c8e:	f53f af1f 	bmi.w	8005ad0 <_vfiprintf_r+0x44>
 8005c92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c94:	e71e      	b.n	8005ad4 <_vfiprintf_r+0x48>
 8005c96:	ab03      	add	r3, sp, #12
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	462a      	mov	r2, r5
 8005c9c:	4b06      	ldr	r3, [pc, #24]	@ (8005cb8 <_vfiprintf_r+0x22c>)
 8005c9e:	a904      	add	r1, sp, #16
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	f7fd fe49 	bl	8003938 <_printf_i>
 8005ca6:	e7e4      	b.n	8005c72 <_vfiprintf_r+0x1e6>
 8005ca8:	0800702a 	.word	0x0800702a
 8005cac:	08007030 	.word	0x08007030
 8005cb0:	08007034 	.word	0x08007034
 8005cb4:	08003405 	.word	0x08003405
 8005cb8:	08005a69 	.word	0x08005a69

08005cbc <__swbuf_r>:
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cbe:	460e      	mov	r6, r1
 8005cc0:	4614      	mov	r4, r2
 8005cc2:	4605      	mov	r5, r0
 8005cc4:	b118      	cbz	r0, 8005cce <__swbuf_r+0x12>
 8005cc6:	6a03      	ldr	r3, [r0, #32]
 8005cc8:	b90b      	cbnz	r3, 8005cce <__swbuf_r+0x12>
 8005cca:	f7fd ffdf 	bl	8003c8c <__sinit>
 8005cce:	69a3      	ldr	r3, [r4, #24]
 8005cd0:	60a3      	str	r3, [r4, #8]
 8005cd2:	89a3      	ldrh	r3, [r4, #12]
 8005cd4:	071a      	lsls	r2, r3, #28
 8005cd6:	d501      	bpl.n	8005cdc <__swbuf_r+0x20>
 8005cd8:	6923      	ldr	r3, [r4, #16]
 8005cda:	b943      	cbnz	r3, 8005cee <__swbuf_r+0x32>
 8005cdc:	4621      	mov	r1, r4
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f000 f82a 	bl	8005d38 <__swsetup_r>
 8005ce4:	b118      	cbz	r0, 8005cee <__swbuf_r+0x32>
 8005ce6:	f04f 37ff 	mov.w	r7, #4294967295
 8005cea:	4638      	mov	r0, r7
 8005cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	6922      	ldr	r2, [r4, #16]
 8005cf2:	1a98      	subs	r0, r3, r2
 8005cf4:	6963      	ldr	r3, [r4, #20]
 8005cf6:	b2f6      	uxtb	r6, r6
 8005cf8:	4283      	cmp	r3, r0
 8005cfa:	4637      	mov	r7, r6
 8005cfc:	dc05      	bgt.n	8005d0a <__swbuf_r+0x4e>
 8005cfe:	4621      	mov	r1, r4
 8005d00:	4628      	mov	r0, r5
 8005d02:	f7ff fda9 	bl	8005858 <_fflush_r>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d1ed      	bne.n	8005ce6 <__swbuf_r+0x2a>
 8005d0a:	68a3      	ldr	r3, [r4, #8]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	60a3      	str	r3, [r4, #8]
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	6022      	str	r2, [r4, #0]
 8005d16:	701e      	strb	r6, [r3, #0]
 8005d18:	6962      	ldr	r2, [r4, #20]
 8005d1a:	1c43      	adds	r3, r0, #1
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d004      	beq.n	8005d2a <__swbuf_r+0x6e>
 8005d20:	89a3      	ldrh	r3, [r4, #12]
 8005d22:	07db      	lsls	r3, r3, #31
 8005d24:	d5e1      	bpl.n	8005cea <__swbuf_r+0x2e>
 8005d26:	2e0a      	cmp	r6, #10
 8005d28:	d1df      	bne.n	8005cea <__swbuf_r+0x2e>
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	f7ff fd93 	bl	8005858 <_fflush_r>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d0d9      	beq.n	8005cea <__swbuf_r+0x2e>
 8005d36:	e7d6      	b.n	8005ce6 <__swbuf_r+0x2a>

08005d38 <__swsetup_r>:
 8005d38:	b538      	push	{r3, r4, r5, lr}
 8005d3a:	4b29      	ldr	r3, [pc, #164]	@ (8005de0 <__swsetup_r+0xa8>)
 8005d3c:	4605      	mov	r5, r0
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	460c      	mov	r4, r1
 8005d42:	b118      	cbz	r0, 8005d4c <__swsetup_r+0x14>
 8005d44:	6a03      	ldr	r3, [r0, #32]
 8005d46:	b90b      	cbnz	r3, 8005d4c <__swsetup_r+0x14>
 8005d48:	f7fd ffa0 	bl	8003c8c <__sinit>
 8005d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d50:	0719      	lsls	r1, r3, #28
 8005d52:	d422      	bmi.n	8005d9a <__swsetup_r+0x62>
 8005d54:	06da      	lsls	r2, r3, #27
 8005d56:	d407      	bmi.n	8005d68 <__swsetup_r+0x30>
 8005d58:	2209      	movs	r2, #9
 8005d5a:	602a      	str	r2, [r5, #0]
 8005d5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d60:	81a3      	strh	r3, [r4, #12]
 8005d62:	f04f 30ff 	mov.w	r0, #4294967295
 8005d66:	e033      	b.n	8005dd0 <__swsetup_r+0x98>
 8005d68:	0758      	lsls	r0, r3, #29
 8005d6a:	d512      	bpl.n	8005d92 <__swsetup_r+0x5a>
 8005d6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d6e:	b141      	cbz	r1, 8005d82 <__swsetup_r+0x4a>
 8005d70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d74:	4299      	cmp	r1, r3
 8005d76:	d002      	beq.n	8005d7e <__swsetup_r+0x46>
 8005d78:	4628      	mov	r0, r5
 8005d7a:	f7fe ff1d 	bl	8004bb8 <_free_r>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d82:	89a3      	ldrh	r3, [r4, #12]
 8005d84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d88:	81a3      	strh	r3, [r4, #12]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	6063      	str	r3, [r4, #4]
 8005d8e:	6923      	ldr	r3, [r4, #16]
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	89a3      	ldrh	r3, [r4, #12]
 8005d94:	f043 0308 	orr.w	r3, r3, #8
 8005d98:	81a3      	strh	r3, [r4, #12]
 8005d9a:	6923      	ldr	r3, [r4, #16]
 8005d9c:	b94b      	cbnz	r3, 8005db2 <__swsetup_r+0x7a>
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005da8:	d003      	beq.n	8005db2 <__swsetup_r+0x7a>
 8005daa:	4621      	mov	r1, r4
 8005dac:	4628      	mov	r0, r5
 8005dae:	f000 f883 	bl	8005eb8 <__smakebuf_r>
 8005db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005db6:	f013 0201 	ands.w	r2, r3, #1
 8005dba:	d00a      	beq.n	8005dd2 <__swsetup_r+0x9a>
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	60a2      	str	r2, [r4, #8]
 8005dc0:	6962      	ldr	r2, [r4, #20]
 8005dc2:	4252      	negs	r2, r2
 8005dc4:	61a2      	str	r2, [r4, #24]
 8005dc6:	6922      	ldr	r2, [r4, #16]
 8005dc8:	b942      	cbnz	r2, 8005ddc <__swsetup_r+0xa4>
 8005dca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005dce:	d1c5      	bne.n	8005d5c <__swsetup_r+0x24>
 8005dd0:	bd38      	pop	{r3, r4, r5, pc}
 8005dd2:	0799      	lsls	r1, r3, #30
 8005dd4:	bf58      	it	pl
 8005dd6:	6962      	ldrpl	r2, [r4, #20]
 8005dd8:	60a2      	str	r2, [r4, #8]
 8005dda:	e7f4      	b.n	8005dc6 <__swsetup_r+0x8e>
 8005ddc:	2000      	movs	r0, #0
 8005dde:	e7f7      	b.n	8005dd0 <__swsetup_r+0x98>
 8005de0:	20000038 	.word	0x20000038

08005de4 <_raise_r>:
 8005de4:	291f      	cmp	r1, #31
 8005de6:	b538      	push	{r3, r4, r5, lr}
 8005de8:	4605      	mov	r5, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	d904      	bls.n	8005df8 <_raise_r+0x14>
 8005dee:	2316      	movs	r3, #22
 8005df0:	6003      	str	r3, [r0, #0]
 8005df2:	f04f 30ff 	mov.w	r0, #4294967295
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005dfa:	b112      	cbz	r2, 8005e02 <_raise_r+0x1e>
 8005dfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e00:	b94b      	cbnz	r3, 8005e16 <_raise_r+0x32>
 8005e02:	4628      	mov	r0, r5
 8005e04:	f000 f830 	bl	8005e68 <_getpid_r>
 8005e08:	4622      	mov	r2, r4
 8005e0a:	4601      	mov	r1, r0
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e12:	f000 b817 	b.w	8005e44 <_kill_r>
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d00a      	beq.n	8005e30 <_raise_r+0x4c>
 8005e1a:	1c59      	adds	r1, r3, #1
 8005e1c:	d103      	bne.n	8005e26 <_raise_r+0x42>
 8005e1e:	2316      	movs	r3, #22
 8005e20:	6003      	str	r3, [r0, #0]
 8005e22:	2001      	movs	r0, #1
 8005e24:	e7e7      	b.n	8005df6 <_raise_r+0x12>
 8005e26:	2100      	movs	r1, #0
 8005e28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	4798      	blx	r3
 8005e30:	2000      	movs	r0, #0
 8005e32:	e7e0      	b.n	8005df6 <_raise_r+0x12>

08005e34 <raise>:
 8005e34:	4b02      	ldr	r3, [pc, #8]	@ (8005e40 <raise+0xc>)
 8005e36:	4601      	mov	r1, r0
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	f7ff bfd3 	b.w	8005de4 <_raise_r>
 8005e3e:	bf00      	nop
 8005e40:	20000038 	.word	0x20000038

08005e44 <_kill_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4d07      	ldr	r5, [pc, #28]	@ (8005e64 <_kill_r+0x20>)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	4611      	mov	r1, r2
 8005e50:	602b      	str	r3, [r5, #0]
 8005e52:	f7fb fd6e 	bl	8001932 <_kill>
 8005e56:	1c43      	adds	r3, r0, #1
 8005e58:	d102      	bne.n	8005e60 <_kill_r+0x1c>
 8005e5a:	682b      	ldr	r3, [r5, #0]
 8005e5c:	b103      	cbz	r3, 8005e60 <_kill_r+0x1c>
 8005e5e:	6023      	str	r3, [r4, #0]
 8005e60:	bd38      	pop	{r3, r4, r5, pc}
 8005e62:	bf00      	nop
 8005e64:	20000620 	.word	0x20000620

08005e68 <_getpid_r>:
 8005e68:	f7fb bd5c 	b.w	8001924 <_getpid>

08005e6c <__swhatbuf_r>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	460c      	mov	r4, r1
 8005e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e74:	2900      	cmp	r1, #0
 8005e76:	b096      	sub	sp, #88	@ 0x58
 8005e78:	4615      	mov	r5, r2
 8005e7a:	461e      	mov	r6, r3
 8005e7c:	da0d      	bge.n	8005e9a <__swhatbuf_r+0x2e>
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e84:	f04f 0100 	mov.w	r1, #0
 8005e88:	bf14      	ite	ne
 8005e8a:	2340      	movne	r3, #64	@ 0x40
 8005e8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e90:	2000      	movs	r0, #0
 8005e92:	6031      	str	r1, [r6, #0]
 8005e94:	602b      	str	r3, [r5, #0]
 8005e96:	b016      	add	sp, #88	@ 0x58
 8005e98:	bd70      	pop	{r4, r5, r6, pc}
 8005e9a:	466a      	mov	r2, sp
 8005e9c:	f000 f848 	bl	8005f30 <_fstat_r>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	dbec      	blt.n	8005e7e <__swhatbuf_r+0x12>
 8005ea4:	9901      	ldr	r1, [sp, #4]
 8005ea6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005eaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005eae:	4259      	negs	r1, r3
 8005eb0:	4159      	adcs	r1, r3
 8005eb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005eb6:	e7eb      	b.n	8005e90 <__swhatbuf_r+0x24>

08005eb8 <__smakebuf_r>:
 8005eb8:	898b      	ldrh	r3, [r1, #12]
 8005eba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ebc:	079d      	lsls	r5, r3, #30
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	d507      	bpl.n	8005ed4 <__smakebuf_r+0x1c>
 8005ec4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	6123      	str	r3, [r4, #16]
 8005ecc:	2301      	movs	r3, #1
 8005ece:	6163      	str	r3, [r4, #20]
 8005ed0:	b003      	add	sp, #12
 8005ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ed4:	ab01      	add	r3, sp, #4
 8005ed6:	466a      	mov	r2, sp
 8005ed8:	f7ff ffc8 	bl	8005e6c <__swhatbuf_r>
 8005edc:	9f00      	ldr	r7, [sp, #0]
 8005ede:	4605      	mov	r5, r0
 8005ee0:	4639      	mov	r1, r7
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f7fe fedc 	bl	8004ca0 <_malloc_r>
 8005ee8:	b948      	cbnz	r0, 8005efe <__smakebuf_r+0x46>
 8005eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eee:	059a      	lsls	r2, r3, #22
 8005ef0:	d4ee      	bmi.n	8005ed0 <__smakebuf_r+0x18>
 8005ef2:	f023 0303 	bic.w	r3, r3, #3
 8005ef6:	f043 0302 	orr.w	r3, r3, #2
 8005efa:	81a3      	strh	r3, [r4, #12]
 8005efc:	e7e2      	b.n	8005ec4 <__smakebuf_r+0xc>
 8005efe:	89a3      	ldrh	r3, [r4, #12]
 8005f00:	6020      	str	r0, [r4, #0]
 8005f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f06:	81a3      	strh	r3, [r4, #12]
 8005f08:	9b01      	ldr	r3, [sp, #4]
 8005f0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005f0e:	b15b      	cbz	r3, 8005f28 <__smakebuf_r+0x70>
 8005f10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f14:	4630      	mov	r0, r6
 8005f16:	f000 f81d 	bl	8005f54 <_isatty_r>
 8005f1a:	b128      	cbz	r0, 8005f28 <__smakebuf_r+0x70>
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	f023 0303 	bic.w	r3, r3, #3
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	81a3      	strh	r3, [r4, #12]
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	431d      	orrs	r5, r3
 8005f2c:	81a5      	strh	r5, [r4, #12]
 8005f2e:	e7cf      	b.n	8005ed0 <__smakebuf_r+0x18>

08005f30 <_fstat_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4d07      	ldr	r5, [pc, #28]	@ (8005f50 <_fstat_r+0x20>)
 8005f34:	2300      	movs	r3, #0
 8005f36:	4604      	mov	r4, r0
 8005f38:	4608      	mov	r0, r1
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	602b      	str	r3, [r5, #0]
 8005f3e:	f7fb fd57 	bl	80019f0 <_fstat>
 8005f42:	1c43      	adds	r3, r0, #1
 8005f44:	d102      	bne.n	8005f4c <_fstat_r+0x1c>
 8005f46:	682b      	ldr	r3, [r5, #0]
 8005f48:	b103      	cbz	r3, 8005f4c <_fstat_r+0x1c>
 8005f4a:	6023      	str	r3, [r4, #0]
 8005f4c:	bd38      	pop	{r3, r4, r5, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000620 	.word	0x20000620

08005f54 <_isatty_r>:
 8005f54:	b538      	push	{r3, r4, r5, lr}
 8005f56:	4d06      	ldr	r5, [pc, #24]	@ (8005f70 <_isatty_r+0x1c>)
 8005f58:	2300      	movs	r3, #0
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	602b      	str	r3, [r5, #0]
 8005f60:	f7fb fd55 	bl	8001a0e <_isatty>
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d102      	bne.n	8005f6e <_isatty_r+0x1a>
 8005f68:	682b      	ldr	r3, [r5, #0]
 8005f6a:	b103      	cbz	r3, 8005f6e <_isatty_r+0x1a>
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	bd38      	pop	{r3, r4, r5, pc}
 8005f70:	20000620 	.word	0x20000620

08005f74 <pow>:
 8005f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f78:	4614      	mov	r4, r2
 8005f7a:	461d      	mov	r5, r3
 8005f7c:	4680      	mov	r8, r0
 8005f7e:	4689      	mov	r9, r1
 8005f80:	f000 f95e 	bl	8006240 <__ieee754_pow>
 8005f84:	4622      	mov	r2, r4
 8005f86:	4606      	mov	r6, r0
 8005f88:	460f      	mov	r7, r1
 8005f8a:	462b      	mov	r3, r5
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	4629      	mov	r1, r5
 8005f90:	f7fa fdcc 	bl	8000b2c <__aeabi_dcmpun>
 8005f94:	bbc8      	cbnz	r0, 800600a <pow+0x96>
 8005f96:	2200      	movs	r2, #0
 8005f98:	2300      	movs	r3, #0
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	f7fa fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fa2:	b1b8      	cbz	r0, 8005fd4 <pow+0x60>
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	4620      	mov	r0, r4
 8005faa:	4629      	mov	r1, r5
 8005fac:	f7fa fd8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	d141      	bne.n	8006038 <pow+0xc4>
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	f000 f868 	bl	800608c <finite>
 8005fbc:	b328      	cbz	r0, 800600a <pow+0x96>
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	f7fa fd89 	bl	8000adc <__aeabi_dcmplt>
 8005fca:	b1f0      	cbz	r0, 800600a <pow+0x96>
 8005fcc:	f7fd ff60 	bl	8003e90 <__errno>
 8005fd0:	2322      	movs	r3, #34	@ 0x22
 8005fd2:	e019      	b.n	8006008 <pow+0x94>
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	4639      	mov	r1, r7
 8005fd8:	f000 f858 	bl	800608c <finite>
 8005fdc:	b9c8      	cbnz	r0, 8006012 <pow+0x9e>
 8005fde:	4640      	mov	r0, r8
 8005fe0:	4649      	mov	r1, r9
 8005fe2:	f000 f853 	bl	800608c <finite>
 8005fe6:	b1a0      	cbz	r0, 8006012 <pow+0x9e>
 8005fe8:	4620      	mov	r0, r4
 8005fea:	4629      	mov	r1, r5
 8005fec:	f000 f84e 	bl	800608c <finite>
 8005ff0:	b178      	cbz	r0, 8006012 <pow+0x9e>
 8005ff2:	4632      	mov	r2, r6
 8005ff4:	463b      	mov	r3, r7
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	f7fa fd97 	bl	8000b2c <__aeabi_dcmpun>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d0e4      	beq.n	8005fcc <pow+0x58>
 8006002:	f7fd ff45 	bl	8003e90 <__errno>
 8006006:	2321      	movs	r3, #33	@ 0x21
 8006008:	6003      	str	r3, [r0, #0]
 800600a:	4630      	mov	r0, r6
 800600c:	4639      	mov	r1, r7
 800600e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006012:	2200      	movs	r2, #0
 8006014:	2300      	movs	r3, #0
 8006016:	4630      	mov	r0, r6
 8006018:	4639      	mov	r1, r7
 800601a:	f7fa fd55 	bl	8000ac8 <__aeabi_dcmpeq>
 800601e:	2800      	cmp	r0, #0
 8006020:	d0f3      	beq.n	800600a <pow+0x96>
 8006022:	4640      	mov	r0, r8
 8006024:	4649      	mov	r1, r9
 8006026:	f000 f831 	bl	800608c <finite>
 800602a:	2800      	cmp	r0, #0
 800602c:	d0ed      	beq.n	800600a <pow+0x96>
 800602e:	4620      	mov	r0, r4
 8006030:	4629      	mov	r1, r5
 8006032:	f000 f82b 	bl	800608c <finite>
 8006036:	e7c8      	b.n	8005fca <pow+0x56>
 8006038:	4f01      	ldr	r7, [pc, #4]	@ (8006040 <pow+0xcc>)
 800603a:	2600      	movs	r6, #0
 800603c:	e7e5      	b.n	800600a <pow+0x96>
 800603e:	bf00      	nop
 8006040:	3ff00000 	.word	0x3ff00000

08006044 <sqrt>:
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	4606      	mov	r6, r0
 8006048:	460f      	mov	r7, r1
 800604a:	f000 f825 	bl	8006098 <__ieee754_sqrt>
 800604e:	4632      	mov	r2, r6
 8006050:	4604      	mov	r4, r0
 8006052:	460d      	mov	r5, r1
 8006054:	463b      	mov	r3, r7
 8006056:	4630      	mov	r0, r6
 8006058:	4639      	mov	r1, r7
 800605a:	f7fa fd67 	bl	8000b2c <__aeabi_dcmpun>
 800605e:	b990      	cbnz	r0, 8006086 <sqrt+0x42>
 8006060:	2200      	movs	r2, #0
 8006062:	2300      	movs	r3, #0
 8006064:	4630      	mov	r0, r6
 8006066:	4639      	mov	r1, r7
 8006068:	f7fa fd38 	bl	8000adc <__aeabi_dcmplt>
 800606c:	b158      	cbz	r0, 8006086 <sqrt+0x42>
 800606e:	f7fd ff0f 	bl	8003e90 <__errno>
 8006072:	2321      	movs	r3, #33	@ 0x21
 8006074:	6003      	str	r3, [r0, #0]
 8006076:	2200      	movs	r2, #0
 8006078:	2300      	movs	r3, #0
 800607a:	4610      	mov	r0, r2
 800607c:	4619      	mov	r1, r3
 800607e:	f7fa fbe5 	bl	800084c <__aeabi_ddiv>
 8006082:	4604      	mov	r4, r0
 8006084:	460d      	mov	r5, r1
 8006086:	4620      	mov	r0, r4
 8006088:	4629      	mov	r1, r5
 800608a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800608c <finite>:
 800608c:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8006090:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006094:	0fc0      	lsrs	r0, r0, #31
 8006096:	4770      	bx	lr

08006098 <__ieee754_sqrt>:
 8006098:	4a65      	ldr	r2, [pc, #404]	@ (8006230 <__ieee754_sqrt+0x198>)
 800609a:	438a      	bics	r2, r1
 800609c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a0:	4606      	mov	r6, r0
 80060a2:	460f      	mov	r7, r1
 80060a4:	460b      	mov	r3, r1
 80060a6:	4604      	mov	r4, r0
 80060a8:	d10e      	bne.n	80060c8 <__ieee754_sqrt+0x30>
 80060aa:	4602      	mov	r2, r0
 80060ac:	f7fa faa4 	bl	80005f8 <__aeabi_dmul>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4630      	mov	r0, r6
 80060b6:	4639      	mov	r1, r7
 80060b8:	f7fa f8e8 	bl	800028c <__adddf3>
 80060bc:	4606      	mov	r6, r0
 80060be:	460f      	mov	r7, r1
 80060c0:	4630      	mov	r0, r6
 80060c2:	4639      	mov	r1, r7
 80060c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c8:	2900      	cmp	r1, #0
 80060ca:	dc0c      	bgt.n	80060e6 <__ieee754_sqrt+0x4e>
 80060cc:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80060d0:	4302      	orrs	r2, r0
 80060d2:	d0f5      	beq.n	80060c0 <__ieee754_sqrt+0x28>
 80060d4:	b189      	cbz	r1, 80060fa <__ieee754_sqrt+0x62>
 80060d6:	4602      	mov	r2, r0
 80060d8:	f7fa f8d6 	bl	8000288 <__aeabi_dsub>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	f7fa fbb4 	bl	800084c <__aeabi_ddiv>
 80060e4:	e7ea      	b.n	80060bc <__ieee754_sqrt+0x24>
 80060e6:	150a      	asrs	r2, r1, #20
 80060e8:	d115      	bne.n	8006116 <__ieee754_sqrt+0x7e>
 80060ea:	2100      	movs	r1, #0
 80060ec:	e009      	b.n	8006102 <__ieee754_sqrt+0x6a>
 80060ee:	0ae3      	lsrs	r3, r4, #11
 80060f0:	3a15      	subs	r2, #21
 80060f2:	0564      	lsls	r4, r4, #21
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0fa      	beq.n	80060ee <__ieee754_sqrt+0x56>
 80060f8:	e7f7      	b.n	80060ea <__ieee754_sqrt+0x52>
 80060fa:	460a      	mov	r2, r1
 80060fc:	e7fa      	b.n	80060f4 <__ieee754_sqrt+0x5c>
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	3101      	adds	r1, #1
 8006102:	02d8      	lsls	r0, r3, #11
 8006104:	d5fb      	bpl.n	80060fe <__ieee754_sqrt+0x66>
 8006106:	1e48      	subs	r0, r1, #1
 8006108:	1a12      	subs	r2, r2, r0
 800610a:	f1c1 0020 	rsb	r0, r1, #32
 800610e:	fa24 f000 	lsr.w	r0, r4, r0
 8006112:	4303      	orrs	r3, r0
 8006114:	408c      	lsls	r4, r1
 8006116:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800611a:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800611e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006122:	07d2      	lsls	r2, r2, #31
 8006124:	bf5c      	itt	pl
 8006126:	005b      	lslpl	r3, r3, #1
 8006128:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800612c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006130:	bf58      	it	pl
 8006132:	0064      	lslpl	r4, r4, #1
 8006134:	2700      	movs	r7, #0
 8006136:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800613a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800613e:	0064      	lsls	r4, r4, #1
 8006140:	2116      	movs	r1, #22
 8006142:	463a      	mov	r2, r7
 8006144:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006148:	1815      	adds	r5, r2, r0
 800614a:	429d      	cmp	r5, r3
 800614c:	bfde      	ittt	le
 800614e:	182a      	addle	r2, r5, r0
 8006150:	1b5b      	suble	r3, r3, r5
 8006152:	183f      	addle	r7, r7, r0
 8006154:	0fe5      	lsrs	r5, r4, #31
 8006156:	3901      	subs	r1, #1
 8006158:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800615c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006160:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006164:	d1f0      	bne.n	8006148 <__ieee754_sqrt+0xb0>
 8006166:	460d      	mov	r5, r1
 8006168:	2620      	movs	r6, #32
 800616a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800616e:	4293      	cmp	r3, r2
 8006170:	eb00 0c01 	add.w	ip, r0, r1
 8006174:	dc02      	bgt.n	800617c <__ieee754_sqrt+0xe4>
 8006176:	d113      	bne.n	80061a0 <__ieee754_sqrt+0x108>
 8006178:	45a4      	cmp	ip, r4
 800617a:	d811      	bhi.n	80061a0 <__ieee754_sqrt+0x108>
 800617c:	f1bc 0f00 	cmp.w	ip, #0
 8006180:	eb0c 0100 	add.w	r1, ip, r0
 8006184:	da3e      	bge.n	8006204 <__ieee754_sqrt+0x16c>
 8006186:	2900      	cmp	r1, #0
 8006188:	db3c      	blt.n	8006204 <__ieee754_sqrt+0x16c>
 800618a:	f102 0e01 	add.w	lr, r2, #1
 800618e:	1a9b      	subs	r3, r3, r2
 8006190:	45a4      	cmp	ip, r4
 8006192:	bf88      	it	hi
 8006194:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006198:	eba4 040c 	sub.w	r4, r4, ip
 800619c:	4405      	add	r5, r0
 800619e:	4672      	mov	r2, lr
 80061a0:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80061a4:	3e01      	subs	r6, #1
 80061a6:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80061aa:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80061ae:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80061b2:	d1dc      	bne.n	800616e <__ieee754_sqrt+0xd6>
 80061b4:	431c      	orrs	r4, r3
 80061b6:	d01a      	beq.n	80061ee <__ieee754_sqrt+0x156>
 80061b8:	4c1e      	ldr	r4, [pc, #120]	@ (8006234 <__ieee754_sqrt+0x19c>)
 80061ba:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8006238 <__ieee754_sqrt+0x1a0>
 80061be:	e9d4 0100 	ldrd	r0, r1, [r4]
 80061c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80061c6:	f7fa f85f 	bl	8000288 <__aeabi_dsub>
 80061ca:	e9d4 ab00 	ldrd	sl, fp, [r4]
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	4650      	mov	r0, sl
 80061d4:	4659      	mov	r1, fp
 80061d6:	f7fa fc8b 	bl	8000af0 <__aeabi_dcmple>
 80061da:	b140      	cbz	r0, 80061ee <__ieee754_sqrt+0x156>
 80061dc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80061e0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80061e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80061e8:	d10e      	bne.n	8006208 <__ieee754_sqrt+0x170>
 80061ea:	3701      	adds	r7, #1
 80061ec:	4635      	mov	r5, r6
 80061ee:	107b      	asrs	r3, r7, #1
 80061f0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80061f4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80061f8:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 80061fc:	086b      	lsrs	r3, r5, #1
 80061fe:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8006202:	e75b      	b.n	80060bc <__ieee754_sqrt+0x24>
 8006204:	4696      	mov	lr, r2
 8006206:	e7c2      	b.n	800618e <__ieee754_sqrt+0xf6>
 8006208:	f7fa f840 	bl	800028c <__adddf3>
 800620c:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	4650      	mov	r0, sl
 8006216:	4659      	mov	r1, fp
 8006218:	f7fa fc60 	bl	8000adc <__aeabi_dcmplt>
 800621c:	b120      	cbz	r0, 8006228 <__ieee754_sqrt+0x190>
 800621e:	1cab      	adds	r3, r5, #2
 8006220:	bf08      	it	eq
 8006222:	3701      	addeq	r7, #1
 8006224:	3502      	adds	r5, #2
 8006226:	e7e2      	b.n	80061ee <__ieee754_sqrt+0x156>
 8006228:	1c6b      	adds	r3, r5, #1
 800622a:	f023 0501 	bic.w	r5, r3, #1
 800622e:	e7de      	b.n	80061ee <__ieee754_sqrt+0x156>
 8006230:	7ff00000 	.word	0x7ff00000
 8006234:	08007290 	.word	0x08007290
 8006238:	08007288 	.word	0x08007288
 800623c:	00000000 	.word	0x00000000

08006240 <__ieee754_pow>:
 8006240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006244:	b091      	sub	sp, #68	@ 0x44
 8006246:	e9cd 2300 	strd	r2, r3, [sp]
 800624a:	468b      	mov	fp, r1
 800624c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8006250:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8006254:	4682      	mov	sl, r0
 8006256:	ea57 0001 	orrs.w	r0, r7, r1
 800625a:	d112      	bne.n	8006282 <__ieee754_pow+0x42>
 800625c:	4653      	mov	r3, sl
 800625e:	18db      	adds	r3, r3, r3
 8006260:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8006264:	4152      	adcs	r2, r2
 8006266:	4298      	cmp	r0, r3
 8006268:	4b93      	ldr	r3, [pc, #588]	@ (80064b8 <__ieee754_pow+0x278>)
 800626a:	4193      	sbcs	r3, r2
 800626c:	f080 84cd 	bcs.w	8006c0a <__ieee754_pow+0x9ca>
 8006270:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006274:	4650      	mov	r0, sl
 8006276:	4659      	mov	r1, fp
 8006278:	f7fa f808 	bl	800028c <__adddf3>
 800627c:	b011      	add	sp, #68	@ 0x44
 800627e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006282:	4b8e      	ldr	r3, [pc, #568]	@ (80064bc <__ieee754_pow+0x27c>)
 8006284:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 8006288:	429d      	cmp	r5, r3
 800628a:	465e      	mov	r6, fp
 800628c:	46d1      	mov	r9, sl
 800628e:	d80b      	bhi.n	80062a8 <__ieee754_pow+0x68>
 8006290:	d105      	bne.n	800629e <__ieee754_pow+0x5e>
 8006292:	f1ba 0f00 	cmp.w	sl, #0
 8006296:	d1eb      	bne.n	8006270 <__ieee754_pow+0x30>
 8006298:	42af      	cmp	r7, r5
 800629a:	d8e9      	bhi.n	8006270 <__ieee754_pow+0x30>
 800629c:	e001      	b.n	80062a2 <__ieee754_pow+0x62>
 800629e:	429f      	cmp	r7, r3
 80062a0:	d802      	bhi.n	80062a8 <__ieee754_pow+0x68>
 80062a2:	429f      	cmp	r7, r3
 80062a4:	d10f      	bne.n	80062c6 <__ieee754_pow+0x86>
 80062a6:	b171      	cbz	r1, 80062c6 <__ieee754_pow+0x86>
 80062a8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80062ac:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80062b0:	ea56 0609 	orrs.w	r6, r6, r9
 80062b4:	d1dc      	bne.n	8006270 <__ieee754_pow+0x30>
 80062b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80062ba:	18db      	adds	r3, r3, r3
 80062bc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80062c0:	4152      	adcs	r2, r2
 80062c2:	429e      	cmp	r6, r3
 80062c4:	e7d0      	b.n	8006268 <__ieee754_pow+0x28>
 80062c6:	2e00      	cmp	r6, #0
 80062c8:	462b      	mov	r3, r5
 80062ca:	da42      	bge.n	8006352 <__ieee754_pow+0x112>
 80062cc:	4a7c      	ldr	r2, [pc, #496]	@ (80064c0 <__ieee754_pow+0x280>)
 80062ce:	4297      	cmp	r7, r2
 80062d0:	d856      	bhi.n	8006380 <__ieee754_pow+0x140>
 80062d2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80062d6:	4297      	cmp	r7, r2
 80062d8:	f240 84a6 	bls.w	8006c28 <__ieee754_pow+0x9e8>
 80062dc:	153a      	asrs	r2, r7, #20
 80062de:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80062e2:	2a14      	cmp	r2, #20
 80062e4:	dd18      	ble.n	8006318 <__ieee754_pow+0xd8>
 80062e6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80062ea:	fa21 f402 	lsr.w	r4, r1, r2
 80062ee:	fa04 f202 	lsl.w	r2, r4, r2
 80062f2:	428a      	cmp	r2, r1
 80062f4:	f040 8498 	bne.w	8006c28 <__ieee754_pow+0x9e8>
 80062f8:	f004 0401 	and.w	r4, r4, #1
 80062fc:	f1c4 0402 	rsb	r4, r4, #2
 8006300:	2900      	cmp	r1, #0
 8006302:	d159      	bne.n	80063b8 <__ieee754_pow+0x178>
 8006304:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8006308:	d149      	bne.n	800639e <__ieee754_pow+0x15e>
 800630a:	4652      	mov	r2, sl
 800630c:	465b      	mov	r3, fp
 800630e:	4650      	mov	r0, sl
 8006310:	4659      	mov	r1, fp
 8006312:	f7fa f971 	bl	80005f8 <__aeabi_dmul>
 8006316:	e7b1      	b.n	800627c <__ieee754_pow+0x3c>
 8006318:	2900      	cmp	r1, #0
 800631a:	d14c      	bne.n	80063b6 <__ieee754_pow+0x176>
 800631c:	f1c2 0214 	rsb	r2, r2, #20
 8006320:	fa47 f402 	asr.w	r4, r7, r2
 8006324:	fa04 f202 	lsl.w	r2, r4, r2
 8006328:	42ba      	cmp	r2, r7
 800632a:	f040 847a 	bne.w	8006c22 <__ieee754_pow+0x9e2>
 800632e:	f004 0401 	and.w	r4, r4, #1
 8006332:	f1c4 0402 	rsb	r4, r4, #2
 8006336:	4a63      	ldr	r2, [pc, #396]	@ (80064c4 <__ieee754_pow+0x284>)
 8006338:	4297      	cmp	r7, r2
 800633a:	d1e3      	bne.n	8006304 <__ieee754_pow+0xc4>
 800633c:	f1b8 0f00 	cmp.w	r8, #0
 8006340:	f280 846b 	bge.w	8006c1a <__ieee754_pow+0x9da>
 8006344:	495f      	ldr	r1, [pc, #380]	@ (80064c4 <__ieee754_pow+0x284>)
 8006346:	4652      	mov	r2, sl
 8006348:	465b      	mov	r3, fp
 800634a:	2000      	movs	r0, #0
 800634c:	f7fa fa7e 	bl	800084c <__aeabi_ddiv>
 8006350:	e794      	b.n	800627c <__ieee754_pow+0x3c>
 8006352:	2400      	movs	r4, #0
 8006354:	bb81      	cbnz	r1, 80063b8 <__ieee754_pow+0x178>
 8006356:	4a59      	ldr	r2, [pc, #356]	@ (80064bc <__ieee754_pow+0x27c>)
 8006358:	4297      	cmp	r7, r2
 800635a:	d1ec      	bne.n	8006336 <__ieee754_pow+0xf6>
 800635c:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 8006360:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8006364:	ea53 0309 	orrs.w	r3, r3, r9
 8006368:	f000 844f 	beq.w	8006c0a <__ieee754_pow+0x9ca>
 800636c:	4b56      	ldr	r3, [pc, #344]	@ (80064c8 <__ieee754_pow+0x288>)
 800636e:	429d      	cmp	r5, r3
 8006370:	d908      	bls.n	8006384 <__ieee754_pow+0x144>
 8006372:	f1b8 0f00 	cmp.w	r8, #0
 8006376:	f280 844c 	bge.w	8006c12 <__ieee754_pow+0x9d2>
 800637a:	2000      	movs	r0, #0
 800637c:	2100      	movs	r1, #0
 800637e:	e77d      	b.n	800627c <__ieee754_pow+0x3c>
 8006380:	2402      	movs	r4, #2
 8006382:	e7e7      	b.n	8006354 <__ieee754_pow+0x114>
 8006384:	f1b8 0f00 	cmp.w	r8, #0
 8006388:	f04f 0000 	mov.w	r0, #0
 800638c:	f04f 0100 	mov.w	r1, #0
 8006390:	f6bf af74 	bge.w	800627c <__ieee754_pow+0x3c>
 8006394:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006398:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800639c:	e76e      	b.n	800627c <__ieee754_pow+0x3c>
 800639e:	4a4b      	ldr	r2, [pc, #300]	@ (80064cc <__ieee754_pow+0x28c>)
 80063a0:	4590      	cmp	r8, r2
 80063a2:	d109      	bne.n	80063b8 <__ieee754_pow+0x178>
 80063a4:	2e00      	cmp	r6, #0
 80063a6:	db07      	blt.n	80063b8 <__ieee754_pow+0x178>
 80063a8:	4650      	mov	r0, sl
 80063aa:	4659      	mov	r1, fp
 80063ac:	b011      	add	sp, #68	@ 0x44
 80063ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b2:	f7ff be71 	b.w	8006098 <__ieee754_sqrt>
 80063b6:	2400      	movs	r4, #0
 80063b8:	4650      	mov	r0, sl
 80063ba:	4659      	mov	r1, fp
 80063bc:	9302      	str	r3, [sp, #8]
 80063be:	f000 fc69 	bl	8006c94 <fabs>
 80063c2:	9b02      	ldr	r3, [sp, #8]
 80063c4:	f1b9 0f00 	cmp.w	r9, #0
 80063c8:	d127      	bne.n	800641a <__ieee754_pow+0x1da>
 80063ca:	4a3e      	ldr	r2, [pc, #248]	@ (80064c4 <__ieee754_pow+0x284>)
 80063cc:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 80063d0:	4594      	cmp	ip, r2
 80063d2:	d000      	beq.n	80063d6 <__ieee754_pow+0x196>
 80063d4:	bb0d      	cbnz	r5, 800641a <__ieee754_pow+0x1da>
 80063d6:	f1b8 0f00 	cmp.w	r8, #0
 80063da:	da05      	bge.n	80063e8 <__ieee754_pow+0x1a8>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	2000      	movs	r0, #0
 80063e2:	4938      	ldr	r1, [pc, #224]	@ (80064c4 <__ieee754_pow+0x284>)
 80063e4:	f7fa fa32 	bl	800084c <__aeabi_ddiv>
 80063e8:	2e00      	cmp	r6, #0
 80063ea:	f6bf af47 	bge.w	800627c <__ieee754_pow+0x3c>
 80063ee:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80063f2:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80063f6:	4325      	orrs	r5, r4
 80063f8:	d108      	bne.n	800640c <__ieee754_pow+0x1cc>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	4610      	mov	r0, r2
 8006400:	4619      	mov	r1, r3
 8006402:	f7f9 ff41 	bl	8000288 <__aeabi_dsub>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	e79f      	b.n	800634c <__ieee754_pow+0x10c>
 800640c:	2c01      	cmp	r4, #1
 800640e:	f47f af35 	bne.w	800627c <__ieee754_pow+0x3c>
 8006412:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006416:	4619      	mov	r1, r3
 8006418:	e730      	b.n	800627c <__ieee754_pow+0x3c>
 800641a:	0ff2      	lsrs	r2, r6, #31
 800641c:	3a01      	subs	r2, #1
 800641e:	ea52 0c04 	orrs.w	ip, r2, r4
 8006422:	d102      	bne.n	800642a <__ieee754_pow+0x1ea>
 8006424:	4652      	mov	r2, sl
 8006426:	465b      	mov	r3, fp
 8006428:	e7e9      	b.n	80063fe <__ieee754_pow+0x1be>
 800642a:	3c01      	subs	r4, #1
 800642c:	4314      	orrs	r4, r2
 800642e:	bf14      	ite	ne
 8006430:	f8df a090 	ldrne.w	sl, [pc, #144]	@ 80064c4 <__ieee754_pow+0x284>
 8006434:	f8df a098 	ldreq.w	sl, [pc, #152]	@ 80064d0 <__ieee754_pow+0x290>
 8006438:	f04f 0900 	mov.w	r9, #0
 800643c:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8006440:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8006444:	f240 8104 	bls.w	8006650 <__ieee754_pow+0x410>
 8006448:	4b22      	ldr	r3, [pc, #136]	@ (80064d4 <__ieee754_pow+0x294>)
 800644a:	429f      	cmp	r7, r3
 800644c:	4b1e      	ldr	r3, [pc, #120]	@ (80064c8 <__ieee754_pow+0x288>)
 800644e:	d913      	bls.n	8006478 <__ieee754_pow+0x238>
 8006450:	429d      	cmp	r5, r3
 8006452:	d808      	bhi.n	8006466 <__ieee754_pow+0x226>
 8006454:	f1b8 0f00 	cmp.w	r8, #0
 8006458:	da08      	bge.n	800646c <__ieee754_pow+0x22c>
 800645a:	2000      	movs	r0, #0
 800645c:	b011      	add	sp, #68	@ 0x44
 800645e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006462:	f000 bcb1 	b.w	8006dc8 <__math_oflow>
 8006466:	f1b8 0f00 	cmp.w	r8, #0
 800646a:	dcf6      	bgt.n	800645a <__ieee754_pow+0x21a>
 800646c:	2000      	movs	r0, #0
 800646e:	b011      	add	sp, #68	@ 0x44
 8006470:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	f000 bca3 	b.w	8006dbe <__math_uflow>
 8006478:	429d      	cmp	r5, r3
 800647a:	d20c      	bcs.n	8006496 <__ieee754_pow+0x256>
 800647c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006480:	2200      	movs	r2, #0
 8006482:	2300      	movs	r3, #0
 8006484:	f7fa fb2a 	bl	8000adc <__aeabi_dcmplt>
 8006488:	3800      	subs	r0, #0
 800648a:	bf18      	it	ne
 800648c:	2001      	movne	r0, #1
 800648e:	f1b8 0f00 	cmp.w	r8, #0
 8006492:	daec      	bge.n	800646e <__ieee754_pow+0x22e>
 8006494:	e7e2      	b.n	800645c <__ieee754_pow+0x21c>
 8006496:	4b0b      	ldr	r3, [pc, #44]	@ (80064c4 <__ieee754_pow+0x284>)
 8006498:	429d      	cmp	r5, r3
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	d91b      	bls.n	80064d8 <__ieee754_pow+0x298>
 80064a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064a4:	2300      	movs	r3, #0
 80064a6:	f7fa fb19 	bl	8000adc <__aeabi_dcmplt>
 80064aa:	3800      	subs	r0, #0
 80064ac:	bf18      	it	ne
 80064ae:	2001      	movne	r0, #1
 80064b0:	f1b8 0f00 	cmp.w	r8, #0
 80064b4:	dcd2      	bgt.n	800645c <__ieee754_pow+0x21c>
 80064b6:	e7da      	b.n	800646e <__ieee754_pow+0x22e>
 80064b8:	fff00000 	.word	0xfff00000
 80064bc:	7ff00000 	.word	0x7ff00000
 80064c0:	433fffff 	.word	0x433fffff
 80064c4:	3ff00000 	.word	0x3ff00000
 80064c8:	3fefffff 	.word	0x3fefffff
 80064cc:	3fe00000 	.word	0x3fe00000
 80064d0:	bff00000 	.word	0xbff00000
 80064d4:	43f00000 	.word	0x43f00000
 80064d8:	4b59      	ldr	r3, [pc, #356]	@ (8006640 <__ieee754_pow+0x400>)
 80064da:	f7f9 fed5 	bl	8000288 <__aeabi_dsub>
 80064de:	a350      	add	r3, pc, #320	@ (adr r3, 8006620 <__ieee754_pow+0x3e0>)
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	4604      	mov	r4, r0
 80064e6:	460d      	mov	r5, r1
 80064e8:	f7fa f886 	bl	80005f8 <__aeabi_dmul>
 80064ec:	a34e      	add	r3, pc, #312	@ (adr r3, 8006628 <__ieee754_pow+0x3e8>)
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	4606      	mov	r6, r0
 80064f4:	460f      	mov	r7, r1
 80064f6:	4620      	mov	r0, r4
 80064f8:	4629      	mov	r1, r5
 80064fa:	f7fa f87d 	bl	80005f8 <__aeabi_dmul>
 80064fe:	4b51      	ldr	r3, [pc, #324]	@ (8006644 <__ieee754_pow+0x404>)
 8006500:	4682      	mov	sl, r0
 8006502:	468b      	mov	fp, r1
 8006504:	2200      	movs	r2, #0
 8006506:	4620      	mov	r0, r4
 8006508:	4629      	mov	r1, r5
 800650a:	f7fa f875 	bl	80005f8 <__aeabi_dmul>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	a147      	add	r1, pc, #284	@ (adr r1, 8006630 <__ieee754_pow+0x3f0>)
 8006514:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006518:	f7f9 feb6 	bl	8000288 <__aeabi_dsub>
 800651c:	4622      	mov	r2, r4
 800651e:	462b      	mov	r3, r5
 8006520:	f7fa f86a 	bl	80005f8 <__aeabi_dmul>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	2000      	movs	r0, #0
 800652a:	4947      	ldr	r1, [pc, #284]	@ (8006648 <__ieee754_pow+0x408>)
 800652c:	f7f9 feac 	bl	8000288 <__aeabi_dsub>
 8006530:	4622      	mov	r2, r4
 8006532:	4680      	mov	r8, r0
 8006534:	4689      	mov	r9, r1
 8006536:	462b      	mov	r3, r5
 8006538:	4620      	mov	r0, r4
 800653a:	4629      	mov	r1, r5
 800653c:	f7fa f85c 	bl	80005f8 <__aeabi_dmul>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4640      	mov	r0, r8
 8006546:	4649      	mov	r1, r9
 8006548:	f7fa f856 	bl	80005f8 <__aeabi_dmul>
 800654c:	a33a      	add	r3, pc, #232	@ (adr r3, 8006638 <__ieee754_pow+0x3f8>)
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	f7fa f851 	bl	80005f8 <__aeabi_dmul>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4650      	mov	r0, sl
 800655c:	4659      	mov	r1, fp
 800655e:	f7f9 fe93 	bl	8000288 <__aeabi_dsub>
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	4680      	mov	r8, r0
 8006568:	4689      	mov	r9, r1
 800656a:	4630      	mov	r0, r6
 800656c:	4639      	mov	r1, r7
 800656e:	f7f9 fe8d 	bl	800028c <__adddf3>
 8006572:	2400      	movs	r4, #0
 8006574:	4632      	mov	r2, r6
 8006576:	463b      	mov	r3, r7
 8006578:	4620      	mov	r0, r4
 800657a:	460d      	mov	r5, r1
 800657c:	f7f9 fe84 	bl	8000288 <__aeabi_dsub>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4640      	mov	r0, r8
 8006586:	4649      	mov	r1, r9
 8006588:	f7f9 fe7e 	bl	8000288 <__aeabi_dsub>
 800658c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006590:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006594:	2300      	movs	r3, #0
 8006596:	9304      	str	r3, [sp, #16]
 8006598:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800659c:	4606      	mov	r6, r0
 800659e:	460f      	mov	r7, r1
 80065a0:	465b      	mov	r3, fp
 80065a2:	4652      	mov	r2, sl
 80065a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065a8:	f7f9 fe6e 	bl	8000288 <__aeabi_dsub>
 80065ac:	4622      	mov	r2, r4
 80065ae:	462b      	mov	r3, r5
 80065b0:	f7fa f822 	bl	80005f8 <__aeabi_dmul>
 80065b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065b8:	4680      	mov	r8, r0
 80065ba:	4689      	mov	r9, r1
 80065bc:	4630      	mov	r0, r6
 80065be:	4639      	mov	r1, r7
 80065c0:	f7fa f81a 	bl	80005f8 <__aeabi_dmul>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4640      	mov	r0, r8
 80065ca:	4649      	mov	r1, r9
 80065cc:	f7f9 fe5e 	bl	800028c <__adddf3>
 80065d0:	465b      	mov	r3, fp
 80065d2:	4606      	mov	r6, r0
 80065d4:	460f      	mov	r7, r1
 80065d6:	4652      	mov	r2, sl
 80065d8:	4620      	mov	r0, r4
 80065da:	4629      	mov	r1, r5
 80065dc:	f7fa f80c 	bl	80005f8 <__aeabi_dmul>
 80065e0:	460b      	mov	r3, r1
 80065e2:	4602      	mov	r2, r0
 80065e4:	4680      	mov	r8, r0
 80065e6:	4689      	mov	r9, r1
 80065e8:	4630      	mov	r0, r6
 80065ea:	4639      	mov	r1, r7
 80065ec:	f7f9 fe4e 	bl	800028c <__adddf3>
 80065f0:	4b16      	ldr	r3, [pc, #88]	@ (800664c <__ieee754_pow+0x40c>)
 80065f2:	4299      	cmp	r1, r3
 80065f4:	4604      	mov	r4, r0
 80065f6:	460d      	mov	r5, r1
 80065f8:	468b      	mov	fp, r1
 80065fa:	f340 81fd 	ble.w	80069f8 <__ieee754_pow+0x7b8>
 80065fe:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006602:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8006606:	4303      	orrs	r3, r0
 8006608:	f000 81dc 	beq.w	80069c4 <__ieee754_pow+0x784>
 800660c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006610:	2200      	movs	r2, #0
 8006612:	2300      	movs	r3, #0
 8006614:	f7fa fa62 	bl	8000adc <__aeabi_dcmplt>
 8006618:	3800      	subs	r0, #0
 800661a:	bf18      	it	ne
 800661c:	2001      	movne	r0, #1
 800661e:	e71d      	b.n	800645c <__ieee754_pow+0x21c>
 8006620:	60000000 	.word	0x60000000
 8006624:	3ff71547 	.word	0x3ff71547
 8006628:	f85ddf44 	.word	0xf85ddf44
 800662c:	3e54ae0b 	.word	0x3e54ae0b
 8006630:	55555555 	.word	0x55555555
 8006634:	3fd55555 	.word	0x3fd55555
 8006638:	652b82fe 	.word	0x652b82fe
 800663c:	3ff71547 	.word	0x3ff71547
 8006640:	3ff00000 	.word	0x3ff00000
 8006644:	3fd00000 	.word	0x3fd00000
 8006648:	3fe00000 	.word	0x3fe00000
 800664c:	408fffff 	.word	0x408fffff
 8006650:	4ad3      	ldr	r2, [pc, #844]	@ (80069a0 <__ieee754_pow+0x760>)
 8006652:	4032      	ands	r2, r6
 8006654:	2a00      	cmp	r2, #0
 8006656:	f040 817a 	bne.w	800694e <__ieee754_pow+0x70e>
 800665a:	4bd2      	ldr	r3, [pc, #840]	@ (80069a4 <__ieee754_pow+0x764>)
 800665c:	2200      	movs	r2, #0
 800665e:	f7f9 ffcb 	bl	80005f8 <__aeabi_dmul>
 8006662:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8006666:	460b      	mov	r3, r1
 8006668:	151a      	asrs	r2, r3, #20
 800666a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800666e:	4422      	add	r2, r4
 8006670:	920a      	str	r2, [sp, #40]	@ 0x28
 8006672:	4acd      	ldr	r2, [pc, #820]	@ (80069a8 <__ieee754_pow+0x768>)
 8006674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006678:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800667c:	4293      	cmp	r3, r2
 800667e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006682:	dd08      	ble.n	8006696 <__ieee754_pow+0x456>
 8006684:	4ac9      	ldr	r2, [pc, #804]	@ (80069ac <__ieee754_pow+0x76c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	f340 8163 	ble.w	8006952 <__ieee754_pow+0x712>
 800668c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800668e:	3301      	adds	r3, #1
 8006690:	930a      	str	r3, [sp, #40]	@ 0x28
 8006692:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8006696:	2600      	movs	r6, #0
 8006698:	00f3      	lsls	r3, r6, #3
 800669a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800669c:	4bc4      	ldr	r3, [pc, #784]	@ (80069b0 <__ieee754_pow+0x770>)
 800669e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80066a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066a6:	4629      	mov	r1, r5
 80066a8:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80066ac:	461a      	mov	r2, r3
 80066ae:	4623      	mov	r3, r4
 80066b0:	4682      	mov	sl, r0
 80066b2:	f7f9 fde9 	bl	8000288 <__aeabi_dsub>
 80066b6:	4652      	mov	r2, sl
 80066b8:	462b      	mov	r3, r5
 80066ba:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80066be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80066c2:	f7f9 fde3 	bl	800028c <__adddf3>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	2000      	movs	r0, #0
 80066cc:	49b9      	ldr	r1, [pc, #740]	@ (80069b4 <__ieee754_pow+0x774>)
 80066ce:	f7fa f8bd 	bl	800084c <__aeabi_ddiv>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80066da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066de:	f7f9 ff8b 	bl	80005f8 <__aeabi_dmul>
 80066e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80066e6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80066ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80066ee:	2300      	movs	r3, #0
 80066f0:	9304      	str	r3, [sp, #16]
 80066f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80066f6:	46ab      	mov	fp, r5
 80066f8:	106d      	asrs	r5, r5, #1
 80066fa:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80066fe:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006702:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006706:	2200      	movs	r2, #0
 8006708:	4640      	mov	r0, r8
 800670a:	4649      	mov	r1, r9
 800670c:	4614      	mov	r4, r2
 800670e:	461d      	mov	r5, r3
 8006710:	f7f9 ff72 	bl	80005f8 <__aeabi_dmul>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800671c:	f7f9 fdb4 	bl	8000288 <__aeabi_dsub>
 8006720:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006724:	4606      	mov	r6, r0
 8006726:	460f      	mov	r7, r1
 8006728:	4620      	mov	r0, r4
 800672a:	4629      	mov	r1, r5
 800672c:	f7f9 fdac 	bl	8000288 <__aeabi_dsub>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4650      	mov	r0, sl
 8006736:	4659      	mov	r1, fp
 8006738:	f7f9 fda6 	bl	8000288 <__aeabi_dsub>
 800673c:	4642      	mov	r2, r8
 800673e:	464b      	mov	r3, r9
 8006740:	f7f9 ff5a 	bl	80005f8 <__aeabi_dmul>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4630      	mov	r0, r6
 800674a:	4639      	mov	r1, r7
 800674c:	f7f9 fd9c 	bl	8000288 <__aeabi_dsub>
 8006750:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006754:	f7f9 ff50 	bl	80005f8 <__aeabi_dmul>
 8006758:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800675c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006760:	4610      	mov	r0, r2
 8006762:	4619      	mov	r1, r3
 8006764:	f7f9 ff48 	bl	80005f8 <__aeabi_dmul>
 8006768:	a37b      	add	r3, pc, #492	@ (adr r3, 8006958 <__ieee754_pow+0x718>)
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	4604      	mov	r4, r0
 8006770:	460d      	mov	r5, r1
 8006772:	f7f9 ff41 	bl	80005f8 <__aeabi_dmul>
 8006776:	a37a      	add	r3, pc, #488	@ (adr r3, 8006960 <__ieee754_pow+0x720>)
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	f7f9 fd86 	bl	800028c <__adddf3>
 8006780:	4622      	mov	r2, r4
 8006782:	462b      	mov	r3, r5
 8006784:	f7f9 ff38 	bl	80005f8 <__aeabi_dmul>
 8006788:	a377      	add	r3, pc, #476	@ (adr r3, 8006968 <__ieee754_pow+0x728>)
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	f7f9 fd7d 	bl	800028c <__adddf3>
 8006792:	4622      	mov	r2, r4
 8006794:	462b      	mov	r3, r5
 8006796:	f7f9 ff2f 	bl	80005f8 <__aeabi_dmul>
 800679a:	a375      	add	r3, pc, #468	@ (adr r3, 8006970 <__ieee754_pow+0x730>)
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	f7f9 fd74 	bl	800028c <__adddf3>
 80067a4:	4622      	mov	r2, r4
 80067a6:	462b      	mov	r3, r5
 80067a8:	f7f9 ff26 	bl	80005f8 <__aeabi_dmul>
 80067ac:	a372      	add	r3, pc, #456	@ (adr r3, 8006978 <__ieee754_pow+0x738>)
 80067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b2:	f7f9 fd6b 	bl	800028c <__adddf3>
 80067b6:	4622      	mov	r2, r4
 80067b8:	462b      	mov	r3, r5
 80067ba:	f7f9 ff1d 	bl	80005f8 <__aeabi_dmul>
 80067be:	a370      	add	r3, pc, #448	@ (adr r3, 8006980 <__ieee754_pow+0x740>)
 80067c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c4:	f7f9 fd62 	bl	800028c <__adddf3>
 80067c8:	4622      	mov	r2, r4
 80067ca:	4606      	mov	r6, r0
 80067cc:	460f      	mov	r7, r1
 80067ce:	462b      	mov	r3, r5
 80067d0:	4620      	mov	r0, r4
 80067d2:	4629      	mov	r1, r5
 80067d4:	f7f9 ff10 	bl	80005f8 <__aeabi_dmul>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4630      	mov	r0, r6
 80067de:	4639      	mov	r1, r7
 80067e0:	f7f9 ff0a 	bl	80005f8 <__aeabi_dmul>
 80067e4:	4642      	mov	r2, r8
 80067e6:	4604      	mov	r4, r0
 80067e8:	460d      	mov	r5, r1
 80067ea:	464b      	mov	r3, r9
 80067ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067f0:	f7f9 fd4c 	bl	800028c <__adddf3>
 80067f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067f8:	f7f9 fefe 	bl	80005f8 <__aeabi_dmul>
 80067fc:	4622      	mov	r2, r4
 80067fe:	462b      	mov	r3, r5
 8006800:	f7f9 fd44 	bl	800028c <__adddf3>
 8006804:	4642      	mov	r2, r8
 8006806:	4682      	mov	sl, r0
 8006808:	468b      	mov	fp, r1
 800680a:	464b      	mov	r3, r9
 800680c:	4640      	mov	r0, r8
 800680e:	4649      	mov	r1, r9
 8006810:	f7f9 fef2 	bl	80005f8 <__aeabi_dmul>
 8006814:	4b68      	ldr	r3, [pc, #416]	@ (80069b8 <__ieee754_pow+0x778>)
 8006816:	2200      	movs	r2, #0
 8006818:	4606      	mov	r6, r0
 800681a:	460f      	mov	r7, r1
 800681c:	f7f9 fd36 	bl	800028c <__adddf3>
 8006820:	4652      	mov	r2, sl
 8006822:	465b      	mov	r3, fp
 8006824:	f7f9 fd32 	bl	800028c <__adddf3>
 8006828:	2400      	movs	r4, #0
 800682a:	460d      	mov	r5, r1
 800682c:	4622      	mov	r2, r4
 800682e:	460b      	mov	r3, r1
 8006830:	4640      	mov	r0, r8
 8006832:	4649      	mov	r1, r9
 8006834:	f7f9 fee0 	bl	80005f8 <__aeabi_dmul>
 8006838:	4b5f      	ldr	r3, [pc, #380]	@ (80069b8 <__ieee754_pow+0x778>)
 800683a:	4680      	mov	r8, r0
 800683c:	4689      	mov	r9, r1
 800683e:	2200      	movs	r2, #0
 8006840:	4620      	mov	r0, r4
 8006842:	4629      	mov	r1, r5
 8006844:	f7f9 fd20 	bl	8000288 <__aeabi_dsub>
 8006848:	4632      	mov	r2, r6
 800684a:	463b      	mov	r3, r7
 800684c:	f7f9 fd1c 	bl	8000288 <__aeabi_dsub>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4650      	mov	r0, sl
 8006856:	4659      	mov	r1, fp
 8006858:	f7f9 fd16 	bl	8000288 <__aeabi_dsub>
 800685c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006860:	f7f9 feca 	bl	80005f8 <__aeabi_dmul>
 8006864:	4622      	mov	r2, r4
 8006866:	4606      	mov	r6, r0
 8006868:	460f      	mov	r7, r1
 800686a:	462b      	mov	r3, r5
 800686c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006870:	f7f9 fec2 	bl	80005f8 <__aeabi_dmul>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4630      	mov	r0, r6
 800687a:	4639      	mov	r1, r7
 800687c:	f7f9 fd06 	bl	800028c <__adddf3>
 8006880:	4606      	mov	r6, r0
 8006882:	460f      	mov	r7, r1
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4640      	mov	r0, r8
 800688a:	4649      	mov	r1, r9
 800688c:	f7f9 fcfe 	bl	800028c <__adddf3>
 8006890:	2400      	movs	r4, #0
 8006892:	a33d      	add	r3, pc, #244	@ (adr r3, 8006988 <__ieee754_pow+0x748>)
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	4620      	mov	r0, r4
 800689a:	460d      	mov	r5, r1
 800689c:	f7f9 feac 	bl	80005f8 <__aeabi_dmul>
 80068a0:	4642      	mov	r2, r8
 80068a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80068a6:	464b      	mov	r3, r9
 80068a8:	4620      	mov	r0, r4
 80068aa:	4629      	mov	r1, r5
 80068ac:	f7f9 fcec 	bl	8000288 <__aeabi_dsub>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4630      	mov	r0, r6
 80068b6:	4639      	mov	r1, r7
 80068b8:	f7f9 fce6 	bl	8000288 <__aeabi_dsub>
 80068bc:	a334      	add	r3, pc, #208	@ (adr r3, 8006990 <__ieee754_pow+0x750>)
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	f7f9 fe99 	bl	80005f8 <__aeabi_dmul>
 80068c6:	a334      	add	r3, pc, #208	@ (adr r3, 8006998 <__ieee754_pow+0x758>)
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	4606      	mov	r6, r0
 80068ce:	460f      	mov	r7, r1
 80068d0:	4620      	mov	r0, r4
 80068d2:	4629      	mov	r1, r5
 80068d4:	f7f9 fe90 	bl	80005f8 <__aeabi_dmul>
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	4630      	mov	r0, r6
 80068de:	4639      	mov	r1, r7
 80068e0:	f7f9 fcd4 	bl	800028c <__adddf3>
 80068e4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068e6:	4b35      	ldr	r3, [pc, #212]	@ (80069bc <__ieee754_pow+0x77c>)
 80068e8:	4413      	add	r3, r2
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	f7f9 fccd 	bl	800028c <__adddf3>
 80068f2:	4682      	mov	sl, r0
 80068f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80068f6:	468b      	mov	fp, r1
 80068f8:	f7f9 fe14 	bl	8000524 <__aeabi_i2d>
 80068fc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068fe:	4b30      	ldr	r3, [pc, #192]	@ (80069c0 <__ieee754_pow+0x780>)
 8006900:	4413      	add	r3, r2
 8006902:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006906:	4606      	mov	r6, r0
 8006908:	460f      	mov	r7, r1
 800690a:	4652      	mov	r2, sl
 800690c:	465b      	mov	r3, fp
 800690e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006912:	f7f9 fcbb 	bl	800028c <__adddf3>
 8006916:	4642      	mov	r2, r8
 8006918:	464b      	mov	r3, r9
 800691a:	f7f9 fcb7 	bl	800028c <__adddf3>
 800691e:	4632      	mov	r2, r6
 8006920:	463b      	mov	r3, r7
 8006922:	f7f9 fcb3 	bl	800028c <__adddf3>
 8006926:	2400      	movs	r4, #0
 8006928:	4632      	mov	r2, r6
 800692a:	463b      	mov	r3, r7
 800692c:	4620      	mov	r0, r4
 800692e:	460d      	mov	r5, r1
 8006930:	f7f9 fcaa 	bl	8000288 <__aeabi_dsub>
 8006934:	4642      	mov	r2, r8
 8006936:	464b      	mov	r3, r9
 8006938:	f7f9 fca6 	bl	8000288 <__aeabi_dsub>
 800693c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006940:	f7f9 fca2 	bl	8000288 <__aeabi_dsub>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4650      	mov	r0, sl
 800694a:	4659      	mov	r1, fp
 800694c:	e61c      	b.n	8006588 <__ieee754_pow+0x348>
 800694e:	2400      	movs	r4, #0
 8006950:	e68a      	b.n	8006668 <__ieee754_pow+0x428>
 8006952:	2601      	movs	r6, #1
 8006954:	e6a0      	b.n	8006698 <__ieee754_pow+0x458>
 8006956:	bf00      	nop
 8006958:	4a454eef 	.word	0x4a454eef
 800695c:	3fca7e28 	.word	0x3fca7e28
 8006960:	93c9db65 	.word	0x93c9db65
 8006964:	3fcd864a 	.word	0x3fcd864a
 8006968:	a91d4101 	.word	0xa91d4101
 800696c:	3fd17460 	.word	0x3fd17460
 8006970:	518f264d 	.word	0x518f264d
 8006974:	3fd55555 	.word	0x3fd55555
 8006978:	db6fabff 	.word	0xdb6fabff
 800697c:	3fdb6db6 	.word	0x3fdb6db6
 8006980:	33333303 	.word	0x33333303
 8006984:	3fe33333 	.word	0x3fe33333
 8006988:	e0000000 	.word	0xe0000000
 800698c:	3feec709 	.word	0x3feec709
 8006990:	dc3a03fd 	.word	0xdc3a03fd
 8006994:	3feec709 	.word	0x3feec709
 8006998:	145b01f5 	.word	0x145b01f5
 800699c:	be3e2fe0 	.word	0xbe3e2fe0
 80069a0:	7ff00000 	.word	0x7ff00000
 80069a4:	43400000 	.word	0x43400000
 80069a8:	0003988e 	.word	0x0003988e
 80069ac:	000bb679 	.word	0x000bb679
 80069b0:	080072b8 	.word	0x080072b8
 80069b4:	3ff00000 	.word	0x3ff00000
 80069b8:	40080000 	.word	0x40080000
 80069bc:	08007298 	.word	0x08007298
 80069c0:	080072a8 	.word	0x080072a8
 80069c4:	a39a      	add	r3, pc, #616	@ (adr r3, 8006c30 <__ieee754_pow+0x9f0>)
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	4630      	mov	r0, r6
 80069cc:	4639      	mov	r1, r7
 80069ce:	f7f9 fc5d 	bl	800028c <__adddf3>
 80069d2:	4642      	mov	r2, r8
 80069d4:	e9cd 0100 	strd	r0, r1, [sp]
 80069d8:	464b      	mov	r3, r9
 80069da:	4620      	mov	r0, r4
 80069dc:	4629      	mov	r1, r5
 80069de:	f7f9 fc53 	bl	8000288 <__aeabi_dsub>
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069ea:	f7fa f895 	bl	8000b18 <__aeabi_dcmpgt>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	f47f ae0c 	bne.w	800660c <__ieee754_pow+0x3cc>
 80069f4:	4ba0      	ldr	r3, [pc, #640]	@ (8006c78 <__ieee754_pow+0xa38>)
 80069f6:	e022      	b.n	8006a3e <__ieee754_pow+0x7fe>
 80069f8:	4ca0      	ldr	r4, [pc, #640]	@ (8006c7c <__ieee754_pow+0xa3c>)
 80069fa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80069fe:	42a3      	cmp	r3, r4
 8006a00:	d919      	bls.n	8006a36 <__ieee754_pow+0x7f6>
 8006a02:	4b9f      	ldr	r3, [pc, #636]	@ (8006c80 <__ieee754_pow+0xa40>)
 8006a04:	440b      	add	r3, r1
 8006a06:	4303      	orrs	r3, r0
 8006a08:	d009      	beq.n	8006a1e <__ieee754_pow+0x7de>
 8006a0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2300      	movs	r3, #0
 8006a12:	f7fa f863 	bl	8000adc <__aeabi_dcmplt>
 8006a16:	3800      	subs	r0, #0
 8006a18:	bf18      	it	ne
 8006a1a:	2001      	movne	r0, #1
 8006a1c:	e527      	b.n	800646e <__ieee754_pow+0x22e>
 8006a1e:	4642      	mov	r2, r8
 8006a20:	464b      	mov	r3, r9
 8006a22:	f7f9 fc31 	bl	8000288 <__aeabi_dsub>
 8006a26:	4632      	mov	r2, r6
 8006a28:	463b      	mov	r3, r7
 8006a2a:	f7fa f86b 	bl	8000b04 <__aeabi_dcmpge>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d1eb      	bne.n	8006a0a <__ieee754_pow+0x7ca>
 8006a32:	4b94      	ldr	r3, [pc, #592]	@ (8006c84 <__ieee754_pow+0xa44>)
 8006a34:	e003      	b.n	8006a3e <__ieee754_pow+0x7fe>
 8006a36:	4a94      	ldr	r2, [pc, #592]	@ (8006c88 <__ieee754_pow+0xa48>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	f240 80e1 	bls.w	8006c00 <__ieee754_pow+0x9c0>
 8006a3e:	151b      	asrs	r3, r3, #20
 8006a40:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8006a44:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8006a48:	fa4a fa03 	asr.w	sl, sl, r3
 8006a4c:	44da      	add	sl, fp
 8006a4e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006a52:	488e      	ldr	r0, [pc, #568]	@ (8006c8c <__ieee754_pow+0xa4c>)
 8006a54:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006a58:	4108      	asrs	r0, r1
 8006a5a:	ea00 030a 	and.w	r3, r0, sl
 8006a5e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006a62:	f1c1 0114 	rsb	r1, r1, #20
 8006a66:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006a6a:	fa4a fa01 	asr.w	sl, sl, r1
 8006a6e:	f1bb 0f00 	cmp.w	fp, #0
 8006a72:	4640      	mov	r0, r8
 8006a74:	4649      	mov	r1, r9
 8006a76:	f04f 0200 	mov.w	r2, #0
 8006a7a:	bfb8      	it	lt
 8006a7c:	f1ca 0a00 	rsblt	sl, sl, #0
 8006a80:	f7f9 fc02 	bl	8000288 <__aeabi_dsub>
 8006a84:	4680      	mov	r8, r0
 8006a86:	4689      	mov	r9, r1
 8006a88:	4632      	mov	r2, r6
 8006a8a:	463b      	mov	r3, r7
 8006a8c:	4640      	mov	r0, r8
 8006a8e:	4649      	mov	r1, r9
 8006a90:	f7f9 fbfc 	bl	800028c <__adddf3>
 8006a94:	2400      	movs	r4, #0
 8006a96:	a368      	add	r3, pc, #416	@ (adr r3, 8006c38 <__ieee754_pow+0x9f8>)
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	460d      	mov	r5, r1
 8006aa0:	f7f9 fdaa 	bl	80005f8 <__aeabi_dmul>
 8006aa4:	4642      	mov	r2, r8
 8006aa6:	e9cd 0100 	strd	r0, r1, [sp]
 8006aaa:	464b      	mov	r3, r9
 8006aac:	4620      	mov	r0, r4
 8006aae:	4629      	mov	r1, r5
 8006ab0:	f7f9 fbea 	bl	8000288 <__aeabi_dsub>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4630      	mov	r0, r6
 8006aba:	4639      	mov	r1, r7
 8006abc:	f7f9 fbe4 	bl	8000288 <__aeabi_dsub>
 8006ac0:	a35f      	add	r3, pc, #380	@ (adr r3, 8006c40 <__ieee754_pow+0xa00>)
 8006ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac6:	f7f9 fd97 	bl	80005f8 <__aeabi_dmul>
 8006aca:	a35f      	add	r3, pc, #380	@ (adr r3, 8006c48 <__ieee754_pow+0xa08>)
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	4680      	mov	r8, r0
 8006ad2:	4689      	mov	r9, r1
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	f7f9 fd8e 	bl	80005f8 <__aeabi_dmul>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	f7f9 fbd2 	bl	800028c <__adddf3>
 8006ae8:	4604      	mov	r4, r0
 8006aea:	460d      	mov	r5, r1
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006af4:	f7f9 fbca 	bl	800028c <__adddf3>
 8006af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006afc:	4680      	mov	r8, r0
 8006afe:	4689      	mov	r9, r1
 8006b00:	f7f9 fbc2 	bl	8000288 <__aeabi_dsub>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4620      	mov	r0, r4
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	f7f9 fbbc 	bl	8000288 <__aeabi_dsub>
 8006b10:	4642      	mov	r2, r8
 8006b12:	4606      	mov	r6, r0
 8006b14:	460f      	mov	r7, r1
 8006b16:	464b      	mov	r3, r9
 8006b18:	4640      	mov	r0, r8
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	f7f9 fd6c 	bl	80005f8 <__aeabi_dmul>
 8006b20:	a34b      	add	r3, pc, #300	@ (adr r3, 8006c50 <__ieee754_pow+0xa10>)
 8006b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b26:	4604      	mov	r4, r0
 8006b28:	460d      	mov	r5, r1
 8006b2a:	f7f9 fd65 	bl	80005f8 <__aeabi_dmul>
 8006b2e:	a34a      	add	r3, pc, #296	@ (adr r3, 8006c58 <__ieee754_pow+0xa18>)
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	f7f9 fba8 	bl	8000288 <__aeabi_dsub>
 8006b38:	4622      	mov	r2, r4
 8006b3a:	462b      	mov	r3, r5
 8006b3c:	f7f9 fd5c 	bl	80005f8 <__aeabi_dmul>
 8006b40:	a347      	add	r3, pc, #284	@ (adr r3, 8006c60 <__ieee754_pow+0xa20>)
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	f7f9 fba1 	bl	800028c <__adddf3>
 8006b4a:	4622      	mov	r2, r4
 8006b4c:	462b      	mov	r3, r5
 8006b4e:	f7f9 fd53 	bl	80005f8 <__aeabi_dmul>
 8006b52:	a345      	add	r3, pc, #276	@ (adr r3, 8006c68 <__ieee754_pow+0xa28>)
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f7f9 fb96 	bl	8000288 <__aeabi_dsub>
 8006b5c:	4622      	mov	r2, r4
 8006b5e:	462b      	mov	r3, r5
 8006b60:	f7f9 fd4a 	bl	80005f8 <__aeabi_dmul>
 8006b64:	a342      	add	r3, pc, #264	@ (adr r3, 8006c70 <__ieee754_pow+0xa30>)
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	f7f9 fb8f 	bl	800028c <__adddf3>
 8006b6e:	4622      	mov	r2, r4
 8006b70:	462b      	mov	r3, r5
 8006b72:	f7f9 fd41 	bl	80005f8 <__aeabi_dmul>
 8006b76:	4602      	mov	r2, r0
 8006b78:	460b      	mov	r3, r1
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	f7f9 fb83 	bl	8000288 <__aeabi_dsub>
 8006b82:	4604      	mov	r4, r0
 8006b84:	460d      	mov	r5, r1
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4640      	mov	r0, r8
 8006b8c:	4649      	mov	r1, r9
 8006b8e:	f7f9 fd33 	bl	80005f8 <__aeabi_dmul>
 8006b92:	2200      	movs	r2, #0
 8006b94:	e9cd 0100 	strd	r0, r1, [sp]
 8006b98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	f7f9 fb72 	bl	8000288 <__aeabi_dsub>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bac:	f7f9 fe4e 	bl	800084c <__aeabi_ddiv>
 8006bb0:	4632      	mov	r2, r6
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	460d      	mov	r5, r1
 8006bb6:	463b      	mov	r3, r7
 8006bb8:	4640      	mov	r0, r8
 8006bba:	4649      	mov	r1, r9
 8006bbc:	f7f9 fd1c 	bl	80005f8 <__aeabi_dmul>
 8006bc0:	4632      	mov	r2, r6
 8006bc2:	463b      	mov	r3, r7
 8006bc4:	f7f9 fb62 	bl	800028c <__adddf3>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4620      	mov	r0, r4
 8006bce:	4629      	mov	r1, r5
 8006bd0:	f7f9 fb5a 	bl	8000288 <__aeabi_dsub>
 8006bd4:	4642      	mov	r2, r8
 8006bd6:	464b      	mov	r3, r9
 8006bd8:	f7f9 fb56 	bl	8000288 <__aeabi_dsub>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	2000      	movs	r0, #0
 8006be2:	492b      	ldr	r1, [pc, #172]	@ (8006c90 <__ieee754_pow+0xa50>)
 8006be4:	f7f9 fb50 	bl	8000288 <__aeabi_dsub>
 8006be8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006bec:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8006bf0:	da09      	bge.n	8006c06 <__ieee754_pow+0x9c6>
 8006bf2:	4652      	mov	r2, sl
 8006bf4:	f000 f854 	bl	8006ca0 <scalbn>
 8006bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bfc:	f7ff bb89 	b.w	8006312 <__ieee754_pow+0xd2>
 8006c00:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006c04:	e740      	b.n	8006a88 <__ieee754_pow+0x848>
 8006c06:	4621      	mov	r1, r4
 8006c08:	e7f6      	b.n	8006bf8 <__ieee754_pow+0x9b8>
 8006c0a:	4921      	ldr	r1, [pc, #132]	@ (8006c90 <__ieee754_pow+0xa50>)
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	f7ff bb35 	b.w	800627c <__ieee754_pow+0x3c>
 8006c12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c16:	f7ff bb31 	b.w	800627c <__ieee754_pow+0x3c>
 8006c1a:	4650      	mov	r0, sl
 8006c1c:	4659      	mov	r1, fp
 8006c1e:	f7ff bb2d 	b.w	800627c <__ieee754_pow+0x3c>
 8006c22:	460c      	mov	r4, r1
 8006c24:	f7ff bb87 	b.w	8006336 <__ieee754_pow+0xf6>
 8006c28:	2400      	movs	r4, #0
 8006c2a:	f7ff bb69 	b.w	8006300 <__ieee754_pow+0xc0>
 8006c2e:	bf00      	nop
 8006c30:	652b82fe 	.word	0x652b82fe
 8006c34:	3c971547 	.word	0x3c971547
 8006c38:	00000000 	.word	0x00000000
 8006c3c:	3fe62e43 	.word	0x3fe62e43
 8006c40:	fefa39ef 	.word	0xfefa39ef
 8006c44:	3fe62e42 	.word	0x3fe62e42
 8006c48:	0ca86c39 	.word	0x0ca86c39
 8006c4c:	be205c61 	.word	0xbe205c61
 8006c50:	72bea4d0 	.word	0x72bea4d0
 8006c54:	3e663769 	.word	0x3e663769
 8006c58:	c5d26bf1 	.word	0xc5d26bf1
 8006c5c:	3ebbbd41 	.word	0x3ebbbd41
 8006c60:	af25de2c 	.word	0xaf25de2c
 8006c64:	3f11566a 	.word	0x3f11566a
 8006c68:	16bebd93 	.word	0x16bebd93
 8006c6c:	3f66c16c 	.word	0x3f66c16c
 8006c70:	5555553e 	.word	0x5555553e
 8006c74:	3fc55555 	.word	0x3fc55555
 8006c78:	40900000 	.word	0x40900000
 8006c7c:	4090cbff 	.word	0x4090cbff
 8006c80:	3f6f3400 	.word	0x3f6f3400
 8006c84:	4090cc00 	.word	0x4090cc00
 8006c88:	3fe00000 	.word	0x3fe00000
 8006c8c:	fff00000 	.word	0xfff00000
 8006c90:	3ff00000 	.word	0x3ff00000

08006c94 <fabs>:
 8006c94:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4770      	bx	lr
 8006c9c:	0000      	movs	r0, r0
	...

08006ca0 <scalbn>:
 8006ca0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8006ca4:	4616      	mov	r6, r2
 8006ca6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006caa:	4683      	mov	fp, r0
 8006cac:	468c      	mov	ip, r1
 8006cae:	460b      	mov	r3, r1
 8006cb0:	b982      	cbnz	r2, 8006cd4 <scalbn+0x34>
 8006cb2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006cb6:	4303      	orrs	r3, r0
 8006cb8:	d035      	beq.n	8006d26 <scalbn+0x86>
 8006cba:	4b2d      	ldr	r3, [pc, #180]	@ (8006d70 <scalbn+0xd0>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f7f9 fc9b 	bl	80005f8 <__aeabi_dmul>
 8006cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8006d74 <scalbn+0xd4>)
 8006cc4:	429e      	cmp	r6, r3
 8006cc6:	4683      	mov	fp, r0
 8006cc8:	468c      	mov	ip, r1
 8006cca:	da0d      	bge.n	8006ce8 <scalbn+0x48>
 8006ccc:	a324      	add	r3, pc, #144	@ (adr r3, 8006d60 <scalbn+0xc0>)
 8006cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd2:	e019      	b.n	8006d08 <scalbn+0x68>
 8006cd4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8006cd8:	42ba      	cmp	r2, r7
 8006cda:	d109      	bne.n	8006cf0 <scalbn+0x50>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	f7f9 fad5 	bl	800028c <__adddf3>
 8006ce2:	4683      	mov	fp, r0
 8006ce4:	468c      	mov	ip, r1
 8006ce6:	e01e      	b.n	8006d26 <scalbn+0x86>
 8006ce8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006cec:	460b      	mov	r3, r1
 8006cee:	3a36      	subs	r2, #54	@ 0x36
 8006cf0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006cf4:	428e      	cmp	r6, r1
 8006cf6:	dd0a      	ble.n	8006d0e <scalbn+0x6e>
 8006cf8:	a31b      	add	r3, pc, #108	@ (adr r3, 8006d68 <scalbn+0xc8>)
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	4665      	mov	r5, ip
 8006d00:	f363 051e 	bfi	r5, r3, #0, #31
 8006d04:	481c      	ldr	r0, [pc, #112]	@ (8006d78 <scalbn+0xd8>)
 8006d06:	4629      	mov	r1, r5
 8006d08:	f7f9 fc76 	bl	80005f8 <__aeabi_dmul>
 8006d0c:	e7e9      	b.n	8006ce2 <scalbn+0x42>
 8006d0e:	4432      	add	r2, r6
 8006d10:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006d14:	428a      	cmp	r2, r1
 8006d16:	dcef      	bgt.n	8006cf8 <scalbn+0x58>
 8006d18:	2a00      	cmp	r2, #0
 8006d1a:	dd08      	ble.n	8006d2e <scalbn+0x8e>
 8006d1c:	f36f 531e 	bfc	r3, #20, #11
 8006d20:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d24:	46ac      	mov	ip, r5
 8006d26:	4658      	mov	r0, fp
 8006d28:	4661      	mov	r1, ip
 8006d2a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8006d2e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006d32:	da09      	bge.n	8006d48 <scalbn+0xa8>
 8006d34:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8006d38:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8006d3c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8006d40:	480e      	ldr	r0, [pc, #56]	@ (8006d7c <scalbn+0xdc>)
 8006d42:	f041 011f 	orr.w	r1, r1, #31
 8006d46:	e7c1      	b.n	8006ccc <scalbn+0x2c>
 8006d48:	3236      	adds	r2, #54	@ 0x36
 8006d4a:	f36f 531e 	bfc	r3, #20, #11
 8006d4e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d52:	4658      	mov	r0, fp
 8006d54:	4b0a      	ldr	r3, [pc, #40]	@ (8006d80 <scalbn+0xe0>)
 8006d56:	4629      	mov	r1, r5
 8006d58:	2200      	movs	r2, #0
 8006d5a:	e7d5      	b.n	8006d08 <scalbn+0x68>
 8006d5c:	f3af 8000 	nop.w
 8006d60:	c2f8f359 	.word	0xc2f8f359
 8006d64:	01a56e1f 	.word	0x01a56e1f
 8006d68:	8800759c 	.word	0x8800759c
 8006d6c:	7e37e43c 	.word	0x7e37e43c
 8006d70:	43500000 	.word	0x43500000
 8006d74:	ffff3cb0 	.word	0xffff3cb0
 8006d78:	8800759c 	.word	0x8800759c
 8006d7c:	c2f8f359 	.word	0xc2f8f359
 8006d80:	3c900000 	.word	0x3c900000

08006d84 <with_errno>:
 8006d84:	b570      	push	{r4, r5, r6, lr}
 8006d86:	4604      	mov	r4, r0
 8006d88:	460d      	mov	r5, r1
 8006d8a:	4616      	mov	r6, r2
 8006d8c:	f7fd f880 	bl	8003e90 <__errno>
 8006d90:	4629      	mov	r1, r5
 8006d92:	6006      	str	r6, [r0, #0]
 8006d94:	4620      	mov	r0, r4
 8006d96:	bd70      	pop	{r4, r5, r6, pc}

08006d98 <xflow>:
 8006d98:	b513      	push	{r0, r1, r4, lr}
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4610      	mov	r0, r2
 8006da0:	b10c      	cbz	r4, 8006da6 <xflow+0xe>
 8006da2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006da6:	e9cd 2300 	strd	r2, r3, [sp]
 8006daa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dae:	f7f9 fc23 	bl	80005f8 <__aeabi_dmul>
 8006db2:	2222      	movs	r2, #34	@ 0x22
 8006db4:	b002      	add	sp, #8
 8006db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dba:	f7ff bfe3 	b.w	8006d84 <with_errno>

08006dbe <__math_uflow>:
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006dc4:	f7ff bfe8 	b.w	8006d98 <xflow>

08006dc8 <__math_oflow>:
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8006dce:	f7ff bfe3 	b.w	8006d98 <xflow>
	...

08006dd4 <_init>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	bf00      	nop
 8006dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dda:	bc08      	pop	{r3}
 8006ddc:	469e      	mov	lr, r3
 8006dde:	4770      	bx	lr

08006de0 <_fini>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	bf00      	nop
 8006de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de6:	bc08      	pop	{r3}
 8006de8:	469e      	mov	lr, r3
 8006dea:	4770      	bx	lr
